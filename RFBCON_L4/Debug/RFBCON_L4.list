
RFBCON_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  0800d3b4  0800d3b4  0001d3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc10  0800dc10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc10  0800dc10  0001dc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc18  0800dc18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc18  0800dc18  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800dc20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f70  20000078  0800dc98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fe8  0800dc98  00024fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cf0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053e0  00000000  00000000  00043d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  00049178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d10  00000000  00000000  0004b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f48  00000000  00000000  0004cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000297e0  00000000  00000000  00076d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b19  00000000  00000000  000a0518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008798  00000000  00000000  00197084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d39c 	.word	0x0800d39c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800d39c 	.word	0x0800d39c

080001d0 <__aeabi_frsub>:
 80001d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__addsf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_fsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001dc <__addsf3>:
 80001dc:	0042      	lsls	r2, r0, #1
 80001de:	bf1f      	itttt	ne
 80001e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e4:	ea92 0f03 	teqne	r2, r3
 80001e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f0:	d06a      	beq.n	80002c8 <__addsf3+0xec>
 80001f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fa:	bfc1      	itttt	gt
 80001fc:	18d2      	addgt	r2, r2, r3
 80001fe:	4041      	eorgt	r1, r0
 8000200:	4048      	eorgt	r0, r1
 8000202:	4041      	eorgt	r1, r0
 8000204:	bfb8      	it	lt
 8000206:	425b      	neglt	r3, r3
 8000208:	2b19      	cmp	r3, #25
 800020a:	bf88      	it	hi
 800020c:	4770      	bxhi	lr
 800020e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000216:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800021a:	bf18      	it	ne
 800021c:	4240      	negne	r0, r0
 800021e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000222:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000226:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800022a:	bf18      	it	ne
 800022c:	4249      	negne	r1, r1
 800022e:	ea92 0f03 	teq	r2, r3
 8000232:	d03f      	beq.n	80002b4 <__addsf3+0xd8>
 8000234:	f1a2 0201 	sub.w	r2, r2, #1
 8000238:	fa41 fc03 	asr.w	ip, r1, r3
 800023c:	eb10 000c 	adds.w	r0, r0, ip
 8000240:	f1c3 0320 	rsb	r3, r3, #32
 8000244:	fa01 f103 	lsl.w	r1, r1, r3
 8000248:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800024c:	d502      	bpl.n	8000254 <__addsf3+0x78>
 800024e:	4249      	negs	r1, r1
 8000250:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000254:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000258:	d313      	bcc.n	8000282 <__addsf3+0xa6>
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d306      	bcc.n	800026e <__addsf3+0x92>
 8000260:	0840      	lsrs	r0, r0, #1
 8000262:	ea4f 0131 	mov.w	r1, r1, rrx
 8000266:	f102 0201 	add.w	r2, r2, #1
 800026a:	2afe      	cmp	r2, #254	; 0xfe
 800026c:	d251      	bcs.n	8000312 <__addsf3+0x136>
 800026e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000272:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000276:	bf08      	it	eq
 8000278:	f020 0001 	biceq.w	r0, r0, #1
 800027c:	ea40 0003 	orr.w	r0, r0, r3
 8000280:	4770      	bx	lr
 8000282:	0049      	lsls	r1, r1, #1
 8000284:	eb40 0000 	adc.w	r0, r0, r0
 8000288:	3a01      	subs	r2, #1
 800028a:	bf28      	it	cs
 800028c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000290:	d2ed      	bcs.n	800026e <__addsf3+0x92>
 8000292:	fab0 fc80 	clz	ip, r0
 8000296:	f1ac 0c08 	sub.w	ip, ip, #8
 800029a:	ebb2 020c 	subs.w	r2, r2, ip
 800029e:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a2:	bfaa      	itet	ge
 80002a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a8:	4252      	neglt	r2, r2
 80002aa:	4318      	orrge	r0, r3
 80002ac:	bfbc      	itt	lt
 80002ae:	40d0      	lsrlt	r0, r2
 80002b0:	4318      	orrlt	r0, r3
 80002b2:	4770      	bx	lr
 80002b4:	f092 0f00 	teq	r2, #0
 80002b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002bc:	bf06      	itte	eq
 80002be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002c2:	3201      	addeq	r2, #1
 80002c4:	3b01      	subne	r3, #1
 80002c6:	e7b5      	b.n	8000234 <__addsf3+0x58>
 80002c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d0:	bf18      	it	ne
 80002d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d6:	d021      	beq.n	800031c <__addsf3+0x140>
 80002d8:	ea92 0f03 	teq	r2, r3
 80002dc:	d004      	beq.n	80002e8 <__addsf3+0x10c>
 80002de:	f092 0f00 	teq	r2, #0
 80002e2:	bf08      	it	eq
 80002e4:	4608      	moveq	r0, r1
 80002e6:	4770      	bx	lr
 80002e8:	ea90 0f01 	teq	r0, r1
 80002ec:	bf1c      	itt	ne
 80002ee:	2000      	movne	r0, #0
 80002f0:	4770      	bxne	lr
 80002f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002f6:	d104      	bne.n	8000302 <__addsf3+0x126>
 80002f8:	0040      	lsls	r0, r0, #1
 80002fa:	bf28      	it	cs
 80002fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000300:	4770      	bx	lr
 8000302:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000306:	bf3c      	itt	cc
 8000308:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800030c:	4770      	bxcc	lr
 800030e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000312:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000316:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031a:	4770      	bx	lr
 800031c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000320:	bf16      	itet	ne
 8000322:	4608      	movne	r0, r1
 8000324:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000328:	4601      	movne	r1, r0
 800032a:	0242      	lsls	r2, r0, #9
 800032c:	bf06      	itte	eq
 800032e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000332:	ea90 0f01 	teqeq	r0, r1
 8000336:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800033a:	4770      	bx	lr

0800033c <__aeabi_ui2f>:
 800033c:	f04f 0300 	mov.w	r3, #0
 8000340:	e004      	b.n	800034c <__aeabi_i2f+0x8>
 8000342:	bf00      	nop

08000344 <__aeabi_i2f>:
 8000344:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000348:	bf48      	it	mi
 800034a:	4240      	negmi	r0, r0
 800034c:	ea5f 0c00 	movs.w	ip, r0
 8000350:	bf08      	it	eq
 8000352:	4770      	bxeq	lr
 8000354:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000358:	4601      	mov	r1, r0
 800035a:	f04f 0000 	mov.w	r0, #0
 800035e:	e01c      	b.n	800039a <__aeabi_l2f+0x2a>

08000360 <__aeabi_ul2f>:
 8000360:	ea50 0201 	orrs.w	r2, r0, r1
 8000364:	bf08      	it	eq
 8000366:	4770      	bxeq	lr
 8000368:	f04f 0300 	mov.w	r3, #0
 800036c:	e00a      	b.n	8000384 <__aeabi_l2f+0x14>
 800036e:	bf00      	nop

08000370 <__aeabi_l2f>:
 8000370:	ea50 0201 	orrs.w	r2, r0, r1
 8000374:	bf08      	it	eq
 8000376:	4770      	bxeq	lr
 8000378:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800037c:	d502      	bpl.n	8000384 <__aeabi_l2f+0x14>
 800037e:	4240      	negs	r0, r0
 8000380:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000384:	ea5f 0c01 	movs.w	ip, r1
 8000388:	bf02      	ittt	eq
 800038a:	4684      	moveq	ip, r0
 800038c:	4601      	moveq	r1, r0
 800038e:	2000      	moveq	r0, #0
 8000390:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000394:	bf08      	it	eq
 8000396:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800039a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800039e:	fabc f28c 	clz	r2, ip
 80003a2:	3a08      	subs	r2, #8
 80003a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a8:	db10      	blt.n	80003cc <__aeabi_l2f+0x5c>
 80003aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ae:	4463      	add	r3, ip
 80003b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b4:	f1c2 0220 	rsb	r2, r2, #32
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	fa20 f202 	lsr.w	r2, r0, r2
 80003c0:	eb43 0002 	adc.w	r0, r3, r2
 80003c4:	bf08      	it	eq
 80003c6:	f020 0001 	biceq.w	r0, r0, #1
 80003ca:	4770      	bx	lr
 80003cc:	f102 0220 	add.w	r2, r2, #32
 80003d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d4:	f1c2 0220 	rsb	r2, r2, #32
 80003d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003dc:	fa21 f202 	lsr.w	r2, r1, r2
 80003e0:	eb43 0002 	adc.w	r0, r3, r2
 80003e4:	bf08      	it	eq
 80003e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ea:	4770      	bx	lr

080003ec <__aeabi_uldivmod>:
 80003ec:	b953      	cbnz	r3, 8000404 <__aeabi_uldivmod+0x18>
 80003ee:	b94a      	cbnz	r2, 8000404 <__aeabi_uldivmod+0x18>
 80003f0:	2900      	cmp	r1, #0
 80003f2:	bf08      	it	eq
 80003f4:	2800      	cmpeq	r0, #0
 80003f6:	bf1c      	itt	ne
 80003f8:	f04f 31ff 	movne.w	r1, #4294967295
 80003fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000400:	f000 bad2 	b.w	80009a8 <__aeabi_idiv0>
 8000404:	f1ad 0c08 	sub.w	ip, sp, #8
 8000408:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800040c:	f000 f83a 	bl	8000484 <__udivmoddi4>
 8000410:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000418:	b004      	add	sp, #16
 800041a:	4770      	bx	lr

0800041c <__aeabi_f2lz>:
 800041c:	ee07 0a90 	vmov	s15, r0
 8000420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000428:	d401      	bmi.n	800042e <__aeabi_f2lz+0x12>
 800042a:	f000 b80b 	b.w	8000444 <__aeabi_f2ulz>
 800042e:	eef1 7a67 	vneg.f32	s15, s15
 8000432:	b508      	push	{r3, lr}
 8000434:	ee17 0a90 	vmov	r0, s15
 8000438:	f000 f804 	bl	8000444 <__aeabi_f2ulz>
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	bd08      	pop	{r3, pc}

08000444 <__aeabi_f2ulz>:
 8000444:	b5d0      	push	{r4, r6, r7, lr}
 8000446:	f000 fc15 	bl	8000c74 <__aeabi_f2d>
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <__aeabi_f2ulz+0x38>)
 800044c:	2200      	movs	r2, #0
 800044e:	4606      	mov	r6, r0
 8000450:	460f      	mov	r7, r1
 8000452:	f000 f97f 	bl	8000754 <__aeabi_dmul>
 8000456:	f000 fc65 	bl	8000d24 <__aeabi_d2uiz>
 800045a:	4604      	mov	r4, r0
 800045c:	f000 fbe8 	bl	8000c30 <__aeabi_ui2d>
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <__aeabi_f2ulz+0x3c>)
 8000462:	2200      	movs	r2, #0
 8000464:	f000 f976 	bl	8000754 <__aeabi_dmul>
 8000468:	4602      	mov	r2, r0
 800046a:	460b      	mov	r3, r1
 800046c:	4630      	mov	r0, r6
 800046e:	4639      	mov	r1, r7
 8000470:	f000 faa0 	bl	80009b4 <__aeabi_dsub>
 8000474:	f000 fc56 	bl	8000d24 <__aeabi_d2uiz>
 8000478:	4621      	mov	r1, r4
 800047a:	bdd0      	pop	{r4, r6, r7, pc}
 800047c:	3df00000 	.word	0x3df00000
 8000480:	41f00000 	.word	0x41f00000

08000484 <__udivmoddi4>:
 8000484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000488:	9d08      	ldr	r5, [sp, #32]
 800048a:	4604      	mov	r4, r0
 800048c:	468e      	mov	lr, r1
 800048e:	2b00      	cmp	r3, #0
 8000490:	d14d      	bne.n	800052e <__udivmoddi4+0xaa>
 8000492:	428a      	cmp	r2, r1
 8000494:	4694      	mov	ip, r2
 8000496:	d969      	bls.n	800056c <__udivmoddi4+0xe8>
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	b152      	cbz	r2, 80004b4 <__udivmoddi4+0x30>
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	f1c2 0120 	rsb	r1, r2, #32
 80004a6:	fa20 f101 	lsr.w	r1, r0, r1
 80004aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ae:	ea41 0e03 	orr.w	lr, r1, r3
 80004b2:	4094      	lsls	r4, r2
 80004b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b8:	0c21      	lsrs	r1, r4, #16
 80004ba:	fbbe f6f8 	udiv	r6, lr, r8
 80004be:	fa1f f78c 	uxth.w	r7, ip
 80004c2:	fb08 e316 	mls	r3, r8, r6, lr
 80004c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004ca:	fb06 f107 	mul.w	r1, r6, r7
 80004ce:	4299      	cmp	r1, r3
 80004d0:	d90a      	bls.n	80004e8 <__udivmoddi4+0x64>
 80004d2:	eb1c 0303 	adds.w	r3, ip, r3
 80004d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80004da:	f080 811f 	bcs.w	800071c <__udivmoddi4+0x298>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 811c 	bls.w	800071c <__udivmoddi4+0x298>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f0:	fb08 3310 	mls	r3, r8, r0, r3
 80004f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f8:	fb00 f707 	mul.w	r7, r0, r7
 80004fc:	42a7      	cmp	r7, r4
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x92>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f100 33ff 	add.w	r3, r0, #4294967295
 8000508:	f080 810a 	bcs.w	8000720 <__udivmoddi4+0x29c>
 800050c:	42a7      	cmp	r7, r4
 800050e:	f240 8107 	bls.w	8000720 <__udivmoddi4+0x29c>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800051a:	1be4      	subs	r4, r4, r7
 800051c:	2600      	movs	r6, #0
 800051e:	b11d      	cbz	r5, 8000528 <__udivmoddi4+0xa4>
 8000520:	40d4      	lsrs	r4, r2
 8000522:	2300      	movs	r3, #0
 8000524:	e9c5 4300 	strd	r4, r3, [r5]
 8000528:	4631      	mov	r1, r6
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	428b      	cmp	r3, r1
 8000530:	d909      	bls.n	8000546 <__udivmoddi4+0xc2>
 8000532:	2d00      	cmp	r5, #0
 8000534:	f000 80ef 	beq.w	8000716 <__udivmoddi4+0x292>
 8000538:	2600      	movs	r6, #0
 800053a:	e9c5 0100 	strd	r0, r1, [r5]
 800053e:	4630      	mov	r0, r6
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	fab3 f683 	clz	r6, r3
 800054a:	2e00      	cmp	r6, #0
 800054c:	d14a      	bne.n	80005e4 <__udivmoddi4+0x160>
 800054e:	428b      	cmp	r3, r1
 8000550:	d302      	bcc.n	8000558 <__udivmoddi4+0xd4>
 8000552:	4282      	cmp	r2, r0
 8000554:	f200 80f9 	bhi.w	800074a <__udivmoddi4+0x2c6>
 8000558:	1a84      	subs	r4, r0, r2
 800055a:	eb61 0303 	sbc.w	r3, r1, r3
 800055e:	2001      	movs	r0, #1
 8000560:	469e      	mov	lr, r3
 8000562:	2d00      	cmp	r5, #0
 8000564:	d0e0      	beq.n	8000528 <__udivmoddi4+0xa4>
 8000566:	e9c5 4e00 	strd	r4, lr, [r5]
 800056a:	e7dd      	b.n	8000528 <__udivmoddi4+0xa4>
 800056c:	b902      	cbnz	r2, 8000570 <__udivmoddi4+0xec>
 800056e:	deff      	udf	#255	; 0xff
 8000570:	fab2 f282 	clz	r2, r2
 8000574:	2a00      	cmp	r2, #0
 8000576:	f040 8092 	bne.w	800069e <__udivmoddi4+0x21a>
 800057a:	eba1 010c 	sub.w	r1, r1, ip
 800057e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000582:	fa1f fe8c 	uxth.w	lr, ip
 8000586:	2601      	movs	r6, #1
 8000588:	0c20      	lsrs	r0, r4, #16
 800058a:	fbb1 f3f7 	udiv	r3, r1, r7
 800058e:	fb07 1113 	mls	r1, r7, r3, r1
 8000592:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000596:	fb0e f003 	mul.w	r0, lr, r3
 800059a:	4288      	cmp	r0, r1
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x12c>
 800059e:	eb1c 0101 	adds.w	r1, ip, r1
 80005a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80005a6:	d202      	bcs.n	80005ae <__udivmoddi4+0x12a>
 80005a8:	4288      	cmp	r0, r1
 80005aa:	f200 80cb 	bhi.w	8000744 <__udivmoddi4+0x2c0>
 80005ae:	4643      	mov	r3, r8
 80005b0:	1a09      	subs	r1, r1, r0
 80005b2:	b2a4      	uxth	r4, r4
 80005b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b8:	fb07 1110 	mls	r1, r7, r0, r1
 80005bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005c0:	fb0e fe00 	mul.w	lr, lr, r0
 80005c4:	45a6      	cmp	lr, r4
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x156>
 80005c8:	eb1c 0404 	adds.w	r4, ip, r4
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d202      	bcs.n	80005d8 <__udivmoddi4+0x154>
 80005d2:	45a6      	cmp	lr, r4
 80005d4:	f200 80bb 	bhi.w	800074e <__udivmoddi4+0x2ca>
 80005d8:	4608      	mov	r0, r1
 80005da:	eba4 040e 	sub.w	r4, r4, lr
 80005de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005e2:	e79c      	b.n	800051e <__udivmoddi4+0x9a>
 80005e4:	f1c6 0720 	rsb	r7, r6, #32
 80005e8:	40b3      	lsls	r3, r6
 80005ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80005f2:	fa20 f407 	lsr.w	r4, r0, r7
 80005f6:	fa01 f306 	lsl.w	r3, r1, r6
 80005fa:	431c      	orrs	r4, r3
 80005fc:	40f9      	lsrs	r1, r7
 80005fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000602:	fa00 f306 	lsl.w	r3, r0, r6
 8000606:	fbb1 f8f9 	udiv	r8, r1, r9
 800060a:	0c20      	lsrs	r0, r4, #16
 800060c:	fa1f fe8c 	uxth.w	lr, ip
 8000610:	fb09 1118 	mls	r1, r9, r8, r1
 8000614:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000618:	fb08 f00e 	mul.w	r0, r8, lr
 800061c:	4288      	cmp	r0, r1
 800061e:	fa02 f206 	lsl.w	r2, r2, r6
 8000622:	d90b      	bls.n	800063c <__udivmoddi4+0x1b8>
 8000624:	eb1c 0101 	adds.w	r1, ip, r1
 8000628:	f108 3aff 	add.w	sl, r8, #4294967295
 800062c:	f080 8088 	bcs.w	8000740 <__udivmoddi4+0x2bc>
 8000630:	4288      	cmp	r0, r1
 8000632:	f240 8085 	bls.w	8000740 <__udivmoddi4+0x2bc>
 8000636:	f1a8 0802 	sub.w	r8, r8, #2
 800063a:	4461      	add	r1, ip
 800063c:	1a09      	subs	r1, r1, r0
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb1 f0f9 	udiv	r0, r1, r9
 8000644:	fb09 1110 	mls	r1, r9, r0, r1
 8000648:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800064c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000650:	458e      	cmp	lr, r1
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x1e2>
 8000654:	eb1c 0101 	adds.w	r1, ip, r1
 8000658:	f100 34ff 	add.w	r4, r0, #4294967295
 800065c:	d26c      	bcs.n	8000738 <__udivmoddi4+0x2b4>
 800065e:	458e      	cmp	lr, r1
 8000660:	d96a      	bls.n	8000738 <__udivmoddi4+0x2b4>
 8000662:	3802      	subs	r0, #2
 8000664:	4461      	add	r1, ip
 8000666:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800066a:	fba0 9402 	umull	r9, r4, r0, r2
 800066e:	eba1 010e 	sub.w	r1, r1, lr
 8000672:	42a1      	cmp	r1, r4
 8000674:	46c8      	mov	r8, r9
 8000676:	46a6      	mov	lr, r4
 8000678:	d356      	bcc.n	8000728 <__udivmoddi4+0x2a4>
 800067a:	d053      	beq.n	8000724 <__udivmoddi4+0x2a0>
 800067c:	b15d      	cbz	r5, 8000696 <__udivmoddi4+0x212>
 800067e:	ebb3 0208 	subs.w	r2, r3, r8
 8000682:	eb61 010e 	sbc.w	r1, r1, lr
 8000686:	fa01 f707 	lsl.w	r7, r1, r7
 800068a:	fa22 f306 	lsr.w	r3, r2, r6
 800068e:	40f1      	lsrs	r1, r6
 8000690:	431f      	orrs	r7, r3
 8000692:	e9c5 7100 	strd	r7, r1, [r5]
 8000696:	2600      	movs	r6, #0
 8000698:	4631      	mov	r1, r6
 800069a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069e:	f1c2 0320 	rsb	r3, r2, #32
 80006a2:	40d8      	lsrs	r0, r3
 80006a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a8:	fa21 f303 	lsr.w	r3, r1, r3
 80006ac:	4091      	lsls	r1, r2
 80006ae:	4301      	orrs	r1, r0
 80006b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b4:	fa1f fe8c 	uxth.w	lr, ip
 80006b8:	fbb3 f0f7 	udiv	r0, r3, r7
 80006bc:	fb07 3610 	mls	r6, r7, r0, r3
 80006c0:	0c0b      	lsrs	r3, r1, #16
 80006c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006c6:	fb00 f60e 	mul.w	r6, r0, lr
 80006ca:	429e      	cmp	r6, r3
 80006cc:	fa04 f402 	lsl.w	r4, r4, r2
 80006d0:	d908      	bls.n	80006e4 <__udivmoddi4+0x260>
 80006d2:	eb1c 0303 	adds.w	r3, ip, r3
 80006d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80006da:	d22f      	bcs.n	800073c <__udivmoddi4+0x2b8>
 80006dc:	429e      	cmp	r6, r3
 80006de:	d92d      	bls.n	800073c <__udivmoddi4+0x2b8>
 80006e0:	3802      	subs	r0, #2
 80006e2:	4463      	add	r3, ip
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	b289      	uxth	r1, r1
 80006e8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006ec:	fb07 3316 	mls	r3, r7, r6, r3
 80006f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f4:	fb06 f30e 	mul.w	r3, r6, lr
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d908      	bls.n	800070e <__udivmoddi4+0x28a>
 80006fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000700:	f106 38ff 	add.w	r8, r6, #4294967295
 8000704:	d216      	bcs.n	8000734 <__udivmoddi4+0x2b0>
 8000706:	428b      	cmp	r3, r1
 8000708:	d914      	bls.n	8000734 <__udivmoddi4+0x2b0>
 800070a:	3e02      	subs	r6, #2
 800070c:	4461      	add	r1, ip
 800070e:	1ac9      	subs	r1, r1, r3
 8000710:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000714:	e738      	b.n	8000588 <__udivmoddi4+0x104>
 8000716:	462e      	mov	r6, r5
 8000718:	4628      	mov	r0, r5
 800071a:	e705      	b.n	8000528 <__udivmoddi4+0xa4>
 800071c:	4606      	mov	r6, r0
 800071e:	e6e3      	b.n	80004e8 <__udivmoddi4+0x64>
 8000720:	4618      	mov	r0, r3
 8000722:	e6f8      	b.n	8000516 <__udivmoddi4+0x92>
 8000724:	454b      	cmp	r3, r9
 8000726:	d2a9      	bcs.n	800067c <__udivmoddi4+0x1f8>
 8000728:	ebb9 0802 	subs.w	r8, r9, r2
 800072c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000730:	3801      	subs	r0, #1
 8000732:	e7a3      	b.n	800067c <__udivmoddi4+0x1f8>
 8000734:	4646      	mov	r6, r8
 8000736:	e7ea      	b.n	800070e <__udivmoddi4+0x28a>
 8000738:	4620      	mov	r0, r4
 800073a:	e794      	b.n	8000666 <__udivmoddi4+0x1e2>
 800073c:	4640      	mov	r0, r8
 800073e:	e7d1      	b.n	80006e4 <__udivmoddi4+0x260>
 8000740:	46d0      	mov	r8, sl
 8000742:	e77b      	b.n	800063c <__udivmoddi4+0x1b8>
 8000744:	3b02      	subs	r3, #2
 8000746:	4461      	add	r1, ip
 8000748:	e732      	b.n	80005b0 <__udivmoddi4+0x12c>
 800074a:	4630      	mov	r0, r6
 800074c:	e709      	b.n	8000562 <__udivmoddi4+0xde>
 800074e:	4464      	add	r4, ip
 8000750:	3802      	subs	r0, #2
 8000752:	e742      	b.n	80005da <__udivmoddi4+0x156>

08000754 <__aeabi_dmul>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8de 	bleq	8000930 <__aeabi_dmul+0x1dc>
 8000774:	442c      	add	r4, r5
 8000776:	ea81 0603 	eor.w	r6, r1, r3
 800077a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800077e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000782:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000786:	bf18      	it	ne
 8000788:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000794:	d038      	beq.n	8000808 <__aeabi_dmul+0xb4>
 8000796:	fba0 ce02 	umull	ip, lr, r0, r2
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80007a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007aa:	f04f 0600 	mov.w	r6, #0
 80007ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007b2:	f09c 0f00 	teq	ip, #0
 80007b6:	bf18      	it	ne
 80007b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80007bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007c8:	d204      	bcs.n	80007d4 <__aeabi_dmul+0x80>
 80007ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ce:	416d      	adcs	r5, r5
 80007d0:	eb46 0606 	adc.w	r6, r6, r6
 80007d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007ec:	bf88      	it	hi
 80007ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007f2:	d81e      	bhi.n	8000832 <__aeabi_dmul+0xde>
 80007f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007f8:	bf08      	it	eq
 80007fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007fe:	f150 0000 	adcs.w	r0, r0, #0
 8000802:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800080c:	ea46 0101 	orr.w	r1, r6, r1
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800081c:	bfc2      	ittt	gt
 800081e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000826:	bd70      	popgt	{r4, r5, r6, pc}
 8000828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082c:	f04f 0e00 	mov.w	lr, #0
 8000830:	3c01      	subs	r4, #1
 8000832:	f300 80ab 	bgt.w	800098c <__aeabi_dmul+0x238>
 8000836:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800083a:	bfde      	ittt	le
 800083c:	2000      	movle	r0, #0
 800083e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000842:	bd70      	pople	{r4, r5, r6, pc}
 8000844:	f1c4 0400 	rsb	r4, r4, #0
 8000848:	3c20      	subs	r4, #32
 800084a:	da35      	bge.n	80008b8 <__aeabi_dmul+0x164>
 800084c:	340c      	adds	r4, #12
 800084e:	dc1b      	bgt.n	8000888 <__aeabi_dmul+0x134>
 8000850:	f104 0414 	add.w	r4, r4, #20
 8000854:	f1c4 0520 	rsb	r5, r4, #32
 8000858:	fa00 f305 	lsl.w	r3, r0, r5
 800085c:	fa20 f004 	lsr.w	r0, r0, r4
 8000860:	fa01 f205 	lsl.w	r2, r1, r5
 8000864:	ea40 0002 	orr.w	r0, r0, r2
 8000868:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800086c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000874:	fa21 f604 	lsr.w	r6, r1, r4
 8000878:	eb42 0106 	adc.w	r1, r2, r6
 800087c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000880:	bf08      	it	eq
 8000882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f1c4 040c 	rsb	r4, r4, #12
 800088c:	f1c4 0520 	rsb	r5, r4, #32
 8000890:	fa00 f304 	lsl.w	r3, r0, r4
 8000894:	fa20 f005 	lsr.w	r0, r0, r5
 8000898:	fa01 f204 	lsl.w	r2, r1, r4
 800089c:	ea40 0002 	orr.w	r0, r0, r2
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008a8:	f141 0100 	adc.w	r1, r1, #0
 80008ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b0:	bf08      	it	eq
 80008b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f1c4 0520 	rsb	r5, r4, #32
 80008bc:	fa00 f205 	lsl.w	r2, r0, r5
 80008c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80008c4:	fa20 f304 	lsr.w	r3, r0, r4
 80008c8:	fa01 f205 	lsl.w	r2, r1, r5
 80008cc:	ea43 0302 	orr.w	r3, r3, r2
 80008d0:	fa21 f004 	lsr.w	r0, r1, r4
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	fa21 f204 	lsr.w	r2, r1, r4
 80008dc:	ea20 0002 	bic.w	r0, r0, r2
 80008e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008e8:	bf08      	it	eq
 80008ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f094 0f00 	teq	r4, #0
 80008f4:	d10f      	bne.n	8000916 <__aeabi_dmul+0x1c2>
 80008f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008fa:	0040      	lsls	r0, r0, #1
 80008fc:	eb41 0101 	adc.w	r1, r1, r1
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf08      	it	eq
 8000906:	3c01      	subeq	r4, #1
 8000908:	d0f7      	beq.n	80008fa <__aeabi_dmul+0x1a6>
 800090a:	ea41 0106 	orr.w	r1, r1, r6
 800090e:	f095 0f00 	teq	r5, #0
 8000912:	bf18      	it	ne
 8000914:	4770      	bxne	lr
 8000916:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800091a:	0052      	lsls	r2, r2, #1
 800091c:	eb43 0303 	adc.w	r3, r3, r3
 8000920:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000924:	bf08      	it	eq
 8000926:	3d01      	subeq	r5, #1
 8000928:	d0f7      	beq.n	800091a <__aeabi_dmul+0x1c6>
 800092a:	ea43 0306 	orr.w	r3, r3, r6
 800092e:	4770      	bx	lr
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000938:	bf18      	it	ne
 800093a:	ea95 0f0c 	teqne	r5, ip
 800093e:	d00c      	beq.n	800095a <__aeabi_dmul+0x206>
 8000940:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000944:	bf18      	it	ne
 8000946:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094a:	d1d1      	bne.n	80008f0 <__aeabi_dmul+0x19c>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095e:	bf06      	itte	eq
 8000960:	4610      	moveq	r0, r2
 8000962:	4619      	moveq	r1, r3
 8000964:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000968:	d019      	beq.n	800099e <__aeabi_dmul+0x24a>
 800096a:	ea94 0f0c 	teq	r4, ip
 800096e:	d102      	bne.n	8000976 <__aeabi_dmul+0x222>
 8000970:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000974:	d113      	bne.n	800099e <__aeabi_dmul+0x24a>
 8000976:	ea95 0f0c 	teq	r5, ip
 800097a:	d105      	bne.n	8000988 <__aeabi_dmul+0x234>
 800097c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000980:	bf1c      	itt	ne
 8000982:	4610      	movne	r0, r2
 8000984:	4619      	movne	r1, r3
 8000986:	d10a      	bne.n	800099e <__aeabi_dmul+0x24a>
 8000988:	ea81 0103 	eor.w	r1, r1, r3
 800098c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000990:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000994:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80009a6:	bd70      	pop	{r4, r5, r6, pc}

080009a8 <__aeabi_idiv0>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_drsub>:
 80009ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__adddf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_dsub>:
 80009b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080009b8 <__adddf3>:
 80009b8:	b530      	push	{r4, r5, lr}
 80009ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80009be:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80009c2:	ea94 0f05 	teq	r4, r5
 80009c6:	bf08      	it	eq
 80009c8:	ea90 0f02 	teqeq	r0, r2
 80009cc:	bf1f      	itttt	ne
 80009ce:	ea54 0c00 	orrsne.w	ip, r4, r0
 80009d2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80009d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80009da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80009de:	f000 80e2 	beq.w	8000ba6 <__adddf3+0x1ee>
 80009e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80009e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80009ea:	bfb8      	it	lt
 80009ec:	426d      	neglt	r5, r5
 80009ee:	dd0c      	ble.n	8000a0a <__adddf3+0x52>
 80009f0:	442c      	add	r4, r5
 80009f2:	ea80 0202 	eor.w	r2, r0, r2
 80009f6:	ea81 0303 	eor.w	r3, r1, r3
 80009fa:	ea82 0000 	eor.w	r0, r2, r0
 80009fe:	ea83 0101 	eor.w	r1, r3, r1
 8000a02:	ea80 0202 	eor.w	r2, r0, r2
 8000a06:	ea81 0303 	eor.w	r3, r1, r3
 8000a0a:	2d36      	cmp	r5, #54	; 0x36
 8000a0c:	bf88      	it	hi
 8000a0e:	bd30      	pophi	{r4, r5, pc}
 8000a10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000a1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000a20:	d002      	beq.n	8000a28 <__adddf3+0x70>
 8000a22:	4240      	negs	r0, r0
 8000a24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000a2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000a34:	d002      	beq.n	8000a3c <__adddf3+0x84>
 8000a36:	4252      	negs	r2, r2
 8000a38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a3c:	ea94 0f05 	teq	r4, r5
 8000a40:	f000 80a7 	beq.w	8000b92 <__adddf3+0x1da>
 8000a44:	f1a4 0401 	sub.w	r4, r4, #1
 8000a48:	f1d5 0e20 	rsbs	lr, r5, #32
 8000a4c:	db0d      	blt.n	8000a6a <__adddf3+0xb2>
 8000a4e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000a52:	fa22 f205 	lsr.w	r2, r2, r5
 8000a56:	1880      	adds	r0, r0, r2
 8000a58:	f141 0100 	adc.w	r1, r1, #0
 8000a5c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000a60:	1880      	adds	r0, r0, r2
 8000a62:	fa43 f305 	asr.w	r3, r3, r5
 8000a66:	4159      	adcs	r1, r3
 8000a68:	e00e      	b.n	8000a88 <__adddf3+0xd0>
 8000a6a:	f1a5 0520 	sub.w	r5, r5, #32
 8000a6e:	f10e 0e20 	add.w	lr, lr, #32
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000a78:	bf28      	it	cs
 8000a7a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000a7e:	fa43 f305 	asr.w	r3, r3, r5
 8000a82:	18c0      	adds	r0, r0, r3
 8000a84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a8c:	d507      	bpl.n	8000a9e <__adddf3+0xe6>
 8000a8e:	f04f 0e00 	mov.w	lr, #0
 8000a92:	f1dc 0c00 	rsbs	ip, ip, #0
 8000a96:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000a9a:	eb6e 0101 	sbc.w	r1, lr, r1
 8000a9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000aa2:	d31b      	bcc.n	8000adc <__adddf3+0x124>
 8000aa4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000aa8:	d30c      	bcc.n	8000ac4 <__adddf3+0x10c>
 8000aaa:	0849      	lsrs	r1, r1, #1
 8000aac:	ea5f 0030 	movs.w	r0, r0, rrx
 8000ab0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000ab4:	f104 0401 	add.w	r4, r4, #1
 8000ab8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000abc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000ac0:	f080 809a 	bcs.w	8000bf8 <__adddf3+0x240>
 8000ac4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ace:	f150 0000 	adcs.w	r0, r0, #0
 8000ad2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ad6:	ea41 0105 	orr.w	r1, r1, r5
 8000ada:	bd30      	pop	{r4, r5, pc}
 8000adc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000ae0:	4140      	adcs	r0, r0
 8000ae2:	eb41 0101 	adc.w	r1, r1, r1
 8000ae6:	3c01      	subs	r4, #1
 8000ae8:	bf28      	it	cs
 8000aea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000aee:	d2e9      	bcs.n	8000ac4 <__adddf3+0x10c>
 8000af0:	f091 0f00 	teq	r1, #0
 8000af4:	bf04      	itt	eq
 8000af6:	4601      	moveq	r1, r0
 8000af8:	2000      	moveq	r0, #0
 8000afa:	fab1 f381 	clz	r3, r1
 8000afe:	bf08      	it	eq
 8000b00:	3320      	addeq	r3, #32
 8000b02:	f1a3 030b 	sub.w	r3, r3, #11
 8000b06:	f1b3 0220 	subs.w	r2, r3, #32
 8000b0a:	da0c      	bge.n	8000b26 <__adddf3+0x16e>
 8000b0c:	320c      	adds	r2, #12
 8000b0e:	dd08      	ble.n	8000b22 <__adddf3+0x16a>
 8000b10:	f102 0c14 	add.w	ip, r2, #20
 8000b14:	f1c2 020c 	rsb	r2, r2, #12
 8000b18:	fa01 f00c 	lsl.w	r0, r1, ip
 8000b1c:	fa21 f102 	lsr.w	r1, r1, r2
 8000b20:	e00c      	b.n	8000b3c <__adddf3+0x184>
 8000b22:	f102 0214 	add.w	r2, r2, #20
 8000b26:	bfd8      	it	le
 8000b28:	f1c2 0c20 	rsble	ip, r2, #32
 8000b2c:	fa01 f102 	lsl.w	r1, r1, r2
 8000b30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b34:	bfdc      	itt	le
 8000b36:	ea41 010c 	orrle.w	r1, r1, ip
 8000b3a:	4090      	lslle	r0, r2
 8000b3c:	1ae4      	subs	r4, r4, r3
 8000b3e:	bfa2      	ittt	ge
 8000b40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000b44:	4329      	orrge	r1, r5
 8000b46:	bd30      	popge	{r4, r5, pc}
 8000b48:	ea6f 0404 	mvn.w	r4, r4
 8000b4c:	3c1f      	subs	r4, #31
 8000b4e:	da1c      	bge.n	8000b8a <__adddf3+0x1d2>
 8000b50:	340c      	adds	r4, #12
 8000b52:	dc0e      	bgt.n	8000b72 <__adddf3+0x1ba>
 8000b54:	f104 0414 	add.w	r4, r4, #20
 8000b58:	f1c4 0220 	rsb	r2, r4, #32
 8000b5c:	fa20 f004 	lsr.w	r0, r0, r4
 8000b60:	fa01 f302 	lsl.w	r3, r1, r2
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	fa21 f304 	lsr.w	r3, r1, r4
 8000b6c:	ea45 0103 	orr.w	r1, r5, r3
 8000b70:	bd30      	pop	{r4, r5, pc}
 8000b72:	f1c4 040c 	rsb	r4, r4, #12
 8000b76:	f1c4 0220 	rsb	r2, r4, #32
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	fa01 f304 	lsl.w	r3, r1, r4
 8000b82:	ea40 0003 	orr.w	r0, r0, r3
 8000b86:	4629      	mov	r1, r5
 8000b88:	bd30      	pop	{r4, r5, pc}
 8000b8a:	fa21 f004 	lsr.w	r0, r1, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	bd30      	pop	{r4, r5, pc}
 8000b92:	f094 0f00 	teq	r4, #0
 8000b96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000b9a:	bf06      	itte	eq
 8000b9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000ba0:	3401      	addeq	r4, #1
 8000ba2:	3d01      	subne	r5, #1
 8000ba4:	e74e      	b.n	8000a44 <__adddf3+0x8c>
 8000ba6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000baa:	bf18      	it	ne
 8000bac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000bb0:	d029      	beq.n	8000c06 <__adddf3+0x24e>
 8000bb2:	ea94 0f05 	teq	r4, r5
 8000bb6:	bf08      	it	eq
 8000bb8:	ea90 0f02 	teqeq	r0, r2
 8000bbc:	d005      	beq.n	8000bca <__adddf3+0x212>
 8000bbe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000bc2:	bf04      	itt	eq
 8000bc4:	4619      	moveq	r1, r3
 8000bc6:	4610      	moveq	r0, r2
 8000bc8:	bd30      	pop	{r4, r5, pc}
 8000bca:	ea91 0f03 	teq	r1, r3
 8000bce:	bf1e      	ittt	ne
 8000bd0:	2100      	movne	r1, #0
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	bd30      	popne	{r4, r5, pc}
 8000bd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000bda:	d105      	bne.n	8000be8 <__adddf3+0x230>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	4149      	adcs	r1, r1
 8000be0:	bf28      	it	cs
 8000be2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000be6:	bd30      	pop	{r4, r5, pc}
 8000be8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000bec:	bf3c      	itt	cc
 8000bee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000bf2:	bd30      	popcc	{r4, r5, pc}
 8000bf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bf8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000bfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	bd30      	pop	{r4, r5, pc}
 8000c06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000c0a:	bf1a      	itte	ne
 8000c0c:	4619      	movne	r1, r3
 8000c0e:	4610      	movne	r0, r2
 8000c10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000c14:	bf1c      	itt	ne
 8000c16:	460b      	movne	r3, r1
 8000c18:	4602      	movne	r2, r0
 8000c1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c1e:	bf06      	itte	eq
 8000c20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000c24:	ea91 0f03 	teqeq	r1, r3
 8000c28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000c2c:	bd30      	pop	{r4, r5, pc}
 8000c2e:	bf00      	nop

08000c30 <__aeabi_ui2d>:
 8000c30:	f090 0f00 	teq	r0, #0
 8000c34:	bf04      	itt	eq
 8000c36:	2100      	moveq	r1, #0
 8000c38:	4770      	bxeq	lr
 8000c3a:	b530      	push	{r4, r5, lr}
 8000c3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c40:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c44:	f04f 0500 	mov.w	r5, #0
 8000c48:	f04f 0100 	mov.w	r1, #0
 8000c4c:	e750      	b.n	8000af0 <__adddf3+0x138>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2d>:
 8000c50:	f090 0f00 	teq	r0, #0
 8000c54:	bf04      	itt	eq
 8000c56:	2100      	moveq	r1, #0
 8000c58:	4770      	bxeq	lr
 8000c5a:	b530      	push	{r4, r5, lr}
 8000c5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000c68:	bf48      	it	mi
 8000c6a:	4240      	negmi	r0, r0
 8000c6c:	f04f 0100 	mov.w	r1, #0
 8000c70:	e73e      	b.n	8000af0 <__adddf3+0x138>
 8000c72:	bf00      	nop

08000c74 <__aeabi_f2d>:
 8000c74:	0042      	lsls	r2, r0, #1
 8000c76:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000c82:	bf1f      	itttt	ne
 8000c84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000c88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000c8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000c90:	4770      	bxne	lr
 8000c92:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000c96:	bf08      	it	eq
 8000c98:	4770      	bxeq	lr
 8000c9a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000c9e:	bf04      	itt	eq
 8000ca0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000ca4:	4770      	bxeq	lr
 8000ca6:	b530      	push	{r4, r5, lr}
 8000ca8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000cb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000cb4:	e71c      	b.n	8000af0 <__adddf3+0x138>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ul2d>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	b530      	push	{r4, r5, lr}
 8000cc2:	f04f 0500 	mov.w	r5, #0
 8000cc6:	e00a      	b.n	8000cde <__aeabi_l2d+0x16>

08000cc8 <__aeabi_l2d>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	b530      	push	{r4, r5, lr}
 8000cd2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000cd6:	d502      	bpl.n	8000cde <__aeabi_l2d+0x16>
 8000cd8:	4240      	negs	r0, r0
 8000cda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cde:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ce2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ce6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000cea:	f43f aed8 	beq.w	8000a9e <__adddf3+0xe6>
 8000cee:	f04f 0203 	mov.w	r2, #3
 8000cf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000cf6:	bf18      	it	ne
 8000cf8:	3203      	addne	r2, #3
 8000cfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000cfe:	bf18      	it	ne
 8000d00:	3203      	addne	r2, #3
 8000d02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d12:	fa01 fe03 	lsl.w	lr, r1, r3
 8000d16:	ea40 000e 	orr.w	r0, r0, lr
 8000d1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d1e:	4414      	add	r4, r2
 8000d20:	e6bd      	b.n	8000a9e <__adddf3+0xe6>
 8000d22:	bf00      	nop

08000d24 <__aeabi_d2uiz>:
 8000d24:	004a      	lsls	r2, r1, #1
 8000d26:	d211      	bcs.n	8000d4c <__aeabi_d2uiz+0x28>
 8000d28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d2c:	d211      	bcs.n	8000d52 <__aeabi_d2uiz+0x2e>
 8000d2e:	d50d      	bpl.n	8000d4c <__aeabi_d2uiz+0x28>
 8000d30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d38:	d40e      	bmi.n	8000d58 <__aeabi_d2uiz+0x34>
 8000d3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d46:	fa23 f002 	lsr.w	r0, r3, r2
 8000d4a:	4770      	bx	lr
 8000d4c:	f04f 0000 	mov.w	r0, #0
 8000d50:	4770      	bx	lr
 8000d52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d56:	d102      	bne.n	8000d5e <__aeabi_d2uiz+0x3a>
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr

08000d64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d7c:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <MX_ADC1_Init+0xc0>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dde:	f001 fe39 	bl	8002a54 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000de8:	f000 fbca 	bl	8001580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_ADC1_Init+0xc4>)
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2306      	movs	r3, #6
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000df4:	2304      	movs	r3, #4
 8000df6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df8:	237f      	movs	r3, #127	; 0x7f
 8000dfa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000e0a:	f002 f96d 	bl	80030e8 <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e14:	f000 fbb4 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000094 	.word	0x20000094
 8000e24:	50040000 	.word	0x50040000
 8000e28:	32601000 	.word	0x32601000

08000e2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0a0      	sub	sp, #128	; 0x80
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	225c      	movs	r2, #92	; 0x5c
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f00c f99f 	bl	800d190 <memset>
  if(adcHandle->Instance==ADC1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <HAL_ADC_MspInit+0xf8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d15f      	bne.n	8000f1c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000e66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fabd 	bl	80063ec <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e78:	f000 fb82 	bl	8001580 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_ADC_MspInit+0xfc>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <HAL_ADC_MspInit+0xfc>)
 8000e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_ADC_MspInit+0xfc>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_ADC_MspInit+0xfc>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_ADC_MspInit+0xfc>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_ADC_MspInit+0xfc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f003 ff9f 	bl	8004e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_ADC_MspInit+0x104>)
 8000eca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000f02:	f003 fd17 	bl	8004934 <HAL_DMA_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000f0c:	f000 fb38 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000f14:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <HAL_ADC_MspInit+0x100>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3780      	adds	r7, #128	; 0x80
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	50040000 	.word	0x50040000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	200000f8 	.word	0x200000f8
 8000f30:	40020008 	.word	0x40020008

08000f34 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f3a:	4a31      	ldr	r2, [pc, #196]	; (8001000 <MX_CAN1_Init+0xcc>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f40:	2203      	movs	r2, #3
 8000f42:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f52:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f56:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f5e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f84:	481d      	ldr	r0, [pc, #116]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000f86:	f002 fe69 	bl	8003c5c <HAL_CAN_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f90:	f000 faf6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  can1Filter0.FilterMaskIdHigh = RFBCAN_FILTER0_MaskIdHigh;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000f96:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000f9a:	609a      	str	r2, [r3, #8]
  can1Filter0.FilterIdHigh = RFBCAN_FILTER0_IdHigh;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000f9e:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 8000fa2:	601a      	str	r2, [r3, #0]
  can1Filter0.FilterMaskIdLow = RFBCAN_FILTER0_MaskIdLow;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fa6:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000faa:	60da      	str	r2, [r3, #12]
  can1Filter0.FilterIdLow = RFBCAN_FILTER0_IdLow;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fae:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 8000fb2:	605a      	str	r2, [r3, #4]
  can1Filter0.FilterMode = RFBCAN_FILTER0_FilterMode;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  can1Filter0.FilterScale = RFBCAN_FILTER0_FilterScale;
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  can1Filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  can1Filter0.FilterBank = 0;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  can1Filter0.FilterActivation = ENABLE;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	621a      	str	r2, [r3, #32]

  if (HAL_CAN_ConfigFilter(&hcan1, &can1Filter0) != HAL_OK) { Error_Handler(); }
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <MX_CAN1_Init+0xd0>)
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000fd6:	f003 f8a3 	bl	8004120 <HAL_CAN_ConfigFilter>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_CAN1_Init+0xb0>
 8000fe0:	f000 face 	bl	8001580 <Error_Handler>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) { Error_Handler(); }
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_CAN1_Init+0xc8>)
 8000fe8:	f003 fae8 	bl	80045bc <HAL_CAN_ActivateNotification>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_CAN1_Init+0xc2>
 8000ff2:	f000 fac5 	bl	8001580 <Error_Handler>

  /* USER CODE END CAN1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001c4 	.word	0x200001c4
 8001000:	40006400 	.word	0x40006400
 8001004:	20000140 	.word	0x20000140

08001008 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_CAN_MspInit+0x80>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d129      	bne.n	800107e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_CAN_MspInit+0x84>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_CAN_MspInit+0x84>)
 8001030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_CAN_MspInit+0x84>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_CAN_MspInit+0x84>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_CAN_MspInit+0x84>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_CAN_MspInit+0x84>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800105a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800106c:	2309      	movs	r3, #9
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f003 fec3 	bl	8004e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40006400 	.word	0x40006400
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    if(hcan->Instance == CAN1) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d111      	bne.n	80010c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData) != HAL_OK) { Error_Handler(); }
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f003 f969 	bl	8004380 <HAL_CAN_GetRxMessage>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80010b4:	f000 fa64 	bl	8001580 <Error_Handler>

        xQueueSendFromISR(CANRxQueueHandle, (RFBCANMessage*)canRxData, NULL);
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	4904      	ldr	r1, [pc, #16]	; (80010d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80010c2:	f00a f98d 	bl	800b3e0 <xQueueGenericSendFromISR>
    }
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40006400 	.word	0x40006400
 80010d4:	20000184 	.word	0x20000184
 80010d8:	20000168 	.word	0x20000168
 80010dc:	20000234 	.word	0x20000234

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x38>)
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x38>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6493      	str	r3, [r2, #72]	; 0x48
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x38>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	200b      	movs	r0, #11
 8001104:	f003 fbd2 	bl	80048ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001108:	200b      	movs	r0, #11
 800110a:	f003 fbfb 	bl	8004904 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	619a      	str	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CANRxQueue */
  CANRxQueueHandle = osMessageQueueNew (6, 8, &CANRxQueue_attributes);
 8001170:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_FREERTOS_Init+0x48>)
 8001172:	2108      	movs	r1, #8
 8001174:	2006      	movs	r0, #6
 8001176:	f009 f966 	bl	800a446 <osMessageQueueNew>
 800117a:	4603      	mov	r3, r0
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <MX_FREERTOS_Init+0x4c>)
 800117e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <MX_FREERTOS_Init+0x50>)
 8001182:	2100      	movs	r1, #0
 8001184:	480e      	ldr	r0, [pc, #56]	; (80011c0 <MX_FREERTOS_Init+0x54>)
 8001186:	f009 f8b1 	bl	800a2ec <osThreadNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <MX_FREERTOS_Init+0x58>)
 800118e:	6013      	str	r3, [r2, #0]

  /* creation of TxMgr */
  TxMgrHandle = osThreadNew(StartTxMgr, NULL, &TxMgr_attributes);
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <MX_FREERTOS_Init+0x5c>)
 8001192:	2100      	movs	r1, #0
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_FREERTOS_Init+0x60>)
 8001196:	f009 f8a9 	bl	800a2ec <osThreadNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <MX_FREERTOS_Init+0x64>)
 800119e:	6013      	str	r3, [r2, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(StartBlink, NULL, &Blink_attributes);
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <MX_FREERTOS_Init+0x68>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_FREERTOS_Init+0x6c>)
 80011a6:	f009 f8a1 	bl	800a2ec <osThreadNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <MX_FREERTOS_Init+0x70>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800db50 	.word	0x0800db50
 80011b8:	20000234 	.word	0x20000234
 80011bc:	0800dae4 	.word	0x0800dae4
 80011c0:	080011e1 	.word	0x080011e1
 80011c4:	20000228 	.word	0x20000228
 80011c8:	0800db08 	.word	0x0800db08
 80011cc:	08001285 	.word	0x08001285
 80011d0:	2000022c 	.word	0x2000022c
 80011d4:	0800db2c 	.word	0x0800db2c
 80011d8:	080012b5 	.word	0x080012b5
 80011dc:	20000230 	.word	0x20000230

080011e0 <StartCanTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCanTask */
void StartCanTask(void *argument)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	RFBCANMessage qm;

  /* Infinite loop */
  for(;;) {
	if(xQueueReceive(CANRxQueueHandle, &qm, 0)) {
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <StartCanTask+0x98>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f107 0108 	add.w	r1, r7, #8
 80011f0:	2200      	movs	r2, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00a f990 	bl	800b518 <xQueueReceive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d036      	beq.n	800126c <StartCanTask+0x8c>
		switch(qm.h) {
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	2b04      	cmp	r3, #4
 8001204:	d833      	bhi.n	800126e <StartCanTask+0x8e>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <StartCanTask+0x2c>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	08001221 	.word	0x08001221
 8001210:	08001235 	.word	0x08001235
 8001214:	08001249 	.word	0x08001249
 8001218:	08001259 	.word	0x08001259
 800121c:	08001267 	.word	0x08001267
		case RFBCANMessage_SetPllPwr: {
			SPISetTiPllOutAPwr((uint8_t)(qm.u4), (uint8_t)(qm.u4 >> 31));
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	0fdb      	lsrs	r3, r3, #31
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	4610      	mov	r0, r2
 800122e:	f000 faf7 	bl	8001820 <SPISetTiPllOutAPwr>
		}; break;
 8001232:	e01c      	b.n	800126e <StartCanTask+0x8e>
		case RFBCANMessage_SetPllContFreq: {
			SPISetTiPllFreq((float)qm.u4);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f000 fb25 	bl	8001890 <SPISetTiPllFreq>
		}; break;
 8001246:	e012      	b.n	800126e <StartCanTask+0x8e>
		case RFBCANMessage_StartPllSweep: {
            xTaskNotify(TxMgrHandle, 1u << TXMGR_NOTIFICATION_BIT_STARTSWEEP, eSetBits);
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <StartCanTask+0x9c>)
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	2201      	movs	r2, #1
 8001250:	2102      	movs	r1, #2
 8001252:	f00b fb09 	bl	800c868 <xTaskGenericNotify>
		}; break;
 8001256:	e00a      	b.n	800126e <StartCanTask+0x8e>
		case RFBCANMessage_PushPllData: {
			RFBPllData[qm.a] = qm.u4;
 8001258:	7a7b      	ldrb	r3, [r7, #9]
 800125a:	4619      	mov	r1, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <StartCanTask+0xa0>)
 8001260:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}; break;
 8001264:	e003      	b.n	800126e <StartCanTask+0x8e>
		case RFBCANMessage_SetPllSweepData: {
			SPISetTiPllRampFreqFromBuf();
 8001266:	f000 fbd7 	bl	8001a18 <SPISetTiPllRampFreqFromBuf>
		}; break;
 800126a:	e000      	b.n	800126e <StartCanTask+0x8e>
		}
	}
 800126c:	bf00      	nop

    osDelay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f009 f8ce 	bl	800a410 <osDelay>
	if(xQueueReceive(CANRxQueueHandle, &qm, 0)) {
 8001274:	e7b8      	b.n	80011e8 <StartCanTask+0x8>
 8001276:	bf00      	nop
 8001278:	20000234 	.word	0x20000234
 800127c:	2000022c 	.word	0x2000022c
 8001280:	200002ac 	.word	0x200002ac

08001284 <StartTxMgr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTxMgr */
void StartTxMgr(void *argument)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTxMgr */

    LL_GPIO_ResetOutputPin(ADC_RESET_GPIO_Port, ADC_RESET_Pin);
 800128c:	2104      	movs	r1, #4
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <StartTxMgr+0x2c>)
 8001290:	f7ff ff52 	bl	8001138 <LL_GPIO_ResetOutputPin>
    SPIInitTiAdc();
 8001294:	f000 fec6 	bl	8002024 <SPIInitTiAdc>

    SPIInitTiPll();
 8001298:	f000 fa64 	bl	8001764 <SPIInitTiPll>


    /* Infinite loop */
  for(;;) {
      xTaskNotifyWait(0, 1u << TXMGR_NOTIFICATION_BIT_STARTSWEEP, NULL, 0);
 800129c:	2300      	movs	r3, #0
 800129e:	2200      	movs	r2, #0
 80012a0:	2102      	movs	r1, #2
 80012a2:	2000      	movs	r0, #0
 80012a4:	f00b fa80 	bl	800c7a8 <xTaskNotifyWait>

      TIM15TiPllRampStart();
 80012a8:	f001 f8fc 	bl	80024a4 <TIM15TiPllRampStart>
      xTaskNotifyWait(0, 1u << TXMGR_NOTIFICATION_BIT_STARTSWEEP, NULL, 0);
 80012ac:	e7f6      	b.n	800129c <StartTxMgr+0x18>
 80012ae:	bf00      	nop
 80012b0:	48000400 	.word	0x48000400

080012b4 <StartBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink */
  /* Infinite loop */
  for(;;)
  {
      LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80012bc:	2102      	movs	r1, #2
 80012be:	4808      	ldr	r0, [pc, #32]	; (80012e0 <StartBlink+0x2c>)
 80012c0:	f7ff ff3a 	bl	8001138 <LL_GPIO_ResetOutputPin>
      osDelay(500);
 80012c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c8:	f009 f8a2 	bl	800a410 <osDelay>
      LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80012cc:	2102      	movs	r1, #2
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <StartBlink+0x2c>)
 80012d0:	f7ff ff24 	bl	800111c <LL_GPIO_SetOutputPin>
      osDelay(500);
 80012d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d8:	f009 f89a 	bl	800a410 <osDelay>
      LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80012dc:	e7ee      	b.n	80012bc <StartBlink+0x8>
 80012de:	bf00      	nop
 80012e0:	48001c00 	.word	0x48001c00

080012e4 <LL_GPIO_SetOutputPin>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	619a      	str	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_GPIO_ResetOutputPin>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4313      	orrs	r3, r2
 800132e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4013      	ands	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000

0800134c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001362:	2004      	movs	r0, #4
 8001364:	f7ff ffda 	bl	800131c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001368:	2080      	movs	r0, #128	; 0x80
 800136a:	f7ff ffd7 	bl	800131c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff ffd4 	bl	800131c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff ffd1 	bl	800131c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, GPA3_Pin|PLL_RAMPDIR_Pin);
 800137a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800137e:	4837      	ldr	r0, [pc, #220]	; (800145c <MX_GPIO_Init+0x110>)
 8001380:	f7ff ffbe 	bl	8001300 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GPA0_Pin|GPA1_Pin|GPA2_Pin|GPA4_Pin
 8001384:	f240 1137 	movw	r1, #311	; 0x137
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f7ff ffb8 	bl	8001300 <LL_GPIO_ResetOutputPin>
                          |GPA5_Pin|GPA8_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, GPB12_Pin|GPB4_Pin|GPB5_Pin|GPB8_Pin
 8001390:	f241 3130 	movw	r1, #4912	; 0x1330
 8001394:	4832      	ldr	r0, [pc, #200]	; (8001460 <MX_GPIO_Init+0x114>)
 8001396:	f7ff ffb3 	bl	8001300 <LL_GPIO_ResetOutputPin>
                          |PLL_CE_Pin);

  /**/
  LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 800139a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800139e:	482f      	ldr	r0, [pc, #188]	; (800145c <MX_GPIO_Init+0x110>)
 80013a0:	f7ff ffa0 	bl	80012e4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80013a4:	2102      	movs	r1, #2
 80013a6:	482f      	ldr	r0, [pc, #188]	; (8001464 <MX_GPIO_Init+0x118>)
 80013a8:	f7ff ff9c 	bl	80012e4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(PA_EN_GPIO_Port, PA_EN_Pin);
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f7ff ff97 	bl	80012e4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, SPI_CS_ADC_Pin|ADC_RESET_Pin);
 80013b6:	2105      	movs	r1, #5
 80013b8:	4829      	ldr	r0, [pc, #164]	; (8001460 <MX_GPIO_Init+0x114>)
 80013ba:	f7ff ff93 	bl	80012e4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = GPA3_Pin|SPI_CS_PLL_Pin|PLL_RAMPDIR_Pin;
 80013be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013c4:	2301      	movs	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4820      	ldr	r0, [pc, #128]	; (800145c <MX_GPIO_Init+0x110>)
 80013da:	f008 f935 	bl	8009648 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 80013de:	2302      	movs	r3, #2
 80013e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013e2:	2301      	movs	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	481b      	ldr	r0, [pc, #108]	; (8001464 <MX_GPIO_Init+0x118>)
 80013f8:	f008 f926 	bl	8009648 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPA0_Pin|GPA1_Pin|GPA2_Pin|GPA4_Pin
 80013fc:	f240 1377 	movw	r3, #375	; 0x177
 8001400:	603b      	str	r3, [r7, #0]
                          |GPA5_Pin|PA_EN_Pin|GPA8_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001402:	2301      	movs	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f008 f915 	bl	8009648 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_ADC_Pin|ADC_RESET_Pin|GPB12_Pin|GPB4_Pin
 800141e:	f241 3335 	movw	r3, #4917	; 0x1335
 8001422:	603b      	str	r3, [r7, #0]
                          |GPB5_Pin|GPB8_Pin|PLL_CE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001424:	2301      	movs	r3, #1
 8001426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <MX_GPIO_Init+0x114>)
 800143a:	f008 f905 	bl	8009648 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SWPH3_Pin;
 800143e:	2308      	movs	r3, #8
 8001440:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SWPH3_GPIO_Port, &GPIO_InitStruct);
 800144a:	463b      	mov	r3, r7
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_GPIO_Init+0x118>)
 8001450:	f008 f8fa 	bl	8009648 <LL_GPIO_Init>

}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	48000800 	.word	0x48000800
 8001460:	48000400 	.word	0x48000400
 8001464:	48001c00 	.word	0x48001c00

08001468 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	b29a      	uxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148c:	f001 f90f 	bl	80026ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001490:	f000 f81e 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001494:	f7ff ff5a 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 8001498:	f7ff fe22 	bl	80010e0 <MX_DMA_Init>
  MX_CAN1_Init();
 800149c:	f7ff fd4a 	bl	8000f34 <MX_CAN1_Init>
  MX_SPI2_Init();
 80014a0:	f000 f8de 	bl	8001660 <MX_SPI2_Init>
  MX_TIM15_Init();
 80014a4:	f000 fed8 	bl	8002258 <MX_TIM15_Init>
  MX_ADC1_Init();
 80014a8:	f7ff fc5c 	bl	8000d64 <MX_ADC1_Init>
  MX_RNG_Init();
 80014ac:	f000 f874 	bl	8001598 <MX_RNG_Init>
  MX_USART1_UART_Init();
 80014b0:	f001 f856 	bl	8002560 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_TransmitData8(USART1, '\n');
 80014b4:	210a      	movs	r1, #10
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <main+0x44>)
 80014b8:	f7ff ffd6 	bl	8001468 <LL_USART_TransmitData8>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014bc:	f008 fecc 	bl	800a258 <osKernelInitialize>
  MX_FREERTOS_Init();
 80014c0:	f7ff fe54 	bl	800116c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014c4:	f008 feec 	bl	800a2a0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <main+0x40>
 80014ca:	bf00      	nop
 80014cc:	40013800 	.word	0x40013800

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b096      	sub	sp, #88	; 0x58
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2244      	movs	r2, #68	; 0x44
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00b fe56 	bl	800d190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	463b      	mov	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014f6:	f003 fedb 	bl	80052b0 <HAL_PWREx_ControlVoltageScaling>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001500:	f000 f83e 	bl	8001580 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001504:	2321      	movs	r3, #33	; 0x21
 8001506:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001508:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001512:	2300      	movs	r3, #0
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4618      	mov	r0, r3
 800151c:	f003 ff2a 	bl	8005374 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001526:	f000 f82b 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	230f      	movs	r3, #15
 800152c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800152e:	2302      	movs	r3, #2
 8001530:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fc62 	bl	8005e0c <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800154e:	f000 f817 	bl	8001580 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3758      	adds	r7, #88	; 0x58
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156e:	f001 f8b7 	bl	80026e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40001000 	.word	0x40001000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>

0800158a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	for(;;) {}
 8001594:	e7fe      	b.n	8001594 <assert_failed+0xa>
	...

08001598 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_RNG_Init+0x20>)
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <MX_RNG_Init+0x24>)
 80015a0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_RNG_Init+0x20>)
 80015a4:	f005 fc12 	bl	8006dcc <HAL_RNG_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015ae:	f7ff ffe7 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000238 	.word	0x20000238
 80015bc:	50060800 	.word	0x50060800

080015c0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09a      	sub	sp, #104	; 0x68
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	225c      	movs	r2, #92	; 0x5c
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00b fddd 	bl	800d190 <memset>
  if(rngHandle->Instance==RNG)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_RNG_MspInit+0x60>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d11a      	bne.n	8001616 <HAL_RNG_MspInit+0x56>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80015e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80015e6:	2300      	movs	r3, #0
 80015e8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fefc 	bl	80063ec <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 80015fa:	f7ff ffc1 	bl	8001580 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RNG_MspInit+0x64>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_RNG_MspInit+0x64>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RNG_MspInit+0x64>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001616:	bf00      	nop
 8001618:	3768      	adds	r7, #104	; 0x68
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	50060800 	.word	0x50060800
 8001624:	40021000 	.word	0x40021000

08001628 <LL_GPIO_SetOutputPin>:
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	619a      	str	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_GPIO_ResetOutputPin>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_SPI2_Init+0x74>)
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <MX_SPI2_Init+0x78>)
 8001668:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_SPI2_Init+0x74>)
 800166c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001670:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_SPI2_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_SPI2_Init+0x74>)
 800167a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800167e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_SPI2_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_SPI2_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_SPI2_Init+0x74>)
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_SPI2_Init+0x74>)
 8001696:	2208      	movs	r2, #8
 8001698:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_SPI2_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_SPI2_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_SPI2_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_SPI2_Init+0x74>)
 80016ae:	2207      	movs	r2, #7
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_SPI2_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_SPI2_Init+0x74>)
 80016ba:	2208      	movs	r2, #8
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_SPI2_Init+0x74>)
 80016c0:	f005 fbe8 	bl	8006e94 <HAL_SPI_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80016ca:	f7ff ff59 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000248 	.word	0x20000248
 80016d8:	40003800 	.word	0x40003800

080016dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_SPI_MspInit+0x7c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d128      	bne.n	8001750 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_SPI_MspInit+0x80>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_SPI_MspInit+0x80>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_SPI_MspInit+0x80>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_SPI_MspInit+0x80>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_SPI_MspInit+0x80>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_SPI_MspInit+0x80>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800172e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001740:	2305      	movs	r3, #5
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_SPI_MspInit+0x84>)
 800174c:	f003 fb5a 	bl	8004e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40003800 	.word	0x40003800
 800175c:	40021000 	.word	0x40021000
 8001760:	48000400 	.word	0x48000400

08001764 <SPIInitTiPll>:

/* USER CODE BEGIN 1 */

uint32_t RFBPllData[RFBPllDataLen];

void SPIInitTiPll(void) {
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 800176a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176e:	4828      	ldr	r0, [pc, #160]	; (8001810 <SPIInitTiPll+0xac>)
 8001770:	f7ff ff68 	bl	8001644 <LL_GPIO_ResetOutputPin>
	__NOP();
 8001774:	bf00      	nop

	const uint8_t aTxBufferResetSeq[] = SPIInitTiPllW_GenArray(0, 0b0000000000000010);
 8001776:	4a27      	ldr	r2, [pc, #156]	; (8001814 <SPIInitTiPll+0xb0>)
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4611      	mov	r1, r2
 8001780:	8019      	strh	r1, [r3, #0]
 8001782:	3302      	adds	r3, #2
 8001784:	0c12      	lsrs	r2, r2, #16
 8001786:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBufferResetSeq, 3, 10) != HAL_OK) {
 8001788:	f107 0114 	add.w	r1, r7, #20
 800178c:	230a      	movs	r3, #10
 800178e:	2203      	movs	r2, #3
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <SPIInitTiPll+0xb4>)
 8001792:	f005 fd6d 	bl	8007270 <HAL_SPI_Transmit>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SPIInitTiPll+0x3c>
	    Error_Handler();
 800179c:	f7ff fef0 	bl	8001580 <Error_Handler>
	}
	LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80017a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a4:	481a      	ldr	r0, [pc, #104]	; (8001810 <SPIInitTiPll+0xac>)
 80017a6:	f7ff ff3f 	bl	8001628 <LL_GPIO_SetOutputPin>
	__NOP();
 80017aa:	bf00      	nop

	const uint8_t aTxBuffers[][3] = {
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <SPIInitTiPll+0xb8>)
 80017ae:	463c      	mov	r4, r7
 80017b0:	461d      	mov	r5, r3
 80017b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	8023      	strh	r3, [r4, #0]
			SPIInitTiPllW_GenArray( 46, 0b0000011111110001), // OutB:VCO
			SPIInitTiPllW_GenArray( 45, 0b1100111000000000 | 12u), // OutA:VCO, OutBPWR: 12
			SPIInitTiPllW_GenArray( 44, 0b0000000100100010), // OutAPWR: 0, OutAEn: Off
	};

	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]
 80017be:	e01f      	b.n	8001800 <SPIInitTiPll+0x9c>
		__NOP();
 80017c0:	bf00      	nop
		LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80017c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c6:	4812      	ldr	r0, [pc, #72]	; (8001810 <SPIInitTiPll+0xac>)
 80017c8:	f7ff ff3c 	bl	8001644 <LL_GPIO_ResetOutputPin>
		__NOP();
 80017cc:	bf00      	nop

		if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 80017ce:	7dfa      	ldrb	r2, [r7, #23]
 80017d0:	4639      	mov	r1, r7
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	4419      	add	r1, r3
 80017da:	230a      	movs	r3, #10
 80017dc:	2203      	movs	r2, #3
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <SPIInitTiPll+0xb4>)
 80017e0:	f005 fd46 	bl	8007270 <HAL_SPI_Transmit>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SPIInitTiPll+0x8a>
		    Error_Handler();
 80017ea:	f7ff fec9 	bl	8001580 <Error_Handler>
		}

		__NOP();
 80017ee:	bf00      	nop
		LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80017f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f4:	4806      	ldr	r0, [pc, #24]	; (8001810 <SPIInitTiPll+0xac>)
 80017f6:	f7ff ff17 	bl	8001628 <LL_GPIO_SetOutputPin>
	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	3301      	adds	r3, #1
 80017fe:	75fb      	strb	r3, [r7, #23]
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d9dc      	bls.n	80017c0 <SPIInitTiPll+0x5c>
	}
}
 8001806:	bf00      	nop
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bdb0      	pop	{r4, r5, r7, pc}
 8001810:	48000800 	.word	0x48000800
 8001814:	0800d3d8 	.word	0x0800d3d8
 8001818:	20000248 	.word	0x20000248
 800181c:	0800d3dc 	.word	0x0800d3dc

08001820 <SPISetTiPllOutAPwr>:

/**
  * @param  power: 0 .. 63 (highest)
  * @param  powerdown: 0 .. 1 (off)
  */
void SPISetTiPllOutAPwr(uint8_t power, uint8_t powerdown) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	460a      	mov	r2, r1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	4613      	mov	r3, r2
 800182e:	71bb      	strb	r3, [r7, #6]
	const uint8_t aTxBuffer[] = SPIInitTiPllW_GenArray( 44, 0b0000000000100010 | ((power & 0x3F) << 8) | ((powerdown & 0x01) << 6)); // OutAPWR: 63
 8001830:	232c      	movs	r3, #44	; 0x2c
 8001832:	733b      	strb	r3, [r7, #12]
 8001834:	2322      	movs	r3, #34	; 0x22
 8001836:	737b      	strb	r3, [r7, #13]
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	019b      	lsls	r3, r3, #6
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	b25b      	sxtb	r3, r3
 8001844:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 800184e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <SPISetTiPllOutAPwr+0x68>)
 8001854:	f7ff fef6 	bl	8001644 <LL_GPIO_ResetOutputPin>
	__NOP();
 8001858:	bf00      	nop

	if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffer, 3, 10) != HAL_OK) {
 800185a:	f107 010c 	add.w	r1, r7, #12
 800185e:	230a      	movs	r3, #10
 8001860:	2203      	movs	r2, #3
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <SPISetTiPllOutAPwr+0x6c>)
 8001864:	f005 fd04 	bl	8007270 <HAL_SPI_Transmit>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SPISetTiPllOutAPwr+0x52>
		Error_Handler();
 800186e:	f7ff fe87 	bl	8001580 <Error_Handler>
	}

	__NOP();
 8001872:	bf00      	nop
	LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <SPISetTiPllOutAPwr+0x68>)
 800187a:	f7ff fed5 	bl	8001628 <LL_GPIO_SetOutputPin>
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	48000800 	.word	0x48000800
 800188c:	20000248 	.word	0x20000248

08001890 <SPISetTiPllFreq>:

void SPISetTiPllFreq(float f) {
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b08e      	sub	sp, #56	; 0x38
 8001896:	af00      	add	r7, sp, #0
 8001898:	ed87 0a03 	vstr	s0, [r7, #12]
	uint8_t denq = TIPLL_DENQ;
 800189c:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <SPISetTiPllFreq+0x178>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint32_t den = (1u << denq) - 1;
 80018a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018a8:	2201      	movs	r2, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t ns = f * den / TIPLL_FPD;
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001a0c <SPISetTiPllFreq+0x17c>
 80018c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018cc:	ee16 0a90 	vmov	r0, s13
 80018d0:	f7fe fdb8 	bl	8000444 <__aeabi_f2ulz>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	uint32_t sq = ns % den;
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	2200      	movs	r2, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ec:	f7fe fd7e 	bl	80003ec <__aeabi_uldivmod>
 80018f0:	4613      	mov	r3, r2
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t sp = (ns - sq) / den;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	2200      	movs	r2, #0
 80018f8:	461c      	mov	r4, r3
 80018fa:	4615      	mov	r5, r2
 80018fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001900:	ebb2 0804 	subs.w	r8, r2, r4
 8001904:	eb63 0905 	sbc.w	r9, r3, r5
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	2200      	movs	r2, #0
 800190c:	469a      	mov	sl, r3
 800190e:	4693      	mov	fp, r2
 8001910:	4652      	mov	r2, sl
 8001912:	465b      	mov	r3, fp
 8001914:	4640      	mov	r0, r8
 8001916:	4649      	mov	r1, r9
 8001918:	f7fe fd68 	bl	80003ec <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	623b      	str	r3, [r7, #32]
	if(sp & 0xFFFF0000) return; // OVF.
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	0c1b      	lsrs	r3, r3, #16
 8001928:	041b      	lsls	r3, r3, #16
 800192a:	2b00      	cmp	r3, #0
 800192c:	d167      	bne.n	80019fe <SPISetTiPllFreq+0x16e>


	const uint8_t aTxBuffers[][3] = {
 800192e:	232b      	movs	r3, #43	; 0x2b
 8001930:	743b      	strb	r3, [r7, #16]
			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	b29b      	uxth	r3, r3
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	b29b      	uxth	r3, r3
 800193a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800193c:	747b      	strb	r3, [r7, #17]
			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001942:	74bb      	strb	r3, [r7, #18]
 8001944:	232a      	movs	r3, #42	; 0x2a
 8001946:	74fb      	strb	r3, [r7, #19]
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	b29b      	uxth	r3, r3
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001954:	753b      	strb	r3, [r7, #20]
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800195c:	757b      	strb	r3, [r7, #21]
 800195e:	2327      	movs	r3, #39	; 0x27
 8001960:	75bb      	strb	r3, [r7, #22]

			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	b29b      	uxth	r3, r3
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	b29b      	uxth	r3, r3
 800196a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800196c:	75fb      	strb	r3, [r7, #23]
			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001972:	763b      	strb	r3, [r7, #24]
 8001974:	2326      	movs	r3, #38	; 0x26
 8001976:	767b      	strb	r3, [r7, #25]
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	b29b      	uxth	r3, r3
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001984:	76bb      	strb	r3, [r7, #26]
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800198c:	76fb      	strb	r3, [r7, #27]
 800198e:	2324      	movs	r3, #36	; 0x24
 8001990:	773b      	strb	r3, [r7, #28]

			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	b29b      	uxth	r3, r3
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800199c:	777b      	strb	r3, [r7, #29]
			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 80019a2:	77bb      	strb	r3, [r7, #30]
	};

	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019aa:	e023      	b.n	80019f4 <SPISetTiPllFreq+0x164>
		__NOP();
 80019ac:	bf00      	nop
		LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80019ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b2:	4817      	ldr	r0, [pc, #92]	; (8001a10 <SPISetTiPllFreq+0x180>)
 80019b4:	f7ff fe46 	bl	8001644 <LL_GPIO_ResetOutputPin>
		__NOP();
 80019b8:	bf00      	nop

		if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 80019ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80019be:	f107 0110 	add.w	r1, r7, #16
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	4419      	add	r1, r3
 80019ca:	230a      	movs	r3, #10
 80019cc:	2203      	movs	r2, #3
 80019ce:	4811      	ldr	r0, [pc, #68]	; (8001a14 <SPISetTiPllFreq+0x184>)
 80019d0:	f005 fc4e 	bl	8007270 <HAL_SPI_Transmit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SPISetTiPllFreq+0x14e>
		    Error_Handler();
 80019da:	f7ff fdd1 	bl	8001580 <Error_Handler>
		}

		__NOP();
 80019de:	bf00      	nop
		LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80019e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <SPISetTiPllFreq+0x180>)
 80019e6:	f7ff fe1f 	bl	8001628 <LL_GPIO_SetOutputPin>
	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80019ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019ee:	3301      	adds	r3, #1
 80019f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d9d7      	bls.n	80019ac <SPISetTiPllFreq+0x11c>
 80019fc:	e000      	b.n	8001a00 <SPISetTiPllFreq+0x170>
	if(sp & 0xFFFF0000) return; // OVF.
 80019fe:	bf00      	nop
	}
}
 8001a00:	3738      	adds	r7, #56	; 0x38
 8001a02:	46bd      	mov	sp, r7
 8001a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	4c371b00 	.word	0x4c371b00
 8001a10:	48000800 	.word	0x48000800
 8001a14:	20000248 	.word	0x20000248

08001a18 <SPISetTiPllRampFreqFromBuf>:

void SPISetTiPllRampFreqFromBuf() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	float p = (float)RFBPllData[RFBPllData_SweepLow];
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <SPISetTiPllRampFreqFromBuf+0x78>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2a:	edc7 7a01 	vstr	s15, [r7, #4]
	float q = (float)RFBPllData[RFBPllData_SweepHigh];
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <SPISetTiPllRampFreqFromBuf+0x78>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3a:	edc7 7a00 	vstr	s15, [r7]

	SPISetTiPllRampFreq(p, q, 65535, q - p + 200000.0f, q + 100000.0f, p - 100000.0f);
 8001a3e:	ed97 7a00 	vldr	s14, [r7]
 8001a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001a94 <SPISetTiPllRampFreqFromBuf+0x7c>
 8001a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a52:	edd7 7a00 	vldr	s15, [r7]
 8001a56:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a98 <SPISetTiPllRampFreqFromBuf+0x80>
 8001a5a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8001a98 <SPISetTiPllRampFreqFromBuf+0x80>
 8001a66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001a6a:	eeb0 2a67 	vmov.f32	s4, s15
 8001a6e:	eef0 1a66 	vmov.f32	s3, s13
 8001a72:	eeb0 1a47 	vmov.f32	s2, s14
 8001a76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a7a:	edd7 0a00 	vldr	s1, [r7]
 8001a7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a82:	f000 f80b 	bl	8001a9c <SPISetTiPllRampFreq>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002ac 	.word	0x200002ac
 8001a94:	48435000 	.word	0x48435000
 8001a98:	47c35000 	.word	0x47c35000

08001a9c <SPISetTiPllRampFreq>:

void SPISetTiPllRampFreq(float start, float end, uint16_t len, float threshbw, float limithigh, float limitlow) {
 8001a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa0:	b0b0      	sub	sp, #192	; 0xc0
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 8001aa8:	edc7 0a0e 	vstr	s1, [r7, #56]	; 0x38
 8001aac:	4603      	mov	r3, r0
 8001aae:	ed87 1a0c 	vstr	s2, [r7, #48]	; 0x30
 8001ab2:	edc7 1a0b 	vstr	s3, [r7, #44]	; 0x2c
 8001ab6:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8001aba:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint8_t denq = TIPLL_DENQ;
 8001abc:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <SPISetTiPllRampFreq+0xc8>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	uint32_t den = (1u << denq) - 1;
 8001ac4:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001ac8:	2301      	movs	r3, #1
 8001aca:	4093      	lsls	r3, r2
 8001acc:	3b01      	subs	r3, #1
 8001ace:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	uint64_t ns = llroundf(start * den / TIPLL_FPD);
 8001ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ade:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001b6c <SPISetTiPllRampFreq+0xd0>
 8001aea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aee:	eeb0 0a47 	vmov.f32	s0, s14
 8001af2:	f00b fc17 	bl	800d324 <llroundf>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	uint64_t ne = llroundf(end   * den / TIPLL_FPD);
 8001afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b0a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001b6c <SPISetTiPllRampFreq+0xd0>
 8001b16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1e:	f00b fc01 	bl	800d324 <llroundf>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t so = (int64_t)ne - (int64_t)ns;
 8001b2a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001b2e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001b32:	1a84      	subs	r4, r0, r2
 8001b34:	eb61 0503 	sbc.w	r5, r1, r3
 8001b38:	e9c7 4524 	strd	r4, r5, [r7, #144]	; 0x90
	int64_t ss = llroundf(1.0f * so / len);
 8001b3c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001b40:	f7fe fc16 	bl	8000370 <__aeabi_l2f>
 8001b44:	ee06 0a90 	vmov	s13, r0
 8001b48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b56:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5a:	f00b fbe3 	bl	800d324 <llroundf>
 8001b5e:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8

	while ((ss & 0x7FFFFFFFE0000000) != 0) {
 8001b62:	e062      	b.n	8001c2a <SPISetTiPllRampFreq+0x18e>
 8001b64:	20000000 	.word	0x20000000
 8001b68:	4b800000 	.word	0x4b800000
 8001b6c:	4c371b00 	.word	0x4c371b00
		if(denq > 2) denq--;
 8001b70:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f240 824a 	bls.w	800200e <SPISetTiPllRampFreq+0x572>
 8001b7a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		else return; // Unable to set.
		den = (1u << denq) - 1;
 8001b84:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001b88:	2301      	movs	r3, #1
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		ns = llroundf(start * den / TIPLL_FPD);
 8001b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba6:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8001b6c <SPISetTiPllRampFreq+0xd0>
 8001baa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bae:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb2:	f00b fbb7 	bl	800d324 <llroundf>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		ne = llroundf(end   * den / TIPLL_FPD);
 8001bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd2:	ed5f 6a1a 	vldr	s13, [pc, #-104]	; 8001b6c <SPISetTiPllRampFreq+0xd0>
 8001bd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bda:	eeb0 0a47 	vmov.f32	s0, s14
 8001bde:	f00b fba1 	bl	800d324 <llroundf>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		so = (int64_t)ne - (int64_t)ns;
 8001bea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001bee:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001bf2:	1a84      	subs	r4, r0, r2
 8001bf4:	60bc      	str	r4, [r7, #8]
 8001bf6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c00:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		ss = llroundf(1.0f * so / len);
 8001c04:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001c08:	f7fe fbb2 	bl	8000370 <__aeabi_l2f>
 8001c0c:	ee06 0a90 	vmov	s13, r0
 8001c10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c22:	f00b fb7f 	bl	800d324 <llroundf>
 8001c26:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
	while ((ss & 0x7FFFFFFFE0000000) != 0) {
 8001c2a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001c2e:	f002 4860 	and.w	r8, r2, #3758096384	; 0xe0000000
 8001c32:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c36:	ea58 0309 	orrs.w	r3, r8, r9
 8001c3a:	d199      	bne.n	8001b70 <SPISetTiPllRampFreq+0xd4>
	}

	uint32_t sq = ns % den;
 8001c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c40:	2200      	movs	r2, #0
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	627a      	str	r2, [r7, #36]	; 0x24
 8001c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c4e:	f7fe fbcd 	bl	80003ec <__aeabi_uldivmod>
 8001c52:	4613      	mov	r3, r2
 8001c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint32_t sp = (ns - sq) / den;
 8001c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	469a      	mov	sl, r3
 8001c60:	4693      	mov	fp, r2
 8001c62:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001c66:	ebb2 010a 	subs.w	r1, r2, sl
 8001c6a:	61b9      	str	r1, [r7, #24]
 8001c6c:	eb63 030b 	sbc.w	r3, r3, fp
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c76:	2200      	movs	r2, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	617a      	str	r2, [r7, #20]
 8001c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c84:	f7fe fbb2 	bl	80003ec <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if(sp & 0xFFFF0000) return; // OVF.
 8001c92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 81b9 	bne.w	8002012 <SPISetTiPllRampFreq+0x576>

	uint64_t rthresh = llroundf(threshbw * 16777216.0f / TIPLL_FPD); // 32bit
 8001ca0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ca4:	ed1f 7a50 	vldr	s14, [pc, #-320]	; 8001b68 <SPISetTiPllRampFreq+0xcc>
 8001ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cac:	ed5f 6a51 	vldr	s13, [pc, #-324]	; 8001b6c <SPISetTiPllRampFreq+0xd0>
 8001cb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb8:	f00b fb34 	bl	800d324 <llroundf>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	uint64_t rlhramp = llroundf(16777216.0f * (limithigh - start) / TIPLL_FPD); // 33bit
 8001cc4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001cc8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 8001b68 <SPISetTiPllRampFreq+0xcc>
 8001cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd8:	ed5f 6a5c 	vldr	s13, [pc, #-368]	; 8001b6c <SPISetTiPllRampFreq+0xd0>
 8001cdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce4:	f00b fb1e 	bl	800d324 <llroundf>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint64_t rllramp = 8589934592ull - llroundf(16777216.0f * (start - limitlow) / TIPLL_FPD); // 33bit
 8001cf0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001cf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cfc:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8001b68 <SPISetTiPllRampFreq+0xcc>
 8001d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d04:	ed5f 6a67 	vldr	s13, [pc, #-412]	; 8001b6c <SPISetTiPllRampFreq+0xd0>
 8001d08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d10:	f00b fb08 	bl	800d324 <llroundf>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4250      	negs	r0, r2
 8001d1c:	6038      	str	r0, [r7, #0]
 8001d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d28:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	const uint8_t aTxBuffers[][3] = {
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			SPIInitTiPllW_GenArray(100, len),
 8001d32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d3a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			SPIInitTiPllW_GenArray(100, len),
 8001d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d40:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001d46:	2363      	movs	r3, #99	; 0x63
 8001d48:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			SPIInitTiPllW_GenArray( 99, ((uint16_t)(ss))),
 8001d4c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			SPIInitTiPllW_GenArray( 99, ((uint16_t)(ss))),
 8001d5a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
	const uint8_t aTxBuffers[][3] = {
 8001d5e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001d62:	2362      	movs	r3, #98	; 0x62
 8001d64:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			SPIInitTiPllW_GenArray( 98, ((uint16_t)(ss >> 48) & 0x8000) | ((uint16_t)(ss >> 14) & 0x7FFC) | 0b00),
 8001d68:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	0b82      	lsrs	r2, r0, #14
 8001d76:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001d7a:	138b      	asrs	r3, r1, #14
 8001d7c:	b2d3      	uxtb	r3, r2
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			SPIInitTiPllW_GenArray( 98, ((uint16_t)(ss >> 48) & 0x8000) | ((uint16_t)(ss >> 14) & 0x7FFC) | 0b00),
 8001d88:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	0b82      	lsrs	r2, r0, #14
 8001d96:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001d9a:	138b      	asrs	r3, r1, #14
 8001d9c:	b2d3      	uxtb	r3, r2
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001da4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001da8:	2356      	movs	r3, #86	; 0x56
 8001daa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

			SPIInitTiPllW_GenArray( 86, (uint16_t)(rllramp)),
 8001dae:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001db8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			SPIInitTiPllW_GenArray( 86, (uint16_t)(rllramp)),
 8001dbc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
	const uint8_t aTxBuffers[][3] = {
 8001dc0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001dc4:	2355      	movs	r3, #85	; 0x55
 8001dc6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			SPIInitTiPllW_GenArray( 85, (uint16_t)(rllramp >> 16)),
 8001dca:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	0c02      	lsrs	r2, r0, #16
 8001dd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ddc:	0c0b      	lsrs	r3, r1, #16
 8001dde:	b293      	uxth	r3, r2
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001de6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			SPIInitTiPllW_GenArray( 85, (uint16_t)(rllramp >> 16)),
 8001dea:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	0c02      	lsrs	r2, r0, #16
 8001df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001dfc:	0c0b      	lsrs	r3, r1, #16
 8001dfe:	b2d3      	uxtb	r3, r2
	const uint8_t aTxBuffers[][3] = {
 8001e00:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001e04:	2354      	movs	r3, #84	; 0x54
 8001e06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
			SPIInitTiPllW_GenArray( 84, (uint16_t)(rllramp >> 32) & 0x0001),
 8001e10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	2300      	movs	r3, #0
 8001e20:	b2d3      	uxtb	r3, r2
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001e28:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001e2c:	2353      	movs	r3, #83	; 0x53
 8001e2e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			SPIInitTiPllW_GenArray( 83, (uint16_t)(rlhramp)),
 8001e32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001e3c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			SPIInitTiPllW_GenArray( 83, (uint16_t)(rlhramp)),
 8001e40:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
	const uint8_t aTxBuffers[][3] = {
 8001e44:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8001e48:	2352      	movs	r3, #82	; 0x52
 8001e4a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

			SPIInitTiPllW_GenArray( 82, (uint16_t)(rlhramp >> 16)),
 8001e4e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	0c02      	lsrs	r2, r0, #16
 8001e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e60:	0c0b      	lsrs	r3, r1, #16
 8001e62:	b293      	uxth	r3, r2
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001e6a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			SPIInitTiPllW_GenArray( 82, (uint16_t)(rlhramp >> 16)),
 8001e6e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	0c02      	lsrs	r2, r0, #16
 8001e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e80:	0c0b      	lsrs	r3, r1, #16
 8001e82:	b2d3      	uxtb	r3, r2
	const uint8_t aTxBuffers[][3] = {
 8001e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001e88:	2351      	movs	r3, #81	; 0x51
 8001e8a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			SPIInitTiPllW_GenArray( 81, (uint16_t)(rlhramp >> 32) & 0x0001),
 8001e94:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	000a      	movs	r2, r1
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	b2d3      	uxtb	r3, r2
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001eac:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001eb0:	2350      	movs	r3, #80	; 0x50
 8001eb2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			SPIInitTiPllW_GenArray( 80, (uint16_t)(rthresh)),
 8001eb6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001ec0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			SPIInitTiPllW_GenArray( 80, (uint16_t)(rthresh)),
 8001ec4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
	const uint8_t aTxBuffers[][3] = {
 8001ec8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001ecc:	234f      	movs	r3, #79	; 0x4f
 8001ece:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			SPIInitTiPllW_GenArray( 79, (uint16_t)(rthresh >> 16)),
 8001ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	0c02      	lsrs	r2, r0, #16
 8001ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ee4:	0c0b      	lsrs	r3, r1, #16
 8001ee6:	b293      	uxth	r3, r2
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			SPIInitTiPllW_GenArray( 79, (uint16_t)(rthresh >> 16)),
 8001ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	0c02      	lsrs	r2, r0, #16
 8001f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f04:	0c0b      	lsrs	r3, r1, #16
 8001f06:	b2d3      	uxtb	r3, r2
	const uint8_t aTxBuffers[][3] = {
 8001f08:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8001f0c:	232b      	movs	r3, #43	; 0x2b
 8001f0e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 8001f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f1e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 8001f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f26:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f28:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001f2c:	232a      	movs	r3, #42	; 0x2a
 8001f2e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f40:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f4c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001f50:	2327      	movs	r3, #39	; 0x27
 8001f52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 8001f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f62:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 8001f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f6a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f6c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001f70:	2326      	movs	r3, #38	; 0x26
 8001f72:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f7a:	0c1b      	lsrs	r3, r3, #16
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f84:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f90:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001f94:	2324      	movs	r3, #36	; 0x24
 8001f96:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 8001f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001fa6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 8001faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fae:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001fb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	};

	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001fba:	e023      	b.n	8002004 <SPISetTiPllRampFreq+0x568>
		__NOP();
 8001fbc:	bf00      	nop
		LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc2:	4816      	ldr	r0, [pc, #88]	; (800201c <SPISetTiPllRampFreq+0x580>)
 8001fc4:	f7ff fb3e 	bl	8001644 <LL_GPIO_ResetOutputPin>
		__NOP();
 8001fc8:	bf00      	nop

		if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 8001fca:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8001fce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4419      	add	r1, r3
 8001fda:	230a      	movs	r3, #10
 8001fdc:	2203      	movs	r2, #3
 8001fde:	4810      	ldr	r0, [pc, #64]	; (8002020 <SPISetTiPllRampFreq+0x584>)
 8001fe0:	f005 f946 	bl	8007270 <HAL_SPI_Transmit>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SPISetTiPllRampFreq+0x552>
		    Error_Handler();
 8001fea:	f7ff fac9 	bl	8001580 <Error_Handler>
		}

		__NOP();
 8001fee:	bf00      	nop
		LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff4:	4809      	ldr	r0, [pc, #36]	; (800201c <SPISetTiPllRampFreq+0x580>)
 8001ff6:	f7ff fb17 	bl	8001628 <LL_GPIO_SetOutputPin>
	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8001ffa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001ffe:	3301      	adds	r3, #1
 8002000:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002004:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d9d7      	bls.n	8001fbc <SPISetTiPllRampFreq+0x520>
 800200c:	e002      	b.n	8002014 <SPISetTiPllRampFreq+0x578>
		else return; // Unable to set.
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <SPISetTiPllRampFreq+0x578>
	if(sp & 0xFFFF0000) return; // OVF.
 8002012:	bf00      	nop
	}
}
 8002014:	37c0      	adds	r7, #192	; 0xc0
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201c:	48000800 	.word	0x48000800
 8002020:	20000248 	.word	0x20000248

08002024 <SPIInitTiAdc>:

void SPIInitTiAdc() {
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
    const uint8_t aTxBuffers[][3] = {
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <SPIInitTiAdc+0x6c>)
 800202c:	1d3c      	adds	r4, r7, #4
 800202e:	461d      	mov	r5, r3
 8002030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	8023      	strh	r3, [r4, #0]
            SPIInitTiAdcW_GenArray(0x422, 0x02), // ChA Chopper En
            SPIInitTiAdcW_GenArray(0x522, 0x02), // ChB Chopper En
            SPIInitTiAdcW_GenArray(0x70A, 0x01), // SYSREF Off
    };

    for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8002038:	2300      	movs	r3, #0
 800203a:	75fb      	strb	r3, [r7, #23]
 800203c:	e01f      	b.n	800207e <SPIInitTiAdc+0x5a>
        __NOP();
 800203e:	bf00      	nop
        LL_GPIO_ResetOutputPin(SPI_CS_ADC_GPIO_Port, SPI_CS_PLL_Pin);
 8002040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <SPIInitTiAdc+0x70>)
 8002046:	f7ff fafd 	bl	8001644 <LL_GPIO_ResetOutputPin>
        __NOP();
 800204a:	bf00      	nop

        if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 800204c:	7dfa      	ldrb	r2, [r7, #23]
 800204e:	1d39      	adds	r1, r7, #4
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	4419      	add	r1, r3
 8002058:	230a      	movs	r3, #10
 800205a:	2203      	movs	r2, #3
 800205c:	480e      	ldr	r0, [pc, #56]	; (8002098 <SPIInitTiAdc+0x74>)
 800205e:	f005 f907 	bl	8007270 <HAL_SPI_Transmit>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <SPIInitTiAdc+0x48>
            Error_Handler();
 8002068:	f7ff fa8a 	bl	8001580 <Error_Handler>
        }

        __NOP();
 800206c:	bf00      	nop
        LL_GPIO_SetOutputPin(SPI_CS_ADC_GPIO_Port, SPI_CS_PLL_Pin);
 800206e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <SPIInitTiAdc+0x70>)
 8002074:	f7ff fad8 	bl	8001628 <LL_GPIO_SetOutputPin>
    for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	3301      	adds	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d9dc      	bls.n	800203e <SPIInitTiAdc+0x1a>
    }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bdb0      	pop	{r4, r5, r7, pc}
 800208e:	bf00      	nop
 8002090:	0800d3f0 	.word	0x0800d3f0
 8002094:	48000400 	.word	0x48000400
 8002098:	20000248 	.word	0x20000248

0800209c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_MspInit+0x4c>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_MspInit+0x4c>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6613      	str	r3, [r2, #96]	; 0x60
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_MspInit+0x4c>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_MspInit+0x4c>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_MspInit+0x4c>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	; 0x58
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_MspInit+0x4c>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	210f      	movs	r1, #15
 80020d6:	f06f 0001 	mvn.w	r0, #1
 80020da:	f002 fbe7 	bl	80048ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020fa:	4b34      	ldr	r3, [pc, #208]	; (80021cc <HAL_InitTick+0xe0>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a33      	ldr	r2, [pc, #204]	; (80021cc <HAL_InitTick+0xe0>)
 8002100:	f043 0310 	orr.w	r3, r3, #16
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
 8002106:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_InitTick+0xe0>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002112:	f107 0210 	add.w	r2, r7, #16
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f004 f8c3 	bl	80062a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800212c:	f004 f8a6 	bl	800627c <HAL_RCC_GetPCLK1Freq>
 8002130:	6378      	str	r0, [r7, #52]	; 0x34
 8002132:	e004      	b.n	800213e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002134:	f004 f8a2 	bl	800627c <HAL_RCC_GetPCLK1Freq>
 8002138:	4603      	mov	r3, r0
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_InitTick+0xe4>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	3b01      	subs	r3, #1
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_InitTick+0xe8>)
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_InitTick+0xec>)
 8002150:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_InitTick+0xe8>)
 8002154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002158:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800215a:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <HAL_InitTick+0xe8>)
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <HAL_InitTick+0xe8>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_InitTick+0xe8>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_InitTick+0xe8>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002172:	4818      	ldr	r0, [pc, #96]	; (80021d4 <HAL_InitTick+0xe8>)
 8002174:	f005 fb5e 	bl	8007834 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800217e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002182:	2b00      	cmp	r3, #0
 8002184:	d11b      	bne.n	80021be <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002186:	4813      	ldr	r0, [pc, #76]	; (80021d4 <HAL_InitTick+0xe8>)
 8002188:	f005 fc36 	bl	80079f8 <HAL_TIM_Base_Start_IT>
 800218c:	4603      	mov	r3, r0
 800218e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002192:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002196:	2b00      	cmp	r3, #0
 8002198:	d111      	bne.n	80021be <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800219a:	2036      	movs	r0, #54	; 0x36
 800219c:	f002 fbb2 	bl	8004904 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d808      	bhi.n	80021b8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021a6:	2200      	movs	r2, #0
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	2036      	movs	r0, #54	; 0x36
 80021ac:	f002 fb7e 	bl	80048ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_InitTick+0xf0>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e002      	b.n	80021be <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3738      	adds	r7, #56	; 0x38
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	200002b4 	.word	0x200002b4
 80021d8:	40001000 	.word	0x40001000
 80021dc:	20000008 	.word	0x20000008

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <NMI_Handler+0x4>

080021e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <MemManage_Handler+0x4>

080021f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <BusFault_Handler+0x4>

080021f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <UsageFault_Handler+0x4>

080021fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA1_Channel1_IRQHandler+0x10>)
 8002212:	f002 fd47 	bl	8004ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000f8 	.word	0x200000f8

08002220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM6_DAC_IRQHandler+0x10>)
 8002226:	f005 fd51 	bl	8007ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200002b4 	.word	0x200002b4

08002234 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <SystemInit+0x20>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <SystemInit+0x20>)
 8002240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b09a      	sub	sp, #104	; 0x68
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002278:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
 8002288:	615a      	str	r2, [r3, #20]
 800228a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	222c      	movs	r2, #44	; 0x2c
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f00a ff7c 	bl	800d190 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002298:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <MX_TIM15_Init+0x158>)
 800229a:	4a46      	ldr	r2, [pc, #280]	; (80023b4 <MX_TIM15_Init+0x15c>)
 800229c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800229e:	4b44      	ldr	r3, [pc, #272]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 1;
 80022b8:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80022c4:	483a      	ldr	r0, [pc, #232]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022c6:	f005 fab5 	bl	8007834 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80022d0:	f7ff f956 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80022da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022de:	4619      	mov	r1, r3
 80022e0:	4833      	ldr	r0, [pc, #204]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022e2:	f005 ff45 	bl	8008170 <HAL_TIM_ConfigClockSource>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80022ec:	f7ff f948 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 80022f0:	482f      	ldr	r0, [pc, #188]	; (80023b0 <MX_TIM15_Init+0x158>)
 80022f2:	f005 fbff 	bl	8007af4 <HAL_TIM_OC_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80022fc:	f7ff f940 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002308:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800230c:	4619      	mov	r1, r3
 800230e:	4828      	ldr	r0, [pc, #160]	; (80023b0 <MX_TIM15_Init+0x158>)
 8002310:	f006 fdf8 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800231a:	f7ff f931 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800231e:	2310      	movs	r3, #16
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002326:	2300      	movs	r3, #0
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800232a:	2300      	movs	r3, #0
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800233a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800233e:	2200      	movs	r2, #0
 8002340:	4619      	mov	r1, r3
 8002342:	481b      	ldr	r0, [pc, #108]	; (80023b0 <MX_TIM15_Init+0x158>)
 8002344:	f005 fde2 	bl	8007f0c <HAL_TIM_OC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800234e:	f7ff f917 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002352:	2330      	movs	r3, #48	; 0x30
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800235a:	2204      	movs	r2, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4814      	ldr	r0, [pc, #80]	; (80023b0 <MX_TIM15_Init+0x158>)
 8002360:	f005 fdd4 	bl	8007f0c <HAL_TIM_OC_ConfigChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800236a:	f7ff f909 	bl	8001580 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002386:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_TIM15_Init+0x158>)
 8002392:	f006 fecb 	bl	800912c <HAL_TIMEx_ConfigBreakDeadTime>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800239c:	f7ff f8f0 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80023a0:	4803      	ldr	r0, [pc, #12]	; (80023b0 <MX_TIM15_Init+0x158>)
 80023a2:	f000 f829 	bl	80023f8 <HAL_TIM_MspPostInit>

}
 80023a6:	bf00      	nop
 80023a8:	3768      	adds	r7, #104	; 0x68
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000300 	.word	0x20000300
 80023b4:	40014000 	.word	0x40014000

080023b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_TIM_Base_MspInit+0x38>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10b      	bne.n	80023e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_TIM_Base_MspInit+0x3c>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_TIM_Base_MspInit+0x3c>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6613      	str	r3, [r2, #96]	; 0x60
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_TIM_Base_MspInit+0x3c>)
 80023d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40014000 	.word	0x40014000
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_TIM_MspPostInit+0xa0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d139      	bne.n	800248e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_TIM_MspPostInit+0xa4>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_TIM_MspPostInit+0xa4>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_TIM_MspPostInit+0xa4>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HAL_TIM_MspPostInit+0xa4>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4a19      	ldr	r2, [pc, #100]	; (800249c <HAL_TIM_MspPostInit+0xa4>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_TIM_MspPostInit+0xa4>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800244a:	2308      	movs	r3, #8
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002456:	2303      	movs	r3, #3
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800245a:	230e      	movs	r3, #14
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002468:	f002 fccc 	bl	8004e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800246c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800247e:	230e      	movs	r3, #14
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <HAL_TIM_MspPostInit+0xa8>)
 800248a:	f002 fcbb 	bl	8004e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40014000 	.word	0x40014000
 800249c:	40021000 	.word	0x40021000
 80024a0:	48000400 	.word	0x48000400

080024a4 <TIM15TiPllRampStart>:
}

/* USER CODE BEGIN 1 */


void TIM15TiPllRampStart() {
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  //if(!LL_TIM_IsEnabledCounter(TIM15)) {
	  //LL_TIM_EnableCounter(TIM15);
  //}
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_USART_Enable>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_USART_ConfigAsyncMode>:
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	609a      	str	r2, [r3, #8]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <LL_AHB2_GRP1_EnableClock>:
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800250a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4313      	orrs	r3, r2
 8002512:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4013      	ands	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40021000 	.word	0x40021000

08002530 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <LL_APB2_GRP1_EnableClock+0x2c>)
 800253a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <LL_APB2_GRP1_EnableClock+0x2c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4313      	orrs	r3, r2
 8002542:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40021000 	.word	0x40021000

08002560 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0a4      	sub	sp, #144	; 0x90
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002566:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800258c:	463b      	mov	r3, r7
 800258e:	225c      	movs	r2, #92	; 0x5c
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00a fdfc 	bl	800d190 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002598:	2301      	movs	r3, #1
 800259a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a0:	463b      	mov	r3, r7
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 ff22 	bl	80063ec <HAL_RCCEx_PeriphCLKConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025ae:	f7fe ffe7 	bl	8001580 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80025b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025b6:	f7ff ffbb 	bl	8002530 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff ffa0 	bl	8002500 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80025c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025c6:	2302      	movs	r3, #2
 80025c8:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025d2:	2300      	movs	r3, #0
 80025d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80025d6:	2307      	movs	r3, #7
 80025d8:	673b      	str	r3, [r7, #112]	; 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e4:	f007 f830 	bl	8009648 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80025e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025ee:	2302      	movs	r3, #2
 80025f0:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80025fe:	2307      	movs	r3, #7
 8002600:	673b      	str	r3, [r7, #112]	; 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f007 f81c 	bl	8009648 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002610:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002614:	677b      	str	r3, [r7, #116]	; 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002616:	2300      	movs	r3, #0
 8002618:	67bb      	str	r3, [r7, #120]	; 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800261a:	2300      	movs	r3, #0
 800261c:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002624:	230c      	movs	r3, #12
 8002626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002636:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800263a:	4619      	mov	r1, r3
 800263c:	4806      	ldr	r0, [pc, #24]	; (8002658 <MX_USART1_UART_Init+0xf8>)
 800263e:	f007 fcc9 	bl	8009fd4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <MX_USART1_UART_Init+0xf8>)
 8002644:	f7ff ff45 	bl	80024d2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002648:	4803      	ldr	r0, [pc, #12]	; (8002658 <MX_USART1_UART_Init+0xf8>)
 800264a:	f7ff ff32 	bl	80024b2 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	3790      	adds	r7, #144	; 0x90
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40013800 	.word	0x40013800

0800265c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800265c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002694 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002660:	f7ff fde8 	bl	8002234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <LoopForever+0x6>)
  ldr r1, =_edata
 8002666:	490d      	ldr	r1, [pc, #52]	; (800269c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <LoopForever+0xe>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <LoopForever+0x16>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800268a:	f00a fd4d 	bl	800d128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800268e:	f7fe fefb 	bl	8001488 <main>

08002692 <LoopForever>:

LoopForever:
    b LoopForever
 8002692:	e7fe      	b.n	8002692 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002694:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80026a0:	0800dc20 	.word	0x0800dc20
  ldr r2, =_sbss
 80026a4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80026a8:	20004fe8 	.word	0x20004fe8

080026ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC1_IRQHandler>

080026ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b8:	2003      	movs	r0, #3
 80026ba:	f002 f8d7 	bl	800486c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026be:	2000      	movs	r0, #0
 80026c0:	f7ff fd14 	bl	80020ec <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	e001      	b.n	80026d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d0:	f7ff fce4 	bl	800209c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d4:	79fb      	ldrb	r3, [r7, #7]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	2000000c 	.word	0x2000000c
 8002704:	2000034c 	.word	0x2000034c

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000034c 	.word	0x2000034c

08002720 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0318 	and.w	r3, r3, #24
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3360      	adds	r3, #96	; 0x60
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <LL_ADC_SetOffset+0x44>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	03fff000 	.word	0x03fff000

080027ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3360      	adds	r3, #96	; 0x60
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800284e:	b480      	push	{r7}
 8002850:	b087      	sub	sp, #28
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3330      	adds	r3, #48	; 0x30
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	4413      	add	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	211f      	movs	r1, #31
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	401a      	ands	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	f003 011f 	and.w	r1, r3, #31
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3314      	adds	r3, #20
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	0e5b      	lsrs	r3, r3, #25
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	0d1b      	lsrs	r3, r3, #20
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2107      	movs	r1, #7
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	0d1b      	lsrs	r3, r3, #20
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	431a      	orrs	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	43db      	mvns	r3, r3
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f003 0318 	and.w	r3, r3, #24
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002920:	40d9      	lsrs	r1, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	400b      	ands	r3, r1
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	431a      	orrs	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	0007ffff 	.word	0x0007ffff

08002944 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6093      	str	r3, [r2, #8]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800297c:	d101      	bne.n	8002982 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029cc:	d101      	bne.n	80029d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <LL_ADC_IsEnabled+0x18>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <LL_ADC_IsEnabled+0x1a>
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d101      	bne.n	8002a1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d101      	bne.n	8002a44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e330      	b.n	80030d0 <HAL_ADC_Init+0x67c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a90      	ldr	r2, [pc, #576]	; (8002cb4 <HAL_ADC_Init+0x260>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_Init+0x2e>
 8002a78:	f240 1199 	movw	r1, #409	; 0x199
 8002a7c:	488e      	ldr	r0, [pc, #568]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002a7e:	f7fe fd84 	bl	800158a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d049      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a94:	d044      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a9e:	d03f      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d03b      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab0:	d036      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aba:	d031      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ac4:	d02c      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ace:	d027      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ad8:	d022      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ae2:	d01d      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002aec:	d018      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af6:	d013      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b00:	d00e      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b0a:	d009      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_Init+0xcc>
 8002b16:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002b1a:	4867      	ldr	r0, [pc, #412]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002b1c:	f7fe fd35 	bl	800158a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <HAL_ADC_Init+0xf6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00c      	beq.n	8002b4a <HAL_ADC_Init+0xf6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d008      	beq.n	8002b4a <HAL_ADC_Init+0xf6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b18      	cmp	r3, #24
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADC_Init+0xf6>
 8002b40:	f240 119b 	movw	r1, #411	; 0x19b
 8002b44:	485c      	ldr	r0, [pc, #368]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002b46:	f7fe fd20 	bl	800158a <assert_failed>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
#endif
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_ADC_Init+0x110>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_Init+0x110>
 8002b5a:	f240 119f 	movw	r1, #415	; 0x19f
 8002b5e:	4856      	ldr	r0, [pc, #344]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002b60:	f7fe fd13 	bl	800158a <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_ADC_Init+0x12a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d004      	beq.n	8002b7e <HAL_ADC_Init+0x12a>
 8002b74:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002b78:	484f      	ldr	r0, [pc, #316]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002b7a:	f7fe fd06 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7e5b      	ldrb	r3, [r3, #25]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_ADC_Init+0x144>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7e5b      	ldrb	r3, [r3, #25]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADC_Init+0x144>
 8002b8e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002b92:	4849      	ldr	r0, [pc, #292]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002b94:	f7fe fcf9 	bl	800158a <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_ADC_Init+0x174>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_ADC_Init+0x174>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb2:	d009      	beq.n	8002bc8 <HAL_ADC_Init+0x174>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bbc:	d004      	beq.n	8002bc8 <HAL_ADC_Init+0x174>
 8002bbe:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002bc2:	483d      	ldr	r0, [pc, #244]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002bc4:	f7fe fce1 	bl	800158a <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd0:	d053      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8002bda:	d04e      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002be4:	d049      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8002bee:	d044      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002bf8:	d03f      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 8002c02:	d03a      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002c0c:	d035      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 8002c16:	d030      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c20:	d02b      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002c2a:	d026      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002c34:	d021      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c48:	d017      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 8002c52:	d012      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8002c5c:	d00d      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8002c66:	d008      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_ADC_Init+0x226>
 8002c70:	f240 11a3 	movw	r1, #419	; 0x1a3
 8002c74:	4810      	ldr	r0, [pc, #64]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002c76:	f7fe fc88 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_ADC_Init+0x244>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d004      	beq.n	8002c98 <HAL_ADC_Init+0x244>
 8002c8e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002c92:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002c94:	f7fe fc79 	bl	800158a <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d00d      	beq.n	8002cbc <HAL_ADC_Init+0x268>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d009      	beq.n	8002cbc <HAL_ADC_Init+0x268>
 8002ca8:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <HAL_ADC_Init+0x264>)
 8002cae:	f7fe fc6c 	bl	800158a <assert_failed>
 8002cb2:	e003      	b.n	8002cbc <HAL_ADC_Init+0x268>
 8002cb4:	50040000 	.word	0x50040000
 8002cb8:	0800d404 	.word	0x0800d404
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HAL_ADC_Init+0x284>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ccc:	d004      	beq.n	8002cd8 <HAL_ADC_Init+0x284>
 8002cce:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8002cd2:	4849      	ldr	r0, [pc, #292]	; (8002df8 <HAL_ADC_Init+0x3a4>)
 8002cd4:	f7fe fc59 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7e1b      	ldrb	r3, [r3, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_ADC_Init+0x29e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7e1b      	ldrb	r3, [r3, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_Init+0x29e>
 8002ce8:	f240 11a7 	movw	r1, #423	; 0x1a7
 8002cec:	4842      	ldr	r0, [pc, #264]	; (8002df8 <HAL_ADC_Init+0x3a4>)
 8002cee:	f7fe fc4c 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_ADC_Init+0x2bc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d004      	beq.n	8002d10 <HAL_ADC_Init+0x2bc>
 8002d06:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8002d0a:	483b      	ldr	r0, [pc, #236]	; (8002df8 <HAL_ADC_Init+0x3a4>)
 8002d0c:	f7fe fc3d 	bl	800158a <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02d      	beq.n	8002d74 <HAL_ADC_Init+0x320>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_ADC_Init+0x2d4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d904      	bls.n	8002d32 <HAL_ADC_Init+0x2de>
 8002d28:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002d2c:	4832      	ldr	r0, [pc, #200]	; (8002df8 <HAL_ADC_Init+0x3a4>)
 8002d2e:	f7fe fc2c 	bl	800158a <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <HAL_ADC_Init+0x2fc>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d004      	beq.n	8002d50 <HAL_ADC_Init+0x2fc>
 8002d46:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002d4a:	482b      	ldr	r0, [pc, #172]	; (8002df8 <HAL_ADC_Init+0x3a4>)
 8002d4c:	f7fe fc1d 	bl	800158a <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10c      	bne.n	8002d74 <HAL_ADC_Init+0x320>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_ADC_Init+0x316>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d904      	bls.n	8002d74 <HAL_ADC_Init+0x320>
 8002d6a:	f240 11b1 	movw	r1, #433	; 0x1b1
 8002d6e:	4822      	ldr	r0, [pc, #136]	; (8002df8 <HAL_ADC_Init+0x3a4>)
 8002d70:	f7fe fc0b 	bl	800158a <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_ADC_Init+0x33c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7e5b      	ldrb	r3, [r3, #25]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d104      	bne.n	8002d90 <HAL_ADC_Init+0x33c>
 8002d86:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002d8a:	481b      	ldr	r0, [pc, #108]	; (8002df8 <HAL_ADC_Init+0x3a4>)
 8002d8c:	f7fe fbfd 	bl	800158a <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <HAL_ADC_Init+0x358>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fe f847 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fdd9 	bl	8002968 <LL_ADC_IsDeepPowerDownEnabled>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_Init+0x372>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fdbf 	bl	8002944 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fdf4 	bl	80029b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11c      	bne.n	8002e10 <HAL_ADC_Init+0x3bc>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fdd8 	bl	8002990 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_ADC_Init+0x3a8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	4a06      	ldr	r2, [pc, #24]	; (8002e00 <HAL_ADC_Init+0x3ac>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002df4:	e009      	b.n	8002e0a <HAL_ADC_Init+0x3b6>
 8002df6:	bf00      	nop
 8002df8:	0800d404 	.word	0x0800d404
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <HAL_ADC_Init+0x3b0>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fdcf 	bl	80029b8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_ADC_Init+0x3e8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fde0 	bl	8002a06 <LL_ADC_REG_IsConversionOngoing>
 8002e46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f040 8134 	bne.w	80030be <HAL_ADC_Init+0x66a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 8130 	bne.w	80030be <HAL_ADC_Init+0x66a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fdb4 	bl	80029e0 <LL_ADC_IsEnabled>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_ADC_Init+0x442>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e7e:	4896      	ldr	r0, [pc, #600]	; (80030d8 <HAL_ADC_Init+0x684>)
 8002e80:	f7ff fdae 	bl	80029e0 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_Init+0x442>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4892      	ldr	r0, [pc, #584]	; (80030dc <HAL_ADC_Init+0x688>)
 8002e92:	f7ff fc45 	bl	8002720 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7e5b      	ldrb	r3, [r3, #25]
 8002e9a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ea6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eac:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_ADC_Init+0x47e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	045b      	lsls	r3, r3, #17
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_ADC_Init+0x49a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <HAL_ADC_Init+0x68c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fd7d 	bl	8002a06 <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fd8a 	bl	8002a2c <LL_ADC_INJ_IsConversionOngoing>
 8002f18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f040 80ac 	bne.w	800307a <HAL_ADC_Init+0x626>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 80a8 	bne.w	800307a <HAL_ADC_Init+0x626>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f2e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f36:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f46:	f023 0302 	bic.w	r3, r3, #2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	f040 8085 	bne.w	800306a <HAL_ADC_Init+0x616>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d01c      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d018      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d014      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d010      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	2b14      	cmp	r3, #20
 8002f8e:	d00c      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2b18      	cmp	r3, #24
 8002f96:	d008      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	2b1c      	cmp	r3, #28
 8002f9e:	d004      	beq.n	8002faa <HAL_ADC_Init+0x556>
 8002fa0:	f240 2167 	movw	r1, #615	; 0x267
 8002fa4:	484f      	ldr	r0, [pc, #316]	; (80030e4 <HAL_ADC_Init+0x690>)
 8002fa6:	f7fe faf0 	bl	800158a <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d025      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d021      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d01d      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b60      	cmp	r3, #96	; 0x60
 8002fc8:	d019      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d015      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fd8:	d011      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe0:	d00d      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2be0      	cmp	r3, #224	; 0xe0
 8002fe8:	d009      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	d004      	beq.n	8002ffe <HAL_ADC_Init+0x5aa>
 8002ff4:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002ff8:	483a      	ldr	r0, [pc, #232]	; (80030e4 <HAL_ADC_Init+0x690>)
 8002ffa:	f7fe fac6 	bl	800158a <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_ADC_Init+0x5c6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300e:	d004      	beq.n	800301a <HAL_ADC_Init+0x5c6>
 8003010:	f240 2169 	movw	r1, #617	; 0x269
 8003014:	4833      	ldr	r0, [pc, #204]	; (80030e4 <HAL_ADC_Init+0x690>)
 8003016:	f7fe fab8 	bl	800158a <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	2b01      	cmp	r3, #1
 8003020:	d00a      	beq.n	8003038 <HAL_ADC_Init+0x5e4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003026:	f240 4201 	movw	r2, #1025	; 0x401
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_ADC_Init+0x5e4>
 800302e:	f240 216a 	movw	r1, #618	; 0x26a
 8003032:	482c      	ldr	r0, [pc, #176]	; (80030e4 <HAL_ADC_Init+0x690>)
 8003034:	f7fe faa9 	bl	800158a <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800304e:	4311      	orrs	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800305a:	430a      	orrs	r2, r1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	611a      	str	r2, [r3, #16]
 8003068:	e007      	b.n	800307a <HAL_ADC_Init+0x626>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10c      	bne.n	800309c <HAL_ADC_Init+0x648>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f023 010f 	bic.w	r1, r3, #15
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
 800309a:	e007      	b.n	80030ac <HAL_ADC_Init+0x658>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 020f 	bic.w	r2, r2, #15
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f023 0303 	bic.w	r3, r3, #3
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
 80030bc:	e007      	b.n	80030ce <HAL_ADC_Init+0x67a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f043 0210 	orr.w	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	50040000 	.word	0x50040000
 80030dc:	50040300 	.word	0x50040300
 80030e0:	fff0c007 	.word	0xfff0c007
 80030e4:	0800d404 	.word	0x0800d404

080030e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b0b7      	sub	sp, #220	; 0xdc
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a94      	ldr	r2, [pc, #592]	; (8003354 <HAL_ADC_ConfigChannel+0x26c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x28>
 8003106:	f640 2195 	movw	r1, #2709	; 0xa95
 800310a:	4893      	ldr	r0, [pc, #588]	; (8003358 <HAL_ADC_ConfigChannel+0x270>)
 800310c:	f7fe fa3d 	bl	800158a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d04f      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d04b      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b12      	cmp	r3, #18
 8003126:	d047      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b18      	cmp	r3, #24
 800312e:	d043      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003138:	d03e      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8003142:	d039      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800314c:	d034      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8003156:	d02f      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8003160:	d02a      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316a:	d025      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f240 2206 	movw	r2, #518	; 0x206
 8003174:	4293      	cmp	r3, r2
 8003176:	d01f      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8003180:	d01a      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f240 2212 	movw	r2, #530	; 0x212
 800318a:	4293      	cmp	r3, r2
 800318c:	d014      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8003196:	d00f      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a0:	d00a      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f240 3206 	movw	r2, #774	; 0x306
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xd0>
 80031ae:	f640 2196 	movw	r1, #2710	; 0xa96
 80031b2:	4869      	ldr	r0, [pc, #420]	; (8003358 <HAL_ADC_ConfigChannel+0x270>)
 80031b4:	f7fe f9e9 	bl	800158a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d01c      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d018      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d014      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d010      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d00c      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d008      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b07      	cmp	r3, #7
 80031f6:	d004      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x11a>
 80031f8:	f640 2197 	movw	r1, #2711	; 0xa97
 80031fc:	4856      	ldr	r0, [pc, #344]	; (8003358 <HAL_ADC_ConfigChannel+0x270>)
 80031fe:	f7fe f9c4 	bl	800158a <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b7f      	cmp	r3, #127	; 0x7f
 8003208:	d009      	beq.n	800321e <HAL_ADC_ConfigChannel+0x136>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4a53      	ldr	r2, [pc, #332]	; (800335c <HAL_ADC_ConfigChannel+0x274>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_ADC_ConfigChannel+0x136>
 8003214:	f640 2198 	movw	r1, #2712	; 0xa98
 8003218:	484f      	ldr	r0, [pc, #316]	; (8003358 <HAL_ADC_ConfigChannel+0x270>)
 800321a:	f7fe f9b6 	bl	800158a <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d014      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x168>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x168>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00c      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x168>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d008      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x168>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d004      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x168>
 8003246:	f640 2199 	movw	r1, #2713	; 0xa99
 800324a:	4843      	ldr	r0, [pc, #268]	; (8003358 <HAL_ADC_ConfigChannel+0x270>)
 800324c:	f7fe f99d 	bl	800158a <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	695c      	ldr	r4, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fa95 	bl	8002788 <LL_ADC_GetResolution>
 800325e:	4603      	mov	r3, r0
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	429c      	cmp	r4, r3
 800326c:	d904      	bls.n	8003278 <HAL_ADC_ConfigChannel+0x190>
 800326e:	f640 219a 	movw	r1, #2714	; 0xa9a
 8003272:	4839      	ldr	r0, [pc, #228]	; (8003358 <HAL_ADC_ConfigChannel+0x270>)
 8003274:	f7fe f989 	bl	800158a <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d009      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x1ac>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003286:	2b01      	cmp	r3, #1
 8003288:	d104      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1ac>
 800328a:	f640 219e 	movw	r1, #2718	; 0xa9e
 800328e:	4832      	ldr	r0, [pc, #200]	; (8003358 <HAL_ADC_ConfigChannel+0x270>)
 8003290:	f7fe f97b 	bl	800158a <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a30      	ldr	r2, [pc, #192]	; (800335c <HAL_ADC_ConfigChannel+0x274>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f000 80b1 	beq.w	8003402 <HAL_ADC_ConfigChannel+0x31a>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_ADC_ConfigChannel+0x26c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f040 80a5 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x30e>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <HAL_ADC_ConfigChannel+0x278>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	f000 80f5 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a29      	ldr	r2, [pc, #164]	; (8003364 <HAL_ADC_ConfigChannel+0x27c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f000 80ef 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a27      	ldr	r2, [pc, #156]	; (8003368 <HAL_ADC_ConfigChannel+0x280>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	f000 80e9 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_ADC_ConfigChannel+0x284>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f000 80e3 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <HAL_ADC_ConfigChannel+0x288>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f000 80dd 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_ADC_ConfigChannel+0x28c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f000 80d7 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_ADC_ConfigChannel+0x290>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	f000 80d1 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_ADC_ConfigChannel+0x294>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f000 80cb 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_ADC_ConfigChannel+0x298>)
 8003312:	4293      	cmp	r3, r2
 8003314:	f000 80c5 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_ADC_ConfigChannel+0x29c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	f000 80bf 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_ADC_ConfigChannel+0x2a0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f000 80b9 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <HAL_ADC_ConfigChannel+0x2a4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	f000 80b3 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <HAL_ADC_ConfigChannel+0x2a8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f000 80ad 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a11      	ldr	r2, [pc, #68]	; (8003394 <HAL_ADC_ConfigChannel+0x2ac>)
 800334e:	4293      	cmp	r3, r2
 8003350:	e022      	b.n	8003398 <HAL_ADC_ConfigChannel+0x2b0>
 8003352:	bf00      	nop
 8003354:	50040000 	.word	0x50040000
 8003358:	0800d404 	.word	0x0800d404
 800335c:	407f0000 	.word	0x407f0000
 8003360:	04300002 	.word	0x04300002
 8003364:	08600004 	.word	0x08600004
 8003368:	0c900008 	.word	0x0c900008
 800336c:	10c00010 	.word	0x10c00010
 8003370:	14f00020 	.word	0x14f00020
 8003374:	19200040 	.word	0x19200040
 8003378:	1d500080 	.word	0x1d500080
 800337c:	21800100 	.word	0x21800100
 8003380:	25b00200 	.word	0x25b00200
 8003384:	2a000400 	.word	0x2a000400
 8003388:	2e300800 	.word	0x2e300800
 800338c:	32601000 	.word	0x32601000
 8003390:	36902000 	.word	0x36902000
 8003394:	3ac04000 	.word	0x3ac04000
 8003398:	f000 8083 	beq.w	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a97      	ldr	r2, [pc, #604]	; (8003600 <HAL_ADC_ConfigChannel+0x518>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d07d      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a96      	ldr	r2, [pc, #600]	; (8003604 <HAL_ADC_ConfigChannel+0x51c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d078      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a94      	ldr	r2, [pc, #592]	; (8003608 <HAL_ADC_ConfigChannel+0x520>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d073      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a93      	ldr	r2, [pc, #588]	; (800360c <HAL_ADC_ConfigChannel+0x524>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d06e      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a91      	ldr	r2, [pc, #580]	; (8003610 <HAL_ADC_ConfigChannel+0x528>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d069      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a90      	ldr	r2, [pc, #576]	; (8003614 <HAL_ADC_ConfigChannel+0x52c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d064      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a8e      	ldr	r2, [pc, #568]	; (8003618 <HAL_ADC_ConfigChannel+0x530>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d05f      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a8d      	ldr	r2, [pc, #564]	; (800361c <HAL_ADC_ConfigChannel+0x534>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d05a      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a8b      	ldr	r2, [pc, #556]	; (8003620 <HAL_ADC_ConfigChannel+0x538>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d055      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 80033f6:	f640 21a3 	movw	r1, #2723	; 0xaa3
 80033fa:	488a      	ldr	r0, [pc, #552]	; (8003624 <HAL_ADC_ConfigChannel+0x53c>)
 80033fc:	f7fe f8c5 	bl	800158a <assert_failed>
 8003400:	e04f      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a88      	ldr	r2, [pc, #544]	; (8003628 <HAL_ADC_ConfigChannel+0x540>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d04a      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a86      	ldr	r2, [pc, #536]	; (800362c <HAL_ADC_ConfigChannel+0x544>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d045      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a85      	ldr	r2, [pc, #532]	; (8003630 <HAL_ADC_ConfigChannel+0x548>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d040      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_ADC_ConfigChannel+0x54c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d03b      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a82      	ldr	r2, [pc, #520]	; (8003638 <HAL_ADC_ConfigChannel+0x550>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d036      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a80      	ldr	r2, [pc, #512]	; (800363c <HAL_ADC_ConfigChannel+0x554>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d031      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7f      	ldr	r2, [pc, #508]	; (8003640 <HAL_ADC_ConfigChannel+0x558>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d02c      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7d      	ldr	r2, [pc, #500]	; (8003644 <HAL_ADC_ConfigChannel+0x55c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d027      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7c      	ldr	r2, [pc, #496]	; (8003648 <HAL_ADC_ConfigChannel+0x560>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d022      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a7a      	ldr	r2, [pc, #488]	; (800364c <HAL_ADC_ConfigChannel+0x564>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a79      	ldr	r2, [pc, #484]	; (8003650 <HAL_ADC_ConfigChannel+0x568>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d018      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a77      	ldr	r2, [pc, #476]	; (8003654 <HAL_ADC_ConfigChannel+0x56c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a76      	ldr	r2, [pc, #472]	; (8003658 <HAL_ADC_ConfigChannel+0x570>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a74      	ldr	r2, [pc, #464]	; (800365c <HAL_ADC_ConfigChannel+0x574>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5b      	ldr	r2, [pc, #364]	; (8003600 <HAL_ADC_ConfigChannel+0x518>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x3ba>
 8003498:	f640 21a7 	movw	r1, #2727	; 0xaa7
 800349c:	4861      	ldr	r0, [pc, #388]	; (8003624 <HAL_ADC_ConfigChannel+0x53c>)
 800349e:	f7fe f874 	bl	800158a <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x3c8>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e3c0      	b.n	8003c32 <HAL_ADC_ConfigChannel+0xb4a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff faa2 	bl	8002a06 <LL_ADC_REG_IsConversionOngoing>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 83a5 	bne.w	8003c14 <HAL_ADC_ConfigChannel+0xb2c>
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7ff f9b9 	bl	800284e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fa90 	bl	8002a06 <LL_ADC_REG_IsConversionOngoing>
 80034e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fa9c 	bl	8002a2c <LL_ADC_INJ_IsConversionOngoing>
 80034f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 81d6 	bne.w	80038ae <HAL_ADC_ConfigChannel+0x7c6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 81d1 	bne.w	80038ae <HAL_ADC_ConfigChannel+0x7c6>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	461a      	mov	r2, r3
 800351a:	f7ff f9c4 	bl	80028a6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d00a      	beq.n	8003556 <HAL_ADC_ConfigChannel+0x46e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6919      	ldr	r1, [r3, #16]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003550:	f7ff f928 	bl	80027a4 <LL_ADC_SetOffset>
 8003554:	e1ab      	b.n	80038ae <HAL_ADC_ConfigChannel+0x7c6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f945 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x49a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f93a 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003578:	4603      	mov	r3, r0
 800357a:	0e9b      	lsrs	r3, r3, #26
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	e01e      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4d8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff f92f 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800358e:	4603      	mov	r3, r0
 8003590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x4cc>
  {
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e004      	b.n	80035be <HAL_ADC_ConfigChannel+0x4d6>
  }
  return __builtin_clz(value);
 80035b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x4f0>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	e048      	b.n	800366a <HAL_ADC_ConfigChannel+0x582>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80035ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80035f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d131      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x578>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e034      	b.n	800366a <HAL_ADC_ConfigChannel+0x582>
 8003600:	3ef08000 	.word	0x3ef08000
 8003604:	43210000 	.word	0x43210000
 8003608:	47520000 	.word	0x47520000
 800360c:	4b840000 	.word	0x4b840000
 8003610:	80000001 	.word	0x80000001
 8003614:	c7520000 	.word	0xc7520000
 8003618:	cb840000 	.word	0xcb840000
 800361c:	c75a0000 	.word	0xc75a0000
 8003620:	cb8c0000 	.word	0xcb8c0000
 8003624:	0800d404 	.word	0x0800d404
 8003628:	04300002 	.word	0x04300002
 800362c:	08600004 	.word	0x08600004
 8003630:	0c900008 	.word	0x0c900008
 8003634:	10c00010 	.word	0x10c00010
 8003638:	14f00020 	.word	0x14f00020
 800363c:	19200040 	.word	0x19200040
 8003640:	1d500080 	.word	0x1d500080
 8003644:	21800100 	.word	0x21800100
 8003648:	25b00200 	.word	0x25b00200
 800364c:	2a000400 	.word	0x2a000400
 8003650:	2e300800 	.word	0x2e300800
 8003654:	32601000 	.word	0x32601000
 8003658:	36902000 	.word	0x36902000
 800365c:	3ac04000 	.word	0x3ac04000
  return __builtin_clz(value);
 8003660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800366a:	429a      	cmp	r2, r3
 800366c:	d106      	bne.n	800367c <HAL_ADC_ConfigChannel+0x594>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f8ce 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f8b2 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x5c0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff f8a7 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	f003 021f 	and.w	r2, r3, #31
 80036a6:	e01e      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x5fe>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f89c 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80036c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80036ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x5f2>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e004      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80036da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d105      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x616>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0e9b      	lsrs	r3, r3, #26
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	e018      	b.n	8003730 <HAL_ADC_ConfigChannel+0x648>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003712:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800371a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x63e>
    return 32U;
 8003722:	2320      	movs	r3, #32
 8003724:	e004      	b.n	8003730 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8003726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003730:	429a      	cmp	r2, r3
 8003732:	d106      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x65a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2200      	movs	r2, #0
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff f86b 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f84f 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <HAL_ADC_ConfigChannel+0x686>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f844 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	0e9b      	lsrs	r3, r3, #26
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	e01e      	b.n	80037ac <HAL_ADC_ConfigChannel+0x6c4>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2102      	movs	r1, #2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f839 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800378c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x6b8>
    return 32U;
 800379c:	2320      	movs	r3, #32
 800379e:	e004      	b.n	80037aa <HAL_ADC_ConfigChannel+0x6c2>
  return __builtin_clz(value);
 80037a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x6dc>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0e9b      	lsrs	r3, r3, #26
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	e016      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x70a>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80037d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80037dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x700>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e004      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x70a>
  return __builtin_clz(value);
 80037e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d106      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x71c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f80a 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2103      	movs	r1, #3
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe ffee 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003810:	4603      	mov	r3, r0
 8003812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x748>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2103      	movs	r1, #3
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe ffe3 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003826:	4603      	mov	r3, r0
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	f003 021f 	and.w	r2, r3, #31
 800382e:	e017      	b.n	8003860 <HAL_ADC_ConfigChannel+0x778>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2103      	movs	r1, #3
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe ffd8 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800384a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800384c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x76e>
    return 32U;
 8003852:	2320      	movs	r3, #32
 8003854:	e003      	b.n	800385e <HAL_ADC_ConfigChannel+0x776>
  return __builtin_clz(value);
 8003856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x790>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	0e9b      	lsrs	r3, r3, #26
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	e011      	b.n	800389c <HAL_ADC_ConfigChannel+0x7b4>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003888:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x7ac>
    return 32U;
 8003890:	2320      	movs	r3, #32
 8003892:	e003      	b.n	800389c <HAL_ADC_ConfigChannel+0x7b4>
  return __builtin_clz(value);
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800389c:	429a      	cmp	r2, r3
 800389e:	d106      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x7c6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2103      	movs	r1, #3
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe ffb5 	bl	8002818 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f894 	bl	80029e0 <LL_ADC_IsEnabled>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 8140 	bne.w	8003b40 <HAL_ADC_ConfigChannel+0xa58>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	461a      	mov	r2, r3
 80038ce:	f7ff f815 	bl	80028fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4a8f      	ldr	r2, [pc, #572]	; (8003b14 <HAL_ADC_ConfigChannel+0xa2c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	f040 8131 	bne.w	8003b40 <HAL_ADC_ConfigChannel+0xa58>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x81e>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0e9b      	lsrs	r3, r3, #26
 80038f4:	3301      	adds	r3, #1
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	bf94      	ite	ls
 80038fe:	2301      	movls	r3, #1
 8003900:	2300      	movhi	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e019      	b.n	800393a <HAL_ADC_ConfigChannel+0x852>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003916:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x83a>
    return 32U;
 800391e:	2320      	movs	r3, #32
 8003920:	e003      	b.n	800392a <HAL_ADC_ConfigChannel+0x842>
  return __builtin_clz(value);
 8003922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003924:	fab3 f383 	clz	r3, r3
 8003928:	b2db      	uxtb	r3, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2b09      	cmp	r3, #9
 8003932:	bf94      	ite	ls
 8003934:	2301      	movls	r3, #1
 8003936:	2300      	movhi	r3, #0
 8003938:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393a:	2b00      	cmp	r3, #0
 800393c:	d079      	beq.n	8003a32 <HAL_ADC_ConfigChannel+0x94a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <HAL_ADC_ConfigChannel+0x872>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	3301      	adds	r3, #1
 8003952:	069b      	lsls	r3, r3, #26
 8003954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003958:	e015      	b.n	8003986 <HAL_ADC_ConfigChannel+0x89e>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x88e>
    return 32U;
 8003972:	2320      	movs	r3, #32
 8003974:	e003      	b.n	800397e <HAL_ADC_ConfigChannel+0x896>
  return __builtin_clz(value);
 8003976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	3301      	adds	r3, #1
 8003980:	069b      	lsls	r3, r3, #26
 8003982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x8be>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0e9b      	lsrs	r3, r3, #26
 8003998:	3301      	adds	r3, #1
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	e017      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x8ee>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80039b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x8da>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e003      	b.n	80039ca <HAL_ADC_ConfigChannel+0x8e2>
  return __builtin_clz(value);
 80039c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	ea42 0103 	orr.w	r1, r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x914>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0e9b      	lsrs	r3, r3, #26
 80039ec:	3301      	adds	r3, #1
 80039ee:	f003 021f 	and.w	r2, r3, #31
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	051b      	lsls	r3, r3, #20
 80039fa:	e018      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x946>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x930>
    return 32U;
 8003a14:	2320      	movs	r3, #32
 8003a16:	e003      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x938>
  return __builtin_clz(value);
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	f003 021f 	and.w	r2, r3, #31
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	e081      	b.n	8003b36 <HAL_ADC_ConfigChannel+0xa4e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x966>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	3301      	adds	r3, #1
 8003a46:	069b      	lsls	r3, r3, #26
 8003a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a4c:	e015      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x992>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x982>
    return 32U;
 8003a66:	2320      	movs	r3, #32
 8003a68:	e003      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x98a>
  return __builtin_clz(value);
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	fab3 f383 	clz	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	069b      	lsls	r3, r3, #26
 8003a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x9b2>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	e017      	b.n	8003aca <HAL_ADC_ConfigChannel+0x9e2>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
  return result;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x9ce>
    return 32U;
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	e003      	b.n	8003abe <HAL_ADC_ConfigChannel+0x9d6>
  return __builtin_clz(value);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0xa0e>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	0e9b      	lsrs	r3, r3, #26
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f003 021f 	and.w	r2, r3, #31
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4413      	add	r3, r2
 8003aec:	3b1e      	subs	r3, #30
 8003aee:	051b      	lsls	r3, r3, #20
 8003af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003af4:	e01e      	b.n	8003b34 <HAL_ADC_ConfigChannel+0xa4c>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	613b      	str	r3, [r7, #16]
  return result;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0xa30>
    return 32U;
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e006      	b.n	8003b20 <HAL_ADC_ConfigChannel+0xa38>
 8003b12:	bf00      	nop
 8003b14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	3301      	adds	r3, #1
 8003b22:	f003 021f 	and.w	r2, r3, #31
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3b1e      	subs	r3, #30
 8003b2e:	051b      	lsls	r3, r3, #20
 8003b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b34:	430b      	orrs	r3, r1
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f7fe feb3 	bl	80028a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <HAL_ADC_ConfigChannel+0xb54>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d06c      	beq.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4c:	483c      	ldr	r0, [pc, #240]	; (8003c40 <HAL_ADC_ConfigChannel+0xb58>)
 8003b4e:	f7fe fe0d 	bl	800276c <LL_ADC_GetCommonPathInternalCh>
 8003b52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a3a      	ldr	r2, [pc, #232]	; (8003c44 <HAL_ADC_ConfigChannel+0xb5c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d127      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0xac8>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d121      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0xac8>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a35      	ldr	r2, [pc, #212]	; (8003c48 <HAL_ADC_ConfigChannel+0xb60>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d157      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b7e:	4619      	mov	r1, r3
 8003b80:	482f      	ldr	r0, [pc, #188]	; (8003c40 <HAL_ADC_ConfigChannel+0xb58>)
 8003b82:	f7fe fde0 	bl	8002746 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <HAL_ADC_ConfigChannel+0xb64>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	4a30      	ldr	r2, [pc, #192]	; (8003c50 <HAL_ADC_ConfigChannel+0xb68>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ba0:	e002      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0xac0>
          {
            wait_loop_index--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f9      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0xaba>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bae:	e03a      	b.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_ADC_ConfigChannel+0xb6c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d113      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0xafa>
 8003bba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0xafa>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <HAL_ADC_ConfigChannel+0xb60>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d12a      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4819      	ldr	r0, [pc, #100]	; (8003c40 <HAL_ADC_ConfigChannel+0xb58>)
 8003bdc:	f7fe fdb3 	bl	8002746 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003be0:	e021      	b.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_ADC_ConfigChannel+0xb70>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d11c      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d116      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <HAL_ADC_ConfigChannel+0xb60>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d111      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	480c      	ldr	r0, [pc, #48]	; (8003c40 <HAL_ADC_ConfigChannel+0xb58>)
 8003c0e:	f7fe fd9a 	bl	8002746 <LL_ADC_SetCommonPathInternalCh>
 8003c12:	e008      	b.n	8003c26 <HAL_ADC_ConfigChannel+0xb3e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	37dc      	adds	r7, #220	; 0xdc
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd90      	pop	{r4, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	80080000 	.word	0x80080000
 8003c40:	50040300 	.word	0x50040300
 8003c44:	c7520000 	.word	0xc7520000
 8003c48:	50040000 	.word	0x50040000
 8003c4c:	20000004 	.word	0x20000004
 8003c50:	053e2d63 	.word	0x053e2d63
 8003c54:	cb840000 	.word	0xcb840000
 8003c58:	80000001 	.word	0x80000001

08003c5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e23d      	b.n	80040ea <HAL_CAN_Init+0x48e>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a92      	ldr	r2, [pc, #584]	; (8003ebc <HAL_CAN_Init+0x260>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_CAN_Init+0x26>
 8003c78:	f240 111d 	movw	r1, #285	; 0x11d
 8003c7c:	4890      	ldr	r0, [pc, #576]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003c7e:	f7fd fc84 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7e1b      	ldrb	r3, [r3, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_CAN_Init+0x40>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7e1b      	ldrb	r3, [r3, #24]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d004      	beq.n	8003c9c <HAL_CAN_Init+0x40>
 8003c92:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003c96:	488a      	ldr	r0, [pc, #552]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003c98:	f7fd fc77 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7e5b      	ldrb	r3, [r3, #25]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_CAN_Init+0x5a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e5b      	ldrb	r3, [r3, #25]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d004      	beq.n	8003cb6 <HAL_CAN_Init+0x5a>
 8003cac:	f240 111f 	movw	r1, #287	; 0x11f
 8003cb0:	4883      	ldr	r0, [pc, #524]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003cb2:	f7fd fc6a 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7e9b      	ldrb	r3, [r3, #26]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_CAN_Init+0x74>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7e9b      	ldrb	r3, [r3, #26]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d004      	beq.n	8003cd0 <HAL_CAN_Init+0x74>
 8003cc6:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003cca:	487d      	ldr	r0, [pc, #500]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003ccc:	f7fd fc5d 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	7edb      	ldrb	r3, [r3, #27]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_CAN_Init+0x8e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7edb      	ldrb	r3, [r3, #27]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d004      	beq.n	8003cea <HAL_CAN_Init+0x8e>
 8003ce0:	f240 1121 	movw	r1, #289	; 0x121
 8003ce4:	4876      	ldr	r0, [pc, #472]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003ce6:	f7fd fc50 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7f1b      	ldrb	r3, [r3, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_CAN_Init+0xa8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7f1b      	ldrb	r3, [r3, #28]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d004      	beq.n	8003d04 <HAL_CAN_Init+0xa8>
 8003cfa:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003cfe:	4870      	ldr	r0, [pc, #448]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003d00:	f7fd fc43 	bl	800158a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7f5b      	ldrb	r3, [r3, #29]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_CAN_Init+0xc2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	7f5b      	ldrb	r3, [r3, #29]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d004      	beq.n	8003d1e <HAL_CAN_Init+0xc2>
 8003d14:	f240 1123 	movw	r1, #291	; 0x123
 8003d18:	4869      	ldr	r0, [pc, #420]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003d1a:	f7fd fc36 	bl	800158a <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d013      	beq.n	8003d4e <HAL_CAN_Init+0xf2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d00e      	beq.n	8003d4e <HAL_CAN_Init+0xf2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d38:	d009      	beq.n	8003d4e <HAL_CAN_Init+0xf2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d42:	d004      	beq.n	8003d4e <HAL_CAN_Init+0xf2>
 8003d44:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003d48:	485d      	ldr	r0, [pc, #372]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003d4a:	f7fd fc1e 	bl	800158a <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d013      	beq.n	8003d7e <HAL_CAN_Init+0x122>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d5e:	d00e      	beq.n	8003d7e <HAL_CAN_Init+0x122>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d68:	d009      	beq.n	8003d7e <HAL_CAN_Init+0x122>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d72:	d004      	beq.n	8003d7e <HAL_CAN_Init+0x122>
 8003d74:	f240 1125 	movw	r1, #293	; 0x125
 8003d78:	4851      	ldr	r0, [pc, #324]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003d7a:	f7fd fc06 	bl	800158a <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d04f      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8e:	d04a      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d98:	d045      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003da2:	d040      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dac:	d03b      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db6:	d036      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003dc0:	d031      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8003dca:	d02c      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dd4:	d027      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8003dde:	d022      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8003de8:	d01d      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8003df2:	d018      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dfc:	d013      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003e06:	d00e      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e10:	d009      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8003e1a:	d004      	beq.n	8003e26 <HAL_CAN_Init+0x1ca>
 8003e1c:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003e20:	4827      	ldr	r0, [pc, #156]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003e22:	f7fd fbb2 	bl	800158a <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d027      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e36:	d022      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e40:	d01d      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e4a:	d018      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e54:	d013      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003e5e:	d00e      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e68:	d009      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003e72:	d004      	beq.n	8003e7e <HAL_CAN_Init+0x222>
 8003e74:	f240 1127 	movw	r1, #295	; 0x127
 8003e78:	4811      	ldr	r0, [pc, #68]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003e7a:	f7fd fb86 	bl	800158a <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <HAL_CAN_Init+0x234>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d904      	bls.n	8003e9a <HAL_CAN_Init+0x23e>
 8003e90:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003e94:	480a      	ldr	r0, [pc, #40]	; (8003ec0 <HAL_CAN_Init+0x264>)
 8003e96:	f7fd fb78 	bl	800158a <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d13c      	bne.n	8003f20 <HAL_CAN_Init+0x2c4>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a06      	ldr	r2, [pc, #24]	; (8003ec4 <HAL_CAN_Init+0x268>)
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a06      	ldr	r2, [pc, #24]	; (8003ec8 <HAL_CAN_Init+0x26c>)
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <HAL_CAN_Init+0x270>)
 8003eb6:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	e009      	b.n	8003ed0 <HAL_CAN_Init+0x274>
 8003ebc:	40006400 	.word	0x40006400
 8003ec0:	0800d478 	.word	0x0800d478
 8003ec4:	08001091 	.word	0x08001091
 8003ec8:	08004699 	.word	0x08004699
 8003ecc:	080046ad 	.word	0x080046ad
 8003ed0:	4a88      	ldr	r2, [pc, #544]	; (80040f4 <HAL_CAN_Init+0x498>)
 8003ed2:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a88      	ldr	r2, [pc, #544]	; (80040f8 <HAL_CAN_Init+0x49c>)
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a87      	ldr	r2, [pc, #540]	; (80040fc <HAL_CAN_Init+0x4a0>)
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a87      	ldr	r2, [pc, #540]	; (8004100 <HAL_CAN_Init+0x4a4>)
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a86      	ldr	r2, [pc, #536]	; (8004104 <HAL_CAN_Init+0x4a8>)
 8003eea:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a86      	ldr	r2, [pc, #536]	; (8004108 <HAL_CAN_Init+0x4ac>)
 8003ef0:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a85      	ldr	r2, [pc, #532]	; (800410c <HAL_CAN_Init+0x4b0>)
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a85      	ldr	r2, [pc, #532]	; (8004110 <HAL_CAN_Init+0x4b4>)
 8003efc:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a84      	ldr	r2, [pc, #528]	; (8004114 <HAL_CAN_Init+0x4b8>)
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a84      	ldr	r2, [pc, #528]	; (8004118 <HAL_CAN_Init+0x4bc>)
 8003f08:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <HAL_CAN_Init+0x2bc>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a81      	ldr	r2, [pc, #516]	; (800411c <HAL_CAN_Init+0x4c0>)
 8003f16:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f30:	f7fe fbea 	bl	8002708 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f36:	e012      	b.n	8003f5e <HAL_CAN_Init+0x302>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f38:	f7fe fbe6 	bl	8002708 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b0a      	cmp	r3, #10
 8003f44:	d90b      	bls.n	8003f5e <HAL_CAN_Init+0x302>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2205      	movs	r2, #5
 8003f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0c5      	b.n	80040ea <HAL_CAN_Init+0x48e>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0e5      	beq.n	8003f38 <HAL_CAN_Init+0x2dc>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0202 	bic.w	r2, r2, #2
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f7c:	f7fe fbc4 	bl	8002708 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f82:	e012      	b.n	8003faa <HAL_CAN_Init+0x34e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f84:	f7fe fbc0 	bl	8002708 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b0a      	cmp	r3, #10
 8003f90:	d90b      	bls.n	8003faa <HAL_CAN_Init+0x34e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e09f      	b.n	80040ea <HAL_CAN_Init+0x48e>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <HAL_CAN_Init+0x328>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	7e1b      	ldrb	r3, [r3, #24]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d108      	bne.n	8003fd2 <HAL_CAN_Init+0x376>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e007      	b.n	8003fe2 <HAL_CAN_Init+0x386>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7e5b      	ldrb	r3, [r3, #25]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d108      	bne.n	8003ffc <HAL_CAN_Init+0x3a0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e007      	b.n	800400c <HAL_CAN_Init+0x3b0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7e9b      	ldrb	r3, [r3, #26]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <HAL_CAN_Init+0x3ca>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0220 	orr.w	r2, r2, #32
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e007      	b.n	8004036 <HAL_CAN_Init+0x3da>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0220 	bic.w	r2, r2, #32
 8004034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7edb      	ldrb	r3, [r3, #27]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d108      	bne.n	8004050 <HAL_CAN_Init+0x3f4>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0210 	bic.w	r2, r2, #16
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e007      	b.n	8004060 <HAL_CAN_Init+0x404>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0210 	orr.w	r2, r2, #16
 800405e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	7f1b      	ldrb	r3, [r3, #28]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d108      	bne.n	800407a <HAL_CAN_Init+0x41e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0208 	orr.w	r2, r2, #8
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e007      	b.n	800408a <HAL_CAN_Init+0x42e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0208 	bic.w	r2, r2, #8
 8004088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7f5b      	ldrb	r3, [r3, #29]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d108      	bne.n	80040a4 <HAL_CAN_Init+0x448>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0204 	orr.w	r2, r2, #4
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e007      	b.n	80040b4 <HAL_CAN_Init+0x458>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	1e5a      	subs	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	080046c1 	.word	0x080046c1
 80040f8:	08004621 	.word	0x08004621
 80040fc:	08004635 	.word	0x08004635
 8004100:	08004649 	.word	0x08004649
 8004104:	0800465d 	.word	0x0800465d
 8004108:	08004671 	.word	0x08004671
 800410c:	08004685 	.word	0x08004685
 8004110:	080046d5 	.word	0x080046d5
 8004114:	080046e9 	.word	0x080046e9
 8004118:	080046fd 	.word	0x080046fd
 800411c:	08001009 	.word	0x08001009

08004120 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004136:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d003      	beq.n	8004146 <HAL_CAN_ConfigFilter+0x26>
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b02      	cmp	r3, #2
 8004142:	f040 810f 	bne.w	8004364 <HAL_CAN_ConfigFilter+0x244>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d304      	bcc.n	800415a <HAL_CAN_ConfigFilter+0x3a>
 8004150:	f240 3151 	movw	r1, #849	; 0x351
 8004154:	4889      	ldr	r0, [pc, #548]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 8004156:	f7fd fa18 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004162:	d304      	bcc.n	800416e <HAL_CAN_ConfigFilter+0x4e>
 8004164:	f240 3152 	movw	r1, #850	; 0x352
 8004168:	4884      	ldr	r0, [pc, #528]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 800416a:	f7fd fa0e 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004176:	d304      	bcc.n	8004182 <HAL_CAN_ConfigFilter+0x62>
 8004178:	f240 3153 	movw	r1, #851	; 0x353
 800417c:	487f      	ldr	r0, [pc, #508]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 800417e:	f7fd fa04 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d304      	bcc.n	8004196 <HAL_CAN_ConfigFilter+0x76>
 800418c:	f44f 7155 	mov.w	r1, #852	; 0x354
 8004190:	487a      	ldr	r0, [pc, #488]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 8004192:	f7fd f9fa 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_CAN_ConfigFilter+0x90>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d004      	beq.n	80041b0 <HAL_CAN_ConfigFilter+0x90>
 80041a6:	f240 3155 	movw	r1, #853	; 0x355
 80041aa:	4874      	ldr	r0, [pc, #464]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 80041ac:	f7fd f9ed 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_CAN_ConfigFilter+0xaa>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d004      	beq.n	80041ca <HAL_CAN_ConfigFilter+0xaa>
 80041c0:	f240 3156 	movw	r1, #854	; 0x356
 80041c4:	486d      	ldr	r0, [pc, #436]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 80041c6:	f7fd f9e0 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_CAN_ConfigFilter+0xc4>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d004      	beq.n	80041e4 <HAL_CAN_ConfigFilter+0xc4>
 80041da:	f240 3157 	movw	r1, #855	; 0x357
 80041de:	4867      	ldr	r0, [pc, #412]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 80041e0:	f7fd f9d3 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_CAN_ConfigFilter+0xde>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d004      	beq.n	80041fe <HAL_CAN_ConfigFilter+0xde>
 80041f4:	f44f 7156 	mov.w	r1, #856	; 0x358
 80041f8:	4860      	ldr	r0, [pc, #384]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 80041fa:	f7fd f9c6 	bl	800158a <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
#else
    /* CAN1 is single instance with 14 dedicated filters banks */

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b0d      	cmp	r3, #13
 8004204:	d904      	bls.n	8004210 <HAL_CAN_ConfigFilter+0xf0>
 8004206:	f240 3166 	movw	r1, #870	; 0x366
 800420a:	485c      	ldr	r0, [pc, #368]	; (800437c <HAL_CAN_ConfigFilter+0x25c>)
 800420c:	f7fd f9bd 	bl	800158a <assert_failed>
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2201      	movs	r2, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43db      	mvns	r3, r3
 800423a:	401a      	ands	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d123      	bne.n	8004292 <HAL_CAN_ConfigFilter+0x172>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43db      	mvns	r3, r3
 8004254:	401a      	ands	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800426c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3248      	adds	r2, #72	; 0x48
 8004272:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004286:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004288:	6979      	ldr	r1, [r7, #20]
 800428a:	3348      	adds	r3, #72	; 0x48
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	440b      	add	r3, r1
 8004290:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d122      	bne.n	80042e0 <HAL_CAN_ConfigFilter+0x1c0>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80042ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3248      	adds	r2, #72	; 0x48
 80042c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042d6:	6979      	ldr	r1, [r7, #20]
 80042d8:	3348      	adds	r3, #72	; 0x48
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_CAN_ConfigFilter+0x1dc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80042fa:	e007      	b.n	800430c <HAL_CAN_ConfigFilter+0x1ec>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	431a      	orrs	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_CAN_ConfigFilter+0x208>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004326:	e007      	b.n	8004338 <HAL_CAN_ConfigFilter+0x218>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	431a      	orrs	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <HAL_CAN_ConfigFilter+0x230>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	431a      	orrs	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004356:	f023 0201 	bic.w	r2, r3, #1
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	e006      	b.n	8004372 <HAL_CAN_ConfigFilter+0x252>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	0800d478 	.word	0x0800d478

08004380 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004394:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_CAN_GetRxMessage+0x2c>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d004      	beq.n	80043ac <HAL_CAN_GetRxMessage+0x2c>
 80043a2:	f240 51ce 	movw	r1, #1486	; 0x5ce
 80043a6:	4884      	ldr	r0, [pc, #528]	; (80045b8 <HAL_CAN_GetRxMessage+0x238>)
 80043a8:	f7fd f8ef 	bl	800158a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d003      	beq.n	80043ba <HAL_CAN_GetRxMessage+0x3a>
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	f040 80f3 	bne.w	80045a0 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10e      	bne.n	80043de <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d116      	bne.n	80043fc <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0e7      	b.n	80045ae <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0d8      	b.n	80045ae <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	331b      	adds	r3, #27
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4413      	add	r3, r2
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0204 	and.w	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10c      	bne.n	8004434 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	331b      	adds	r3, #27
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0d5b      	lsrs	r3, r3, #21
 800442a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e00b      	b.n	800444c <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	331b      	adds	r3, #27
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	4413      	add	r3, r2
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	331b      	adds	r3, #27
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	4413      	add	r3, r2
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0202 	and.w	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	331b      	adds	r3, #27
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	4413      	add	r3, r2
 800446e:	3304      	adds	r3, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 020f 	and.w	r2, r3, #15
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	331b      	adds	r3, #27
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	b2da      	uxtb	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	331b      	adds	r3, #27
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	4413      	add	r3, r2
 800449e:	3304      	adds	r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0a1a      	lsrs	r2, r3, #8
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	0c1a      	lsrs	r2, r3, #16
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	3302      	adds	r3, #2
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0e1a      	lsrs	r2, r3, #24
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	3303      	adds	r3, #3
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4413      	add	r3, r2
 8004518:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	3304      	adds	r3, #4
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4413      	add	r3, r2
 8004530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0a1a      	lsrs	r2, r3, #8
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	3305      	adds	r3, #5
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	4413      	add	r3, r2
 800454a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0c1a      	lsrs	r2, r3, #16
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	3306      	adds	r3, #6
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	4413      	add	r3, r2
 8004564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	0e1a      	lsrs	r2, r3, #24
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	3307      	adds	r3, #7
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0220 	orr.w	r2, r2, #32
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e007      	b.n	800459c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0220 	orr.w	r2, r2, #32
 800459a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e006      	b.n	80045ae <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	0800d478 	.word	0x0800d478

080045bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <HAL_CAN_ActivateNotification+0x5c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d904      	bls.n	80045e0 <HAL_CAN_ActivateNotification+0x24>
 80045d6:	f240 615f 	movw	r1, #1631	; 0x65f
 80045da:	4810      	ldr	r0, [pc, #64]	; (800461c <HAL_CAN_ActivateNotification+0x60>)
 80045dc:	f7fc ffd5 	bl	800158a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d002      	beq.n	80045ec <HAL_CAN_ActivateNotification+0x30>
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d109      	bne.n	8004600 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6959      	ldr	r1, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e006      	b.n	800460e <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
  }
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	00038f7f 	.word	0x00038f7f
 800461c:	0800d478 	.word	0x0800d478

08004620 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <__NVIC_SetPriorityGrouping+0x44>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800472c:	4013      	ands	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800473c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004742:	4a04      	ldr	r2, [pc, #16]	; (8004754 <__NVIC_SetPriorityGrouping+0x44>)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	60d3      	str	r3, [r2, #12]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <__NVIC_GetPriorityGrouping+0x18>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 0307 	and.w	r3, r3, #7
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db0b      	blt.n	800479e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	4907      	ldr	r1, [pc, #28]	; (80047ac <__NVIC_EnableIRQ+0x38>)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2001      	movs	r0, #1
 8004796:	fa00 f202 	lsl.w	r2, r0, r2
 800479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db0a      	blt.n	80047da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	490c      	ldr	r1, [pc, #48]	; (80047fc <__NVIC_SetPriority+0x4c>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	440b      	add	r3, r1
 80047d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d8:	e00a      	b.n	80047f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4908      	ldr	r1, [pc, #32]	; (8004800 <__NVIC_SetPriority+0x50>)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	3b04      	subs	r3, #4
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	440b      	add	r3, r1
 80047ee:	761a      	strb	r2, [r3, #24]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	e000e100 	.word	0xe000e100
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	2b04      	cmp	r3, #4
 8004820:	bf28      	it	cs
 8004822:	2304      	movcs	r3, #4
 8004824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3304      	adds	r3, #4
 800482a:	2b06      	cmp	r3, #6
 800482c:	d902      	bls.n	8004834 <NVIC_EncodePriority+0x30>
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3b03      	subs	r3, #3
 8004832:	e000      	b.n	8004836 <NVIC_EncodePriority+0x32>
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	401a      	ands	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800484c:	f04f 31ff 	mov.w	r1, #4294967295
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43d9      	mvns	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800485c:	4313      	orrs	r3, r2
         );
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b07      	cmp	r3, #7
 8004878:	d00f      	beq.n	800489a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b06      	cmp	r3, #6
 800487e:	d00c      	beq.n	800489a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b05      	cmp	r3, #5
 8004884:	d009      	beq.n	800489a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d006      	beq.n	800489a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d003      	beq.n	800489a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004892:	21a6      	movs	r1, #166	; 0xa6
 8004894:	4804      	ldr	r0, [pc, #16]	; (80048a8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004896:	f7fc fe78 	bl	800158a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff ff38 	bl	8004710 <__NVIC_SetPriorityGrouping>
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	0800d4ec 	.word	0x0800d4ec

080048ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d903      	bls.n	80048cc <HAL_NVIC_SetPriority+0x20>
 80048c4:	21be      	movs	r1, #190	; 0xbe
 80048c6:	480e      	ldr	r0, [pc, #56]	; (8004900 <HAL_NVIC_SetPriority+0x54>)
 80048c8:	f7fc fe5f 	bl	800158a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	d903      	bls.n	80048da <HAL_NVIC_SetPriority+0x2e>
 80048d2:	21bf      	movs	r1, #191	; 0xbf
 80048d4:	480a      	ldr	r0, [pc, #40]	; (8004900 <HAL_NVIC_SetPriority+0x54>)
 80048d6:	f7fc fe58 	bl	800158a <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80048da:	f7ff ff3d 	bl	8004758 <__NVIC_GetPriorityGrouping>
 80048de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	6978      	ldr	r0, [r7, #20]
 80048e6:	f7ff ff8d 	bl	8004804 <NVIC_EncodePriority>
 80048ea:	4602      	mov	r2, r0
 80048ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff ff5c 	bl	80047b0 <__NVIC_SetPriority>
}
 80048f8:	bf00      	nop
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	0800d4ec 	.word	0x0800d4ec

08004904 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	2b00      	cmp	r3, #0
 8004914:	da03      	bge.n	800491e <HAL_NVIC_EnableIRQ+0x1a>
 8004916:	21d2      	movs	r1, #210	; 0xd2
 8004918:	4805      	ldr	r0, [pc, #20]	; (8004930 <HAL_NVIC_EnableIRQ+0x2c>)
 800491a:	f7fc fe36 	bl	800158a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ff26 	bl	8004774 <__NVIC_EnableIRQ>
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	0800d4ec 	.word	0x0800d4ec

08004934 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e19d      	b.n	8004c82 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a79      	ldr	r2, [pc, #484]	; (8004b30 <HAL_DMA_Init+0x1fc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d044      	beq.n	80049da <HAL_DMA_Init+0xa6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_DMA_Init+0x200>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d03f      	beq.n	80049da <HAL_DMA_Init+0xa6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a76      	ldr	r2, [pc, #472]	; (8004b38 <HAL_DMA_Init+0x204>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d03a      	beq.n	80049da <HAL_DMA_Init+0xa6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a74      	ldr	r2, [pc, #464]	; (8004b3c <HAL_DMA_Init+0x208>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d035      	beq.n	80049da <HAL_DMA_Init+0xa6>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a73      	ldr	r2, [pc, #460]	; (8004b40 <HAL_DMA_Init+0x20c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d030      	beq.n	80049da <HAL_DMA_Init+0xa6>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a71      	ldr	r2, [pc, #452]	; (8004b44 <HAL_DMA_Init+0x210>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02b      	beq.n	80049da <HAL_DMA_Init+0xa6>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a70      	ldr	r2, [pc, #448]	; (8004b48 <HAL_DMA_Init+0x214>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d026      	beq.n	80049da <HAL_DMA_Init+0xa6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a6e      	ldr	r2, [pc, #440]	; (8004b4c <HAL_DMA_Init+0x218>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d021      	beq.n	80049da <HAL_DMA_Init+0xa6>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6d      	ldr	r2, [pc, #436]	; (8004b50 <HAL_DMA_Init+0x21c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d01c      	beq.n	80049da <HAL_DMA_Init+0xa6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a6b      	ldr	r2, [pc, #428]	; (8004b54 <HAL_DMA_Init+0x220>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d017      	beq.n	80049da <HAL_DMA_Init+0xa6>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6a      	ldr	r2, [pc, #424]	; (8004b58 <HAL_DMA_Init+0x224>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d012      	beq.n	80049da <HAL_DMA_Init+0xa6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a68      	ldr	r2, [pc, #416]	; (8004b5c <HAL_DMA_Init+0x228>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00d      	beq.n	80049da <HAL_DMA_Init+0xa6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a67      	ldr	r2, [pc, #412]	; (8004b60 <HAL_DMA_Init+0x22c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d008      	beq.n	80049da <HAL_DMA_Init+0xa6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a65      	ldr	r2, [pc, #404]	; (8004b64 <HAL_DMA_Init+0x230>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <HAL_DMA_Init+0xa6>
 80049d2:	21a5      	movs	r1, #165	; 0xa5
 80049d4:	4864      	ldr	r0, [pc, #400]	; (8004b68 <HAL_DMA_Init+0x234>)
 80049d6:	f7fc fdd8 	bl	800158a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_DMA_Init+0xc8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d008      	beq.n	80049fc <HAL_DMA_Init+0xc8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049f2:	d003      	beq.n	80049fc <HAL_DMA_Init+0xc8>
 80049f4:	21a6      	movs	r1, #166	; 0xa6
 80049f6:	485c      	ldr	r0, [pc, #368]	; (8004b68 <HAL_DMA_Init+0x234>)
 80049f8:	f7fc fdc7 	bl	800158a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d007      	beq.n	8004a14 <HAL_DMA_Init+0xe0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_DMA_Init+0xe0>
 8004a0c:	21a7      	movs	r1, #167	; 0xa7
 8004a0e:	4856      	ldr	r0, [pc, #344]	; (8004b68 <HAL_DMA_Init+0x234>)
 8004a10:	f7fc fdbb 	bl	800158a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d007      	beq.n	8004a2c <HAL_DMA_Init+0xf8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_DMA_Init+0xf8>
 8004a24:	21a8      	movs	r1, #168	; 0xa8
 8004a26:	4850      	ldr	r0, [pc, #320]	; (8004b68 <HAL_DMA_Init+0x234>)
 8004a28:	f7fc fdaf 	bl	800158a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00d      	beq.n	8004a50 <HAL_DMA_Init+0x11c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3c:	d008      	beq.n	8004a50 <HAL_DMA_Init+0x11c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a46:	d003      	beq.n	8004a50 <HAL_DMA_Init+0x11c>
 8004a48:	21a9      	movs	r1, #169	; 0xa9
 8004a4a:	4847      	ldr	r0, [pc, #284]	; (8004b68 <HAL_DMA_Init+0x234>)
 8004a4c:	f7fc fd9d 	bl	800158a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00d      	beq.n	8004a74 <HAL_DMA_Init+0x140>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d008      	beq.n	8004a74 <HAL_DMA_Init+0x140>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6a:	d003      	beq.n	8004a74 <HAL_DMA_Init+0x140>
 8004a6c:	21aa      	movs	r1, #170	; 0xaa
 8004a6e:	483e      	ldr	r0, [pc, #248]	; (8004b68 <HAL_DMA_Init+0x234>)
 8004a70:	f7fc fd8b 	bl	800158a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <HAL_DMA_Init+0x158>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d003      	beq.n	8004a8c <HAL_DMA_Init+0x158>
 8004a84:	21ab      	movs	r1, #171	; 0xab
 8004a86:	4838      	ldr	r0, [pc, #224]	; (8004b68 <HAL_DMA_Init+0x234>)
 8004a88:	f7fc fd7f 	bl	800158a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d012      	beq.n	8004aba <HAL_DMA_Init+0x186>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9c:	d00d      	beq.n	8004aba <HAL_DMA_Init+0x186>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d008      	beq.n	8004aba <HAL_DMA_Init+0x186>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ab0:	d003      	beq.n	8004aba <HAL_DMA_Init+0x186>
 8004ab2:	21ac      	movs	r1, #172	; 0xac
 8004ab4:	482c      	ldr	r0, [pc, #176]	; (8004b68 <HAL_DMA_Init+0x234>)
 8004ab6:	f7fc fd68 	bl	800158a <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01f      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d01b      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d017      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d013      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d00f      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d00b      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b06      	cmp	r3, #6
 8004af0:	d007      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	d003      	beq.n	8004b02 <HAL_DMA_Init+0x1ce>
 8004afa:	21ae      	movs	r1, #174	; 0xae
 8004afc:	481a      	ldr	r0, [pc, #104]	; (8004b68 <HAL_DMA_Init+0x234>)
 8004afe:	f7fc fd44 	bl	800158a <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <HAL_DMA_Init+0x238>)
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d836      	bhi.n	8004b7c <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <HAL_DMA_Init+0x23c>)
 8004b16:	4413      	add	r3, r2
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <HAL_DMA_Init+0x240>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	009a      	lsls	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <HAL_DMA_Init+0x244>)
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b2c:	e035      	b.n	8004b9a <HAL_DMA_Init+0x266>
 8004b2e:	bf00      	nop
 8004b30:	40020008 	.word	0x40020008
 8004b34:	4002001c 	.word	0x4002001c
 8004b38:	40020030 	.word	0x40020030
 8004b3c:	40020044 	.word	0x40020044
 8004b40:	40020058 	.word	0x40020058
 8004b44:	4002006c 	.word	0x4002006c
 8004b48:	40020080 	.word	0x40020080
 8004b4c:	40020408 	.word	0x40020408
 8004b50:	4002041c 	.word	0x4002041c
 8004b54:	40020430 	.word	0x40020430
 8004b58:	40020444 	.word	0x40020444
 8004b5c:	40020458 	.word	0x40020458
 8004b60:	4002046c 	.word	0x4002046c
 8004b64:	40020480 	.word	0x40020480
 8004b68:	0800d560 	.word	0x0800d560
 8004b6c:	40020407 	.word	0x40020407
 8004b70:	bffdfff8 	.word	0xbffdfff8
 8004b74:	cccccccd 	.word	0xcccccccd
 8004b78:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <HAL_DMA_Init+0x358>)
 8004b84:	4413      	add	r3, r2
 8004b86:	4a42      	ldr	r2, [pc, #264]	; (8004c90 <HAL_DMA_Init+0x35c>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	009a      	lsls	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3f      	ldr	r2, [pc, #252]	; (8004c94 <HAL_DMA_Init+0x360>)
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf4:	d039      	beq.n	8004c6a <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <HAL_DMA_Init+0x364>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d11a      	bne.n	8004c36 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_DMA_Init+0x368>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	f003 031c 	and.w	r3, r3, #28
 8004c0c:	210f      	movs	r1, #15
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	4921      	ldr	r1, [pc, #132]	; (8004c9c <HAL_DMA_Init+0x368>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c1a:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_DMA_Init+0x368>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f003 031c 	and.w	r3, r3, #28
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	491b      	ldr	r1, [pc, #108]	; (8004c9c <HAL_DMA_Init+0x368>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
 8004c34:	e019      	b.n	8004c6a <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <HAL_DMA_Init+0x36c>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	f003 031c 	and.w	r3, r3, #28
 8004c42:	210f      	movs	r1, #15
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	4915      	ldr	r1, [pc, #84]	; (8004ca0 <HAL_DMA_Init+0x36c>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_DMA_Init+0x36c>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	f003 031c 	and.w	r3, r3, #28
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	490e      	ldr	r1, [pc, #56]	; (8004ca0 <HAL_DMA_Init+0x36c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	bffdfbf8 	.word	0xbffdfbf8
 8004c90:	cccccccd 	.word	0xcccccccd
 8004c94:	40020400 	.word	0x40020400
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	400200a8 	.word	0x400200a8
 8004ca0:	400204a8 	.word	0x400204a8

08004ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	f003 031c 	and.w	r3, r3, #28
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d026      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x7a>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d021      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0204 	bic.w	r2, r2, #4
 8004cf6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f003 021c 	and.w	r2, r3, #28
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2104      	movs	r1, #4
 8004d06:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d071      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004d1c:	e06c      	b.n	8004df8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f003 031c 	and.w	r3, r3, #28
 8004d26:	2202      	movs	r2, #2
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02e      	beq.n	8004d90 <HAL_DMA_IRQHandler+0xec>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d029      	beq.n	8004d90 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 020a 	bic.w	r2, r2, #10
 8004d58:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f003 021c 	and.w	r2, r3, #28
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2102      	movs	r1, #2
 8004d70:	fa01 f202 	lsl.w	r2, r1, r2
 8004d74:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d038      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d8e:	e033      	b.n	8004df8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f003 031c 	and.w	r3, r3, #28
 8004d98:	2208      	movs	r2, #8
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02a      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x156>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d025      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 020e 	bic.w	r2, r2, #14
 8004dbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f003 021c 	and.w	r2, r3, #28
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	2101      	movs	r1, #1
 8004dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
}
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e18:	d017      	beq.n	8004e4a <HAL_GPIO_Init+0x46>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a38      	ldr	r2, [pc, #224]	; (8004f00 <HAL_GPIO_Init+0xfc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <HAL_GPIO_Init+0x46>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a37      	ldr	r2, [pc, #220]	; (8004f04 <HAL_GPIO_Init+0x100>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <HAL_GPIO_Init+0x46>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a36      	ldr	r2, [pc, #216]	; (8004f08 <HAL_GPIO_Init+0x104>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <HAL_GPIO_Init+0x46>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <HAL_GPIO_Init+0x108>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <HAL_GPIO_Init+0x46>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a34      	ldr	r2, [pc, #208]	; (8004f10 <HAL_GPIO_Init+0x10c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x46>
 8004e42:	21aa      	movs	r1, #170	; 0xaa
 8004e44:	4833      	ldr	r0, [pc, #204]	; (8004f14 <HAL_GPIO_Init+0x110>)
 8004e46:	f7fc fba0 	bl	800158a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_GPIO_Init+0x5c>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x64>
 8004e60:	21ab      	movs	r1, #171	; 0xab
 8004e62:	482c      	ldr	r0, [pc, #176]	; (8004f14 <HAL_GPIO_Init+0x110>)
 8004e64:	f7fc fb91 	bl	800158a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8200 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	f000 81fb 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b11      	cmp	r3, #17
 8004e82:	f000 81f6 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	f000 81f1 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b12      	cmp	r3, #18
 8004e96:	f000 81ec 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004ea2:	f000 81e6 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004eae:	f000 81e0 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004eba:	f000 81da 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004ec6:	f000 81d4 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004ed2:	f000 81ce 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004ede:	f000 81c8 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	f000 81c3 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b0b      	cmp	r3, #11
 8004ef2:	f000 81be 	beq.w	8005272 <HAL_GPIO_Init+0x46e>
 8004ef6:	21ac      	movs	r1, #172	; 0xac
 8004ef8:	4806      	ldr	r0, [pc, #24]	; (8004f14 <HAL_GPIO_Init+0x110>)
 8004efa:	f7fc fb46 	bl	800158a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004efe:	e1b8      	b.n	8005272 <HAL_GPIO_Init+0x46e>
 8004f00:	48000400 	.word	0x48000400
 8004f04:	48000800 	.word	0x48000800
 8004f08:	48000c00 	.word	0x48000c00
 8004f0c:	48001000 	.word	0x48001000
 8004f10:	48001c00 	.word	0x48001c00
 8004f14:	0800d5d4 	.word	0x0800d5d4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	fa01 f303 	lsl.w	r3, r1, r3
 8004f24:	4013      	ands	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 819e 	beq.w	800526c <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d005      	beq.n	8004f48 <HAL_GPIO_Init+0x144>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d144      	bne.n	8004fd2 <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00f      	beq.n	8004f70 <HAL_GPIO_Init+0x16c>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d00b      	beq.n	8004f70 <HAL_GPIO_Init+0x16c>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d007      	beq.n	8004f70 <HAL_GPIO_Init+0x16c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x16c>
 8004f68:	21bb      	movs	r1, #187	; 0xbb
 8004f6a:	4886      	ldr	r0, [pc, #536]	; (8005184 <HAL_GPIO_Init+0x380>)
 8004f6c:	f7fc fb0d 	bl	800158a <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0201 	and.w	r2, r3, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d027      	beq.n	800502e <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_GPIO_Init+0x1fa>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d007      	beq.n	8004ffe <HAL_GPIO_Init+0x1fa>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_Init+0x1fa>
 8004ff6:	21dc      	movs	r1, #220	; 0xdc
 8004ff8:	4862      	ldr	r0, [pc, #392]	; (8005184 <HAL_GPIO_Init+0x380>)
 8004ffa:	f7fc fac6 	bl	800158a <assert_failed>

        temp = GPIOx->PUPDR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	2203      	movs	r2, #3
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d147      	bne.n	80050ca <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005040:	d017      	beq.n	8005072 <HAL_GPIO_Init+0x26e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a50      	ldr	r2, [pc, #320]	; (8005188 <HAL_GPIO_Init+0x384>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_GPIO_Init+0x26e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a4f      	ldr	r2, [pc, #316]	; (800518c <HAL_GPIO_Init+0x388>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00f      	beq.n	8005072 <HAL_GPIO_Init+0x26e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a4e      	ldr	r2, [pc, #312]	; (8005190 <HAL_GPIO_Init+0x38c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00b      	beq.n	8005072 <HAL_GPIO_Init+0x26e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a4d      	ldr	r2, [pc, #308]	; (8005194 <HAL_GPIO_Init+0x390>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <HAL_GPIO_Init+0x26e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a4c      	ldr	r2, [pc, #304]	; (8005198 <HAL_GPIO_Init+0x394>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_Init+0x26e>
 800506a:	21e8      	movs	r1, #232	; 0xe8
 800506c:	4845      	ldr	r0, [pc, #276]	; (8005184 <HAL_GPIO_Init+0x380>)
 800506e:	f7fc fa8c 	bl	800158a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	d903      	bls.n	8005082 <HAL_GPIO_Init+0x27e>
 800507a:	21e9      	movs	r1, #233	; 0xe9
 800507c:	4841      	ldr	r0, [pc, #260]	; (8005184 <HAL_GPIO_Init+0x380>)
 800507e:	f7fc fa84 	bl	800158a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	08da      	lsrs	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3208      	adds	r2, #8
 800508a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	220f      	movs	r2, #15
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	08da      	lsrs	r2, r3, #3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3208      	adds	r2, #8
 80050c4:	6939      	ldr	r1, [r7, #16]
 80050c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	2203      	movs	r2, #3
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0203 	and.w	r2, r3, #3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80b0 	beq.w	800526c <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510c:	4b23      	ldr	r3, [pc, #140]	; (800519c <HAL_GPIO_Init+0x398>)
 800510e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005110:	4a22      	ldr	r2, [pc, #136]	; (800519c <HAL_GPIO_Init+0x398>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6613      	str	r3, [r2, #96]	; 0x60
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <HAL_GPIO_Init+0x398>)
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005124:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_GPIO_Init+0x39c>)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	3302      	adds	r3, #2
 800512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	220f      	movs	r2, #15
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800514e:	d029      	beq.n	80051a4 <HAL_GPIO_Init+0x3a0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <HAL_GPIO_Init+0x384>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_GPIO_Init+0x37c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a0c      	ldr	r2, [pc, #48]	; (800518c <HAL_GPIO_Init+0x388>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00d      	beq.n	800517c <HAL_GPIO_Init+0x378>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <HAL_GPIO_Init+0x38c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <HAL_GPIO_Init+0x374>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <HAL_GPIO_Init+0x390>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_GPIO_Init+0x370>
 8005170:	2304      	movs	r3, #4
 8005172:	e018      	b.n	80051a6 <HAL_GPIO_Init+0x3a2>
 8005174:	2307      	movs	r3, #7
 8005176:	e016      	b.n	80051a6 <HAL_GPIO_Init+0x3a2>
 8005178:	2303      	movs	r3, #3
 800517a:	e014      	b.n	80051a6 <HAL_GPIO_Init+0x3a2>
 800517c:	2302      	movs	r3, #2
 800517e:	e012      	b.n	80051a6 <HAL_GPIO_Init+0x3a2>
 8005180:	2301      	movs	r3, #1
 8005182:	e010      	b.n	80051a6 <HAL_GPIO_Init+0x3a2>
 8005184:	0800d5d4 	.word	0x0800d5d4
 8005188:	48000400 	.word	0x48000400
 800518c:	48000800 	.word	0x48000800
 8005190:	48000c00 	.word	0x48000c00
 8005194:	48001000 	.word	0x48001000
 8005198:	48001c00 	.word	0x48001c00
 800519c:	40021000 	.word	0x40021000
 80051a0:	40010000 	.word	0x40010000
 80051a4:	2300      	movs	r3, #0
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	f002 0203 	and.w	r2, r2, #3
 80051ac:	0092      	lsls	r2, r2, #2
 80051ae:	4093      	lsls	r3, r2
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051b6:	4935      	ldr	r1, [pc, #212]	; (800528c <HAL_GPIO_Init+0x488>)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	3302      	adds	r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051c4:	4b32      	ldr	r3, [pc, #200]	; (8005290 <HAL_GPIO_Init+0x48c>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4013      	ands	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <HAL_GPIO_Init+0x48c>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <HAL_GPIO_Init+0x48c>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	43db      	mvns	r3, r3
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4013      	ands	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005212:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_GPIO_Init+0x48c>)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_GPIO_Init+0x48c>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	43db      	mvns	r3, r3
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4013      	ands	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <HAL_GPIO_Init+0x48c>)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <HAL_GPIO_Init+0x48c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	43db      	mvns	r3, r3
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005266:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <HAL_GPIO_Init+0x48c>)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3301      	adds	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	f47f ae4b 	bne.w	8004f18 <HAL_GPIO_Init+0x114>
  }
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <HAL_PWREx_GetVoltageRange+0x18>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40007000 	.word	0x40007000

080052b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052be:	d007      	beq.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0x20>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c6:	d003      	beq.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0x20>
 80052c8:	21a7      	movs	r1, #167	; 0xa7
 80052ca:	4826      	ldr	r0, [pc, #152]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80052cc:	f7fc f95d 	bl	800158a <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d6:	d130      	bne.n	800533a <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d8:	4b23      	ldr	r3, [pc, #140]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e4:	d038      	beq.n	8005358 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052ee:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80052f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2232      	movs	r2, #50	; 0x32
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	0c9b      	lsrs	r3, r3, #18
 8005308:	3301      	adds	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800530c:	e002      	b.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b01      	subs	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005314:	4b14      	ldr	r3, [pc, #80]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d102      	bne.n	8005328 <HAL_PWREx_ControlVoltageScaling+0x78>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f2      	bne.n	800530e <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005334:	d110      	bne.n	8005358 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00f      	b.n	800535a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005346:	d007      	beq.n	8005358 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005350:	4a05      	ldr	r2, [pc, #20]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005356:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	0800d648 	.word	0x0800d648
 8005368:	40007000 	.word	0x40007000
 800536c:	20000004 	.word	0x20000004
 8005370:	431bde83 	.word	0x431bde83

08005374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f000 bd3a 	b.w	8005dfc <HAL_RCC_OscConfig+0xa88>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCC_OscConfig+0x32>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <HAL_RCC_OscConfig+0x32>
 800539c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80053a0:	489b      	ldr	r0, [pc, #620]	; (8005610 <HAL_RCC_OscConfig+0x29c>)
 80053a2:	f7fc f8f2 	bl	800158a <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a6:	4b9b      	ldr	r3, [pc, #620]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b0:	4b98      	ldr	r3, [pc, #608]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 813f 	beq.w	8005646 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCC_OscConfig+0x6e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d004      	beq.n	80053e2 <HAL_RCC_OscConfig+0x6e>
 80053d8:	f240 11a9 	movw	r1, #425	; 0x1a9
 80053dc:	488c      	ldr	r0, [pc, #560]	; (8005610 <HAL_RCC_OscConfig+0x29c>)
 80053de:	f7fc f8d4 	bl	800158a <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	2bff      	cmp	r3, #255	; 0xff
 80053e8:	d904      	bls.n	80053f4 <HAL_RCC_OscConfig+0x80>
 80053ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053ee:	4888      	ldr	r0, [pc, #544]	; (8005610 <HAL_RCC_OscConfig+0x29c>)
 80053f0:	f7fc f8cb 	bl	800158a <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d030      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	2b10      	cmp	r3, #16
 8005402:	d02c      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	2b20      	cmp	r3, #32
 800540a:	d028      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	d024      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d020      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	2b50      	cmp	r3, #80	; 0x50
 8005422:	d01c      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	2b60      	cmp	r3, #96	; 0x60
 800542a:	d018      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	2b70      	cmp	r3, #112	; 0x70
 8005432:	d014      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d010      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	2b90      	cmp	r3, #144	; 0x90
 8005442:	d00c      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	2ba0      	cmp	r3, #160	; 0xa0
 800544a:	d008      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	2bb0      	cmp	r3, #176	; 0xb0
 8005452:	d004      	beq.n	800545e <HAL_RCC_OscConfig+0xea>
 8005454:	f240 11ab 	movw	r1, #427	; 0x1ab
 8005458:	486d      	ldr	r0, [pc, #436]	; (8005610 <HAL_RCC_OscConfig+0x29c>)
 800545a:	f7fc f896 	bl	800158a <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <HAL_RCC_OscConfig+0x100>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b0c      	cmp	r3, #12
 8005468:	f040 808f 	bne.w	800558a <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b01      	cmp	r3, #1
 8005470:	f040 808b 	bne.w	800558a <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005474:	4b67      	ldr	r3, [pc, #412]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d006      	beq.n	800548e <HAL_RCC_OscConfig+0x11a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f000 bcb7 	b.w	8005dfc <HAL_RCC_OscConfig+0xa88>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	4b60      	ldr	r3, [pc, #384]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_RCC_OscConfig+0x134>
 800549e:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a6:	e005      	b.n	80054b4 <HAL_RCC_OscConfig+0x140>
 80054a8:	4b5a      	ldr	r3, [pc, #360]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d224      	bcs.n	8005502 <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 ff35 	bl	800632c <RCC_SetFlashLatencyFromMSIRange>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f000 bc97 	b.w	8005dfc <HAL_RCC_OscConfig+0xa88>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ce:	4b51      	ldr	r3, [pc, #324]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a50      	ldr	r2, [pc, #320]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054d4:	f043 0308 	orr.w	r3, r3, #8
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	4b4e      	ldr	r3, [pc, #312]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	494b      	ldr	r1, [pc, #300]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ec:	4b49      	ldr	r3, [pc, #292]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	4946      	ldr	r1, [pc, #280]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	604b      	str	r3, [r1, #4]
 8005500:	e026      	b.n	8005550 <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005502:	4b44      	ldr	r3, [pc, #272]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a43      	ldr	r2, [pc, #268]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005508:	f043 0308 	orr.w	r3, r3, #8
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b41      	ldr	r3, [pc, #260]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	493e      	ldr	r1, [pc, #248]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005520:	4b3c      	ldr	r3, [pc, #240]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	4939      	ldr	r1, [pc, #228]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fef4 	bl	800632c <RCC_SetFlashLatencyFromMSIRange>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f000 bc56 	b.w	8005dfc <HAL_RCC_OscConfig+0xa88>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005550:	f000 fdfc 	bl	800614c <HAL_RCC_GetSysClockFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b2f      	ldr	r3, [pc, #188]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	492d      	ldr	r1, [pc, #180]	; (8005618 <HAL_RCC_OscConfig+0x2a4>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <HAL_RCC_OscConfig+0x2a8>)
 800556e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005570:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f7fc fdb9 	bl	80020ec <HAL_InitTick>
 800557a:	4603      	mov	r3, r0
 800557c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d05f      	beq.n	8005644 <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	f000 bc39 	b.w	8005dfc <HAL_RCC_OscConfig+0xa88>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d033      	beq.n	80055fa <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800559e:	f7fd f8b3 	bl	8002708 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055a4:	e009      	b.n	80055ba <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055a6:	f7fd f8af 	bl	8002708 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d902      	bls.n	80055ba <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	f000 bc21 	b.w	8005dfc <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055ba:	4b16      	ldr	r3, [pc, #88]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ef      	beq.n	80055a6 <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c6:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055cc:	f043 0308 	orr.w	r3, r3, #8
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	490d      	ldr	r1, [pc, #52]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	4908      	ldr	r1, [pc, #32]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	e025      	b.n	8005646 <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a05      	ldr	r2, [pc, #20]	; (8005614 <HAL_RCC_OscConfig+0x2a0>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005606:	f7fd f87f 	bl	8002708 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800560c:	e013      	b.n	8005636 <HAL_RCC_OscConfig+0x2c2>
 800560e:	bf00      	nop
 8005610:	0800d6bc 	.word	0x0800d6bc
 8005614:	40021000 	.word	0x40021000
 8005618:	0800db68 	.word	0x0800db68
 800561c:	20000004 	.word	0x20000004
 8005620:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005624:	f7fd f870 	bl	8002708 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e3e2      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005636:	4b97      	ldr	r3, [pc, #604]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x2b0>
 8005642:	e000      	b.n	8005646 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d07e      	beq.n	8005750 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00e      	beq.n	8005678 <HAL_RCC_OscConfig+0x304>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005662:	d009      	beq.n	8005678 <HAL_RCC_OscConfig+0x304>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800566c:	d004      	beq.n	8005678 <HAL_RCC_OscConfig+0x304>
 800566e:	f240 2117 	movw	r1, #535	; 0x217
 8005672:	4889      	ldr	r0, [pc, #548]	; (8005898 <HAL_RCC_OscConfig+0x524>)
 8005674:	f7fb ff89 	bl	800158a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b08      	cmp	r3, #8
 800567c:	d005      	beq.n	800568a <HAL_RCC_OscConfig+0x316>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d10e      	bne.n	80056a2 <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d10b      	bne.n	80056a2 <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800568a:	4b82      	ldr	r3, [pc, #520]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d05b      	beq.n	800574e <HAL_RCC_OscConfig+0x3da>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d157      	bne.n	800574e <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e3ac      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_OscConfig+0x346>
 80056ac:	4b79      	ldr	r3, [pc, #484]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a78      	ldr	r2, [pc, #480]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e01d      	b.n	80056f6 <HAL_RCC_OscConfig+0x382>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c2:	d10c      	bne.n	80056de <HAL_RCC_OscConfig+0x36a>
 80056c4:	4b73      	ldr	r3, [pc, #460]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a72      	ldr	r2, [pc, #456]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b70      	ldr	r3, [pc, #448]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6f      	ldr	r2, [pc, #444]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	e00b      	b.n	80056f6 <HAL_RCC_OscConfig+0x382>
 80056de:	4b6d      	ldr	r3, [pc, #436]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6c      	ldr	r2, [pc, #432]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a69      	ldr	r2, [pc, #420]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80056f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fd f803 	bl	8002708 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005706:	f7fc ffff 	bl	8002708 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b64      	cmp	r3, #100	; 0x64
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e371      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005718:	4b5e      	ldr	r3, [pc, #376]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x392>
 8005724:	e014      	b.n	8005750 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fc ffef 	bl	8002708 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800572e:	f7fc ffeb 	bl	8002708 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e35d      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005740:	4b54      	ldr	r3, [pc, #336]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x3ba>
 800574c:	e000      	b.n	8005750 <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d077      	beq.n	800584c <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <HAL_RCC_OscConfig+0x404>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576c:	d004      	beq.n	8005778 <HAL_RCC_OscConfig+0x404>
 800576e:	f240 214a 	movw	r1, #586	; 0x24a
 8005772:	4849      	ldr	r0, [pc, #292]	; (8005898 <HAL_RCC_OscConfig+0x524>)
 8005774:	f7fb ff09 	bl	800158a <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b1f      	cmp	r3, #31
 800577e:	d904      	bls.n	800578a <HAL_RCC_OscConfig+0x416>
 8005780:	f240 214b 	movw	r1, #587	; 0x24b
 8005784:	4844      	ldr	r0, [pc, #272]	; (8005898 <HAL_RCC_OscConfig+0x524>)
 8005786:	f7fb ff00 	bl	800158a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d005      	beq.n	800579c <HAL_RCC_OscConfig+0x428>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b0c      	cmp	r3, #12
 8005794:	d119      	bne.n	80057ca <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d116      	bne.n	80057ca <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800579c:	4b3d      	ldr	r3, [pc, #244]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_OscConfig+0x440>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e323      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b4:	4b37      	ldr	r3, [pc, #220]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	061b      	lsls	r3, r3, #24
 80057c2:	4934      	ldr	r1, [pc, #208]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c8:	e040      	b.n	800584c <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d023      	beq.n	800581a <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d2:	4b30      	ldr	r3, [pc, #192]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fc ff93 	bl	8002708 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e6:	f7fc ff8f 	bl	8002708 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e301      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057f8:	4b26      	ldr	r3, [pc, #152]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0f0      	beq.n	80057e6 <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005804:	4b23      	ldr	r3, [pc, #140]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	061b      	lsls	r3, r3, #24
 8005812:	4920      	ldr	r1, [pc, #128]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
 8005818:	e018      	b.n	800584c <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 8005820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005826:	f7fc ff6f 	bl	8002708 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800582e:	f7fc ff6b 	bl	8002708 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e2dd      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005840:	4b14      	ldr	r3, [pc, #80]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d04e      	beq.n	80058f6 <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_RCC_OscConfig+0x4fe>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d004      	beq.n	8005872 <HAL_RCC_OscConfig+0x4fe>
 8005868:	f240 218b 	movw	r1, #651	; 0x28b
 800586c:	480a      	ldr	r0, [pc, #40]	; (8005898 <HAL_RCC_OscConfig+0x524>)
 800586e:	f7fb fe8c 	bl	800158a <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d021      	beq.n	80058be <HAL_RCC_OscConfig+0x54a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005880:	4a04      	ldr	r2, [pc, #16]	; (8005894 <HAL_RCC_OscConfig+0x520>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fc ff3d 	bl	8002708 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005890:	e00d      	b.n	80058ae <HAL_RCC_OscConfig+0x53a>
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
 8005898:	0800d6bc 	.word	0x0800d6bc
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800589c:	f7fc ff34 	bl	8002708 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e2a6      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058ae:	4b93      	ldr	r3, [pc, #588]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80058b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ef      	beq.n	800589c <HAL_RCC_OscConfig+0x528>
 80058bc:	e01b      	b.n	80058f6 <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058be:	4b8f      	ldr	r3, [pc, #572]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80058c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c4:	4a8d      	ldr	r2, [pc, #564]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ce:	f7fc ff1b 	bl	8002708 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d6:	f7fc ff17 	bl	8002708 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e289      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058e8:	4b84      	ldr	r3, [pc, #528]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80058ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ef      	bne.n	80058d6 <HAL_RCC_OscConfig+0x562>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80b2 	beq.w	8005a68 <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005904:	2300      	movs	r3, #0
 8005906:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_RCC_OscConfig+0x5b6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d008      	beq.n	800592a <HAL_RCC_OscConfig+0x5b6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b05      	cmp	r3, #5
 800591e:	d004      	beq.n	800592a <HAL_RCC_OscConfig+0x5b6>
 8005920:	f240 21de 	movw	r1, #734	; 0x2de
 8005924:	4876      	ldr	r0, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x78c>)
 8005926:	f7fb fe30 	bl	800158a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800592a:	4b74      	ldr	r3, [pc, #464]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 800592c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10d      	bne.n	8005952 <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005936:	4b71      	ldr	r3, [pc, #452]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4a70      	ldr	r2, [pc, #448]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 800593c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005940:	6593      	str	r3, [r2, #88]	; 0x58
 8005942:	4b6e      	ldr	r3, [pc, #440]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594e:	2301      	movs	r3, #1
 8005950:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005952:	4b6c      	ldr	r3, [pc, #432]	; (8005b04 <HAL_RCC_OscConfig+0x790>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d118      	bne.n	8005990 <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800595e:	4b69      	ldr	r3, [pc, #420]	; (8005b04 <HAL_RCC_OscConfig+0x790>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a68      	ldr	r2, [pc, #416]	; (8005b04 <HAL_RCC_OscConfig+0x790>)
 8005964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800596a:	f7fc fecd 	bl	8002708 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005972:	f7fc fec9 	bl	8002708 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e23b      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005984:	4b5f      	ldr	r3, [pc, #380]	; (8005b04 <HAL_RCC_OscConfig+0x790>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d108      	bne.n	80059aa <HAL_RCC_OscConfig+0x636>
 8005998:	4b58      	ldr	r3, [pc, #352]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	4a57      	ldr	r2, [pc, #348]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a8:	e024      	b.n	80059f4 <HAL_RCC_OscConfig+0x680>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d110      	bne.n	80059d4 <HAL_RCC_OscConfig+0x660>
 80059b2:	4b52      	ldr	r3, [pc, #328]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	4a50      	ldr	r2, [pc, #320]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059ba:	f043 0304 	orr.w	r3, r3, #4
 80059be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059c2:	4b4e      	ldr	r3, [pc, #312]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	4a4c      	ldr	r2, [pc, #304]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059d2:	e00f      	b.n	80059f4 <HAL_RCC_OscConfig+0x680>
 80059d4:	4b49      	ldr	r3, [pc, #292]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	4a48      	ldr	r2, [pc, #288]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059e4:	4b45      	ldr	r3, [pc, #276]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	4a44      	ldr	r2, [pc, #272]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 80059ec:	f023 0304 	bic.w	r3, r3, #4
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d016      	beq.n	8005a2a <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fc fe84 	bl	8002708 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fc fe80 	bl	8002708 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e1f0      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ed      	beq.n	8005a04 <HAL_RCC_OscConfig+0x690>
 8005a28:	e015      	b.n	8005a56 <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2a:	f7fc fe6d 	bl	8002708 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a30:	e00a      	b.n	8005a48 <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fc fe69 	bl	8002708 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e1d9      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a48:	4b2c      	ldr	r3, [pc, #176]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1ed      	bne.n	8005a32 <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5c:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	4a26      	ldr	r2, [pc, #152]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d050      	beq.n	8005b16 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCC_OscConfig+0x71a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d004      	beq.n	8005a8e <HAL_RCC_OscConfig+0x71a>
 8005a84:	f240 3143 	movw	r1, #835	; 0x343
 8005a88:	481d      	ldr	r0, [pc, #116]	; (8005b00 <HAL_RCC_OscConfig+0x78c>)
 8005a8a:	f7fb fd7e 	bl	800158a <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01c      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a96:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa6:	f7fc fe2f 	bl	8002708 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aae:	f7fc fe2b 	bl	8002708 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e19d      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0ef      	beq.n	8005aae <HAL_RCC_OscConfig+0x73a>
 8005ace:	e022      	b.n	8005b16 <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <HAL_RCC_OscConfig+0x788>)
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fc fe12 	bl	8002708 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ae6:	e00f      	b.n	8005b08 <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae8:	f7fc fe0e 	bl	8002708 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d908      	bls.n	8005b08 <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e180      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
 8005afa:	bf00      	nop
 8005afc:	40021000 	.word	0x40021000
 8005b00:	0800d6bc 	.word	0x0800d6bc
 8005b04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b08:	4b93      	ldr	r3, [pc, #588]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e8      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <HAL_RCC_OscConfig+0x7c4>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d008      	beq.n	8005b38 <HAL_RCC_OscConfig+0x7c4>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d004      	beq.n	8005b38 <HAL_RCC_OscConfig+0x7c4>
 8005b2e:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8005b32:	488a      	ldr	r0, [pc, #552]	; (8005d5c <HAL_RCC_OscConfig+0x9e8>)
 8005b34:	f7fb fd29 	bl	800158a <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 815c 	beq.w	8005dfa <HAL_RCC_OscConfig+0xa86>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	f040 8132 	bne.w	8005db0 <HAL_RCC_OscConfig+0xa3c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d010      	beq.n	8005b76 <HAL_RCC_OscConfig+0x802>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d00c      	beq.n	8005b76 <HAL_RCC_OscConfig+0x802>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_OscConfig+0x802>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d004      	beq.n	8005b76 <HAL_RCC_OscConfig+0x802>
 8005b6c:	f44f 715d 	mov.w	r1, #884	; 0x374
 8005b70:	487a      	ldr	r0, [pc, #488]	; (8005d5c <HAL_RCC_OscConfig+0x9e8>)
 8005b72:	f7fb fd0a 	bl	800158a <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_RCC_OscConfig+0x812>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d904      	bls.n	8005b90 <HAL_RCC_OscConfig+0x81c>
 8005b86:	f240 3175 	movw	r1, #885	; 0x375
 8005b8a:	4874      	ldr	r0, [pc, #464]	; (8005d5c <HAL_RCC_OscConfig+0x9e8>)
 8005b8c:	f7fb fcfd 	bl	800158a <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	2b07      	cmp	r3, #7
 8005b96:	d903      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x82c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	2b56      	cmp	r3, #86	; 0x56
 8005b9e:	d904      	bls.n	8005baa <HAL_RCC_OscConfig+0x836>
 8005ba0:	f240 3176 	movw	r1, #886	; 0x376
 8005ba4:	486d      	ldr	r0, [pc, #436]	; (8005d5c <HAL_RCC_OscConfig+0x9e8>)
 8005ba6:	f7fb fcf0 	bl	800158a <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d903      	bls.n	8005bba <HAL_RCC_OscConfig+0x846>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	2b1f      	cmp	r3, #31
 8005bb8:	d904      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x850>
 8005bba:	f44f 715e 	mov.w	r1, #888	; 0x378
 8005bbe:	4867      	ldr	r0, [pc, #412]	; (8005d5c <HAL_RCC_OscConfig+0x9e8>)
 8005bc0:	f7fb fce3 	bl	800158a <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d010      	beq.n	8005bee <HAL_RCC_OscConfig+0x87a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d00c      	beq.n	8005bee <HAL_RCC_OscConfig+0x87a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d008      	beq.n	8005bee <HAL_RCC_OscConfig+0x87a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d004      	beq.n	8005bee <HAL_RCC_OscConfig+0x87a>
 8005be4:	f240 317a 	movw	r1, #890	; 0x37a
 8005be8:	485c      	ldr	r0, [pc, #368]	; (8005d5c <HAL_RCC_OscConfig+0x9e8>)
 8005bea:	f7fb fcce 	bl	800158a <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d010      	beq.n	8005c18 <HAL_RCC_OscConfig+0x8a4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d00c      	beq.n	8005c18 <HAL_RCC_OscConfig+0x8a4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d008      	beq.n	8005c18 <HAL_RCC_OscConfig+0x8a4>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d004      	beq.n	8005c18 <HAL_RCC_OscConfig+0x8a4>
 8005c0e:	f240 317b 	movw	r1, #891	; 0x37b
 8005c12:	4852      	ldr	r0, [pc, #328]	; (8005d5c <HAL_RCC_OscConfig+0x9e8>)
 8005c14:	f7fb fcb9 	bl	800158a <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c18:	4b4f      	ldr	r3, [pc, #316]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f003 0203 	and.w	r2, r3, #3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d12c      	bne.n	8005c86 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	3b01      	subs	r3, #1
 8005c38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d123      	bne.n	8005c86 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d11b      	bne.n	8005c86 <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d113      	bne.n	8005c86 <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d109      	bne.n	8005c86 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d06e      	beq.n	8005d64 <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d062      	beq.n	8005d52 <HAL_RCC_OscConfig+0x9de>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c8c:	4b32      	ldr	r3, [pc, #200]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_OscConfig+0x928>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0af      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c9c:	4b2e      	ldr	r3, [pc, #184]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ca8:	f7fc fd2e 	bl	8002708 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x94e>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fc fd2a 	bl	8002708 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x94e>
              {
                return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e09c      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc2:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x93c>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cce:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <HAL_RCC_OscConfig+0x9ec>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0112      	lsls	r2, r2, #4
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ce8:	0212      	lsls	r2, r2, #8
 8005cea:	4311      	orrs	r1, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005cf0:	0852      	lsrs	r2, r2, #1
 8005cf2:	3a01      	subs	r2, #1
 8005cf4:	0552      	lsls	r2, r2, #21
 8005cf6:	4311      	orrs	r1, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005cfc:	0852      	lsrs	r2, r2, #1
 8005cfe:	3a01      	subs	r2, #1
 8005d00:	0652      	lsls	r2, r2, #25
 8005d02:	4311      	orrs	r1, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d08:	06d2      	lsls	r2, r2, #27
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	4912      	ldr	r1, [pc, #72]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d1c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d28:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d2a:	f7fc fced 	bl	8002708 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x9d0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d32:	f7fc fce9 	bl	8002708 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x9d0>
              {
                return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e05b      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d44:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <HAL_RCC_OscConfig+0x9e4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCC_OscConfig+0x9be>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d50:	e053      	b.n	8005dfa <HAL_RCC_OscConfig+0xa86>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e052      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	0800d6bc 	.word	0x0800d6bc
 8005d60:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d144      	bne.n	8005dfa <HAL_RCC_OscConfig+0xa86>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d70:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a23      	ldr	r2, [pc, #140]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d7c:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d88:	f7fc fcbe 	bl	8002708 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xa2e>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fc fcba 	bl	8002708 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xa2e>
            {
              return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e02c      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da2:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0xa1c>
 8005dae:	e024      	b.n	8005dfa <HAL_RCC_OscConfig+0xa86>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b0c      	cmp	r3, #12
 8005db4:	d01f      	beq.n	8005df6 <HAL_RCC_OscConfig+0xa82>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc2:	f7fc fca1 	bl	8002708 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0xa68>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dca:	f7fc fc9d 	bl	8002708 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0xa68>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e00f      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ddc:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f0      	bne.n	8005dca <HAL_RCC_OscConfig+0xa56>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	4905      	ldr	r1, [pc, #20]	; (8005e04 <HAL_RCC_OscConfig+0xa90>)
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_RCC_OscConfig+0xa94>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	60cb      	str	r3, [r1, #12]
 8005df4:	e001      	b.n	8005dfa <HAL_RCC_OscConfig+0xa86>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_RCC_OscConfig+0xa88>
      }
    }
  }
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40021000 	.word	0x40021000
 8005e08:	feeefffc 	.word	0xfeeefffc

08005e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e186      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x24>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d904      	bls.n	8005e3a <HAL_RCC_ClockConfig+0x2e>
 8005e30:	f240 4157 	movw	r1, #1111	; 0x457
 8005e34:	4882      	ldr	r0, [pc, #520]	; (8006040 <HAL_RCC_ClockConfig+0x234>)
 8005e36:	f7fb fba8 	bl	800158a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x56>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d00d      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x56>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d00a      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x56>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d007      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x56>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d004      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x56>
 8005e58:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8005e5c:	4878      	ldr	r0, [pc, #480]	; (8006040 <HAL_RCC_ClockConfig+0x234>)
 8005e5e:	f7fb fb94 	bl	800158a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e62:	4b78      	ldr	r3, [pc, #480]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d910      	bls.n	8005e92 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e70:	4b74      	ldr	r3, [pc, #464]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f023 0207 	bic.w	r2, r3, #7
 8005e78:	4972      	ldr	r1, [pc, #456]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e80:	4b70      	ldr	r3, [pc, #448]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d001      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e14d      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d039      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d024      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d020      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b90      	cmp	r3, #144	; 0x90
 8005eb4:	d01c      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2ba0      	cmp	r3, #160	; 0xa0
 8005ebc:	d018      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2bb0      	cmp	r3, #176	; 0xb0
 8005ec4:	d014      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2bc0      	cmp	r3, #192	; 0xc0
 8005ecc:	d010      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2bd0      	cmp	r3, #208	; 0xd0
 8005ed4:	d00c      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2be0      	cmp	r3, #224	; 0xe0
 8005edc:	d008      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2bf0      	cmp	r3, #240	; 0xf0
 8005ee4:	d004      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0xe4>
 8005ee6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8005eea:	4855      	ldr	r0, [pc, #340]	; (8006040 <HAL_RCC_ClockConfig+0x234>)
 8005eec:	f7fb fb4d 	bl	800158a <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	4b54      	ldr	r3, [pc, #336]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d908      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f00:	4b51      	ldr	r3, [pc, #324]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	494e      	ldr	r1, [pc, #312]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d061      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d010      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x13c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d00c      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x13c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d008      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x13c>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x13c>
 8005f3e:	f240 417b 	movw	r1, #1147	; 0x47b
 8005f42:	483f      	ldr	r0, [pc, #252]	; (8006040 <HAL_RCC_ClockConfig+0x234>)
 8005f44:	f7fb fb21 	bl	800158a <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d107      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f50:	4b3d      	ldr	r3, [pc, #244]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d121      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0e6      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d107      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f68:	4b37      	ldr	r3, [pc, #220]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d115      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0da      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f80:	4b31      	ldr	r3, [pc, #196]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0ce      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f90:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0c6      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fa0:	4b29      	ldr	r3, [pc, #164]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 0203 	bic.w	r2, r3, #3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4926      	ldr	r1, [pc, #152]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb2:	f7fc fba9 	bl	8002708 <HAL_GetTick>
 8005fb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb8:	e00a      	b.n	8005fd0 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fba:	f7fc fba5 	bl	8002708 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e0ae      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 020c 	and.w	r2, r3, #12
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d1eb      	bne.n	8005fba <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d208      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	490f      	ldr	r1, [pc, #60]	; (8006048 <HAL_RCC_ClockConfig+0x23c>)
 800600c:	4313      	orrs	r3, r2
 800600e:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d216      	bcs.n	800604c <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 0207 	bic.w	r2, r3, #7
 8006026:	4907      	ldr	r1, [pc, #28]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_ClockConfig+0x238>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d007      	beq.n	800604c <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e076      	b.n	800612e <HAL_RCC_ClockConfig+0x322>
 8006040:	0800d6bc 	.word	0x0800d6bc
 8006044:	40022000 	.word	0x40022000
 8006048:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d025      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d018      	beq.n	8006092 <HAL_RCC_ClockConfig+0x286>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006068:	d013      	beq.n	8006092 <HAL_RCC_ClockConfig+0x286>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006072:	d00e      	beq.n	8006092 <HAL_RCC_ClockConfig+0x286>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800607c:	d009      	beq.n	8006092 <HAL_RCC_ClockConfig+0x286>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006086:	d004      	beq.n	8006092 <HAL_RCC_ClockConfig+0x286>
 8006088:	f240 41f3 	movw	r1, #1267	; 0x4f3
 800608c:	482a      	ldr	r0, [pc, #168]	; (8006138 <HAL_RCC_ClockConfig+0x32c>)
 800608e:	f7fb fa7c 	bl	800158a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006092:	4b2a      	ldr	r3, [pc, #168]	; (800613c <HAL_RCC_ClockConfig+0x330>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	4927      	ldr	r1, [pc, #156]	; (800613c <HAL_RCC_ClockConfig+0x330>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d026      	beq.n	80060fe <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d018      	beq.n	80060ea <HAL_RCC_ClockConfig+0x2de>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c0:	d013      	beq.n	80060ea <HAL_RCC_ClockConfig+0x2de>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80060ca:	d00e      	beq.n	80060ea <HAL_RCC_ClockConfig+0x2de>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060d4:	d009      	beq.n	80060ea <HAL_RCC_ClockConfig+0x2de>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060de:	d004      	beq.n	80060ea <HAL_RCC_ClockConfig+0x2de>
 80060e0:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80060e4:	4814      	ldr	r0, [pc, #80]	; (8006138 <HAL_RCC_ClockConfig+0x32c>)
 80060e6:	f7fb fa50 	bl	800158a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <HAL_RCC_ClockConfig+0x330>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4910      	ldr	r1, [pc, #64]	; (800613c <HAL_RCC_ClockConfig+0x330>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060fe:	f000 f825 	bl	800614c <HAL_RCC_GetSysClockFreq>
 8006102:	4602      	mov	r2, r0
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <HAL_RCC_ClockConfig+0x330>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	091b      	lsrs	r3, r3, #4
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	490c      	ldr	r1, [pc, #48]	; (8006140 <HAL_RCC_ClockConfig+0x334>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <HAL_RCC_ClockConfig+0x338>)
 800611c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <HAL_RCC_ClockConfig+0x33c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fb ffe2 	bl	80020ec <HAL_InitTick>
 8006128:	4603      	mov	r3, r0
 800612a:	72fb      	strb	r3, [r7, #11]

  return status;
 800612c:	7afb      	ldrb	r3, [r7, #11]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	0800d6bc 	.word	0x0800d6bc
 800613c:	40021000 	.word	0x40021000
 8006140:	0800db68 	.word	0x0800db68
 8006144:	20000004 	.word	0x20000004
 8006148:	20000008 	.word	0x20000008

0800614c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800614c:	b480      	push	{r7}
 800614e:	b089      	sub	sp, #36	; 0x24
 8006150:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800615a:	4b3e      	ldr	r3, [pc, #248]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 030c 	and.w	r3, r3, #12
 8006162:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006164:	4b3b      	ldr	r3, [pc, #236]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_GetSysClockFreq+0x34>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b0c      	cmp	r3, #12
 8006178:	d121      	bne.n	80061be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d11e      	bne.n	80061be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006180:	4b34      	ldr	r3, [pc, #208]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d107      	bne.n	800619c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800618c:	4b31      	ldr	r3, [pc, #196]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 800618e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e005      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800619c:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061a8:	4a2b      	ldr	r2, [pc, #172]	; (8006258 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10d      	bne.n	80061d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061bc:	e00a      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d102      	bne.n	80061ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061c4:	4b25      	ldr	r3, [pc, #148]	; (800625c <HAL_RCC_GetSysClockFreq+0x110>)
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e004      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d101      	bne.n	80061d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061d0:	4b23      	ldr	r3, [pc, #140]	; (8006260 <HAL_RCC_GetSysClockFreq+0x114>)
 80061d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b0c      	cmp	r3, #12
 80061d8:	d134      	bne.n	8006244 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061da:	4b1e      	ldr	r3, [pc, #120]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d003      	beq.n	80061f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d003      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0xac>
 80061f0:	e005      	b.n	80061fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80061f2:	4b1a      	ldr	r3, [pc, #104]	; (800625c <HAL_RCC_GetSysClockFreq+0x110>)
 80061f4:	617b      	str	r3, [r7, #20]
      break;
 80061f6:	e005      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80061f8:	4b19      	ldr	r3, [pc, #100]	; (8006260 <HAL_RCC_GetSysClockFreq+0x114>)
 80061fa:	617b      	str	r3, [r7, #20]
      break;
 80061fc:	e002      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	617b      	str	r3, [r7, #20]
      break;
 8006202:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	091b      	lsrs	r3, r3, #4
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	3301      	adds	r3, #1
 8006210:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	0a1b      	lsrs	r3, r3, #8
 8006218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	fb03 f202 	mul.w	r2, r3, r2
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <HAL_RCC_GetSysClockFreq+0x108>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	0e5b      	lsrs	r3, r3, #25
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	3301      	adds	r3, #1
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006244:	69bb      	ldr	r3, [r7, #24]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3724      	adds	r7, #36	; 0x24
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000
 8006258:	0800db80 	.word	0x0800db80
 800625c:	00f42400 	.word	0x00f42400
 8006260:	02dc6c00 	.word	0x02dc6c00

08006264 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_RCC_GetHCLKFreq+0x14>)
 800626a:	681b      	ldr	r3, [r3, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	20000004 	.word	0x20000004

0800627c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006280:	f7ff fff0 	bl	8006264 <HAL_RCC_GetHCLKFreq>
 8006284:	4602      	mov	r2, r0
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	0a1b      	lsrs	r3, r3, #8
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	4904      	ldr	r1, [pc, #16]	; (80062a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006292:	5ccb      	ldrb	r3, [r1, r3]
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800629c:	4618      	mov	r0, r3
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40021000 	.word	0x40021000
 80062a4:	0800db78 	.word	0x0800db78

080062a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_RCC_GetClockConfig+0x1a>
 80062b8:	f240 6192 	movw	r1, #1682	; 0x692
 80062bc:	4818      	ldr	r0, [pc, #96]	; (8006320 <HAL_RCC_GetClockConfig+0x78>)
 80062be:	f7fb f964 	bl	800158a <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <HAL_RCC_GetClockConfig+0x2a>
 80062c8:	f240 6193 	movw	r1, #1683	; 0x693
 80062cc:	4814      	ldr	r0, [pc, #80]	; (8006320 <HAL_RCC_GetClockConfig+0x78>)
 80062ce:	f7fb f95c 	bl	800158a <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	220f      	movs	r2, #15
 80062d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80062d8:	4b12      	ldr	r3, [pc, #72]	; (8006324 <HAL_RCC_GetClockConfig+0x7c>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0203 	and.w	r2, r3, #3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80062e4:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <HAL_RCC_GetClockConfig+0x7c>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <HAL_RCC_GetClockConfig+0x7c>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_RCC_GetClockConfig+0x7c>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	08db      	lsrs	r3, r3, #3
 8006302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_RCC_GetClockConfig+0x80>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0207 	and.w	r2, r3, #7
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	601a      	str	r2, [r3, #0]
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	0800d6bc 	.word	0x0800d6bc
 8006324:	40021000 	.word	0x40021000
 8006328:	40022000 	.word	0x40022000

0800632c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006338:	4b2a      	ldr	r3, [pc, #168]	; (80063e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006344:	f7fe ffa6 	bl	8005294 <HAL_PWREx_GetVoltageRange>
 8006348:	6178      	str	r0, [r7, #20]
 800634a:	e014      	b.n	8006376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800634c:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	4a24      	ldr	r2, [pc, #144]	; (80063e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006356:	6593      	str	r3, [r2, #88]	; 0x58
 8006358:	4b22      	ldr	r3, [pc, #136]	; (80063e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006364:	f7fe ff96 	bl	8005294 <HAL_PWREx_GetVoltageRange>
 8006368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800636a:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636e:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006374:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637c:	d10b      	bne.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b80      	cmp	r3, #128	; 0x80
 8006382:	d919      	bls.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2ba0      	cmp	r3, #160	; 0xa0
 8006388:	d902      	bls.n	8006390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800638a:	2302      	movs	r3, #2
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	e013      	b.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006390:	2301      	movs	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e010      	b.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d902      	bls.n	80063a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800639c:	2303      	movs	r3, #3
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	e00a      	b.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d102      	bne.n	80063ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063a8:	2302      	movs	r3, #2
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	e004      	b.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b70      	cmp	r3, #112	; 0x70
 80063b2:	d101      	bne.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063b4:	2301      	movs	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f023 0207 	bic.w	r2, r3, #7
 80063c0:	4909      	ldr	r1, [pc, #36]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063c8:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d001      	beq.n	80063da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40021000 	.word	0x40021000
 80063e8:	40022000 	.word	0x40022000

080063ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063f4:	2300      	movs	r3, #0
 80063f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063f8:	2300      	movs	r3, #0
 80063fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	4b82      	ldr	r3, [pc, #520]	; (800660c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b80      	ldr	r3, [pc, #512]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x30>
 8006414:	21c9      	movs	r1, #201	; 0xc9
 8006416:	487f      	ldr	r0, [pc, #508]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8006418:	f7fb f8b7 	bl	800158a <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006424:	2b00      	cmp	r3, #0
 8006426:	d043      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006438:	d008      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x60>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006442:	d003      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006444:	21d1      	movs	r1, #209	; 0xd1
 8006446:	4873      	ldr	r0, [pc, #460]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8006448:	f7fb f89f 	bl	800158a <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006450:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006454:	d01a      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006456:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800645a:	d814      	bhi.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006464:	d10f      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006466:	4b6c      	ldr	r3, [pc, #432]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	4a6b      	ldr	r2, [pc, #428]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006472:	e00c      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xa2>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3304      	adds	r3, #4
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fb26 	bl	8006acc <RCCEx_PLLSAI1_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006484:	e003      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xa2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	74fb      	strb	r3, [r7, #19]
      break;
 800648a:	e000      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      break;
 800648c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800648e:	7cfb      	ldrb	r3, [r7, #19]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006494:	4b60      	ldr	r3, [pc, #384]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a2:	495d      	ldr	r1, [pc, #372]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7cfb      	ldrb	r3, [r7, #19]
 80064ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80bc 	beq.w	8006636 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064be:	2300      	movs	r3, #0
 80064c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d013      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d2:	d00e      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064dc:	d009      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e6:	d004      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80064ec:	4849      	ldr	r0, [pc, #292]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80064ee:	f7fb f84c 	bl	800158a <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064f2:	4b49      	ldr	r3, [pc, #292]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00d      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006508:	4b43      	ldr	r3, [pc, #268]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800650a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650c:	4a42      	ldr	r2, [pc, #264]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800650e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006512:	6593      	str	r3, [r2, #88]	; 0x58
 8006514:	4b40      	ldr	r3, [pc, #256]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006520:	2301      	movs	r3, #1
 8006522:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006524:	4b3d      	ldr	r3, [pc, #244]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a3c      	ldr	r2, [pc, #240]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800652a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006530:	f7fc f8ea 	bl	8002708 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006536:	e009      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006538:	f7fc f8e6 	bl	8002708 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d902      	bls.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        ret = HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	74fb      	strb	r3, [r7, #19]
        break;
 800654a:	e005      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800654c:	4b33      	ldr	r3, [pc, #204]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0ef      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    if(ret == HAL_OK)
 8006558:	7cfb      	ldrb	r3, [r7, #19]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d160      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x234>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800655e:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006568:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01e      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	429a      	cmp	r2, r3
 8006578:	d019      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006584:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658c:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800658e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659c:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800659e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065a6:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d016      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fc f8a6 	bl	8002708 <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065be:	e00b      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c0:	f7fc f8a2 	bl	8002708 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d902      	bls.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
          {
            ret = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	74fb      	strb	r3, [r7, #19]
            break;
 80065d6:	e006      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ec      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
          }
        }
      }

      if(ret == HAL_OK)
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x218>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fa:	4907      	ldr	r1, [pc, #28]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006602:	e00f      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	74bb      	strb	r3, [r7, #18]
 8006608:	e00c      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800660a:	bf00      	nop
 800660c:	000ecfe7 	.word	0x000ecfe7
 8006610:	fff13018 	.word	0xfff13018
 8006614:	0800d730 	.word	0x0800d730
 8006618:	40021000 	.word	0x40021000
 800661c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	7cfb      	ldrb	r3, [r7, #19]
 8006622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006624:	7c7b      	ldrb	r3, [r7, #17]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d105      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800662a:	4b9c      	ldr	r3, [pc, #624]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	4a9b      	ldr	r2, [pc, #620]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006634:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01f      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d00c      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	2b03      	cmp	r3, #3
 8006658:	d008      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d004      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006662:	f240 1199 	movw	r1, #409	; 0x199
 8006666:	488e      	ldr	r0, [pc, #568]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8006668:	f7fa ff8f 	bl	800158a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800666c:	4b8b      	ldr	r3, [pc, #556]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006672:	f023 0203 	bic.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	4988      	ldr	r1, [pc, #544]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01f      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	2b04      	cmp	r3, #4
 800669c:	d00c      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	2b0c      	cmp	r3, #12
 80066a4:	d008      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d004      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80066ae:	f240 11a3 	movw	r1, #419	; 0x1a3
 80066b2:	487b      	ldr	r0, [pc, #492]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80066b4:	f7fa ff69 	bl	800158a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066b8:	4b78      	ldr	r3, [pc, #480]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066be:	f023 020c 	bic.w	r2, r3, #12
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	4975      	ldr	r1, [pc, #468]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01f      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d010      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d00c      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	2b30      	cmp	r3, #48	; 0x30
 80066f0:	d008      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	d004      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80066fa:	f240 11af 	movw	r1, #431	; 0x1af
 80066fe:	4868      	ldr	r0, [pc, #416]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8006700:	f7fa ff43 	bl	800158a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006704:	4b65      	ldr	r3, [pc, #404]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006712:	4962      	ldr	r1, [pc, #392]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d022      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d013      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006736:	d00e      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006740:	d009      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674a:	d004      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800674c:	f240 11d7 	movw	r1, #471	; 0x1d7
 8006750:	4853      	ldr	r0, [pc, #332]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8006752:	f7fa ff1a 	bl	800158a <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006756:	4b51      	ldr	r3, [pc, #324]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	494d      	ldr	r1, [pc, #308]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006788:	d00e      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006792:	d009      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800679c:	d004      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800679e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80067a2:	483f      	ldr	r0, [pc, #252]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80067a4:	f7fa fef1 	bl	800158a <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067a8:	4b3c      	ldr	r3, [pc, #240]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	4939      	ldr	r1, [pc, #228]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d022      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d013      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067da:	d00e      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067e4:	d009      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067ee:	d004      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80067f0:	f240 11e7 	movw	r1, #487	; 0x1e7
 80067f4:	482a      	ldr	r0, [pc, #168]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80067f6:	f7fa fec8 	bl	800158a <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067fa:	4b28      	ldr	r3, [pc, #160]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	4924      	ldr	r1, [pc, #144]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01d      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x456>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682c:	d009      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x456>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006836:	d004      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x456>
 8006838:	f240 11ef 	movw	r1, #495	; 0x1ef
 800683c:	4818      	ldr	r0, [pc, #96]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800683e:	f7fa fea4 	bl	800158a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006842:	4b16      	ldr	r3, [pc, #88]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	4912      	ldr	r1, [pc, #72]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006860:	2b00      	cmp	r3, #0
 8006862:	d023      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006874:	d009      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687e:	d004      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8006880:	f240 11fb 	movw	r1, #507	; 0x1fb
 8006884:	4806      	ldr	r0, [pc, #24]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8006886:	f7fa fe80 	bl	800158a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800688a:	4b04      	ldr	r3, [pc, #16]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006898:	e004      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800689a:	bf00      	nop
 800689c:	40021000 	.word	0x40021000
 80068a0:	0800d730 	.word	0x0800d730
 80068a4:	4987      	ldr	r1, [pc, #540]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01d      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00e      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c8:	d009      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d2:	d004      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80068d4:	f240 2107 	movw	r1, #519	; 0x207
 80068d8:	487b      	ldr	r0, [pc, #492]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 80068da:	f7fa fe56 	bl	800158a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068de:	4b79      	ldr	r3, [pc, #484]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	4975      	ldr	r1, [pc, #468]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d040      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006904:	2b00      	cmp	r3, #0
 8006906:	d013      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006910:	d00e      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800691a:	d009      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006920:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006924:	d004      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8006926:	f240 2141 	movw	r1, #577	; 0x241
 800692a:	4867      	ldr	r0, [pc, #412]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 800692c:	f7fa fe2d 	bl	800158a <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006930:	4b64      	ldr	r3, [pc, #400]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693e:	4961      	ldr	r1, [pc, #388]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694e:	d106      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006950:	4b5c      	ldr	r3, [pc, #368]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	4a5b      	ldr	r2, [pc, #364]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800695a:	60d3      	str	r3, [r2, #12]
 800695c:	e011      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006966:	d10c      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	2101      	movs	r1, #1
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f8ac 	bl	8006acc <RCCEx_PLLSAI1_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x596>
      {
        /* set overall return value */
        status = ret;
 800697e:	7cfb      	ldrb	r3, [r7, #19]
 8006980:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d040      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x624>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d013      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800699e:	d00e      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a8:	d009      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069b2:	d004      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80069b4:	f240 2166 	movw	r1, #614	; 0x266
 80069b8:	4843      	ldr	r0, [pc, #268]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 80069ba:	f7fa fde6 	bl	800158a <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069be:	4b41      	ldr	r3, [pc, #260]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069cc:	493d      	ldr	r1, [pc, #244]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069dc:	d106      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x600>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069de:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	4a38      	ldr	r2, [pc, #224]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80069e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069e8:	60d3      	str	r3, [r2, #12]
 80069ea:	e011      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x624>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069f4:	d10c      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3304      	adds	r3, #4
 80069fa:	2101      	movs	r1, #1
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 f865 	bl	8006acc <RCCEx_PLLSAI1_Config>
 8006a02:	4603      	mov	r3, r0
 8006a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x624>
      {
        /* set overall return value */
        status = ret;
 8006a0c:	7cfb      	ldrb	r3, [r7, #19]
 8006a0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d02f      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a2c:	d009      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a36:	d004      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8006a38:	f240 2186 	movw	r1, #646	; 0x286
 8006a3c:	4822      	ldr	r0, [pc, #136]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 8006a3e:	f7fa fda4 	bl	800158a <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a42:	4b20      	ldr	r3, [pc, #128]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a50:	491c      	ldr	r1, [pc, #112]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2102      	movs	r1, #2
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f82f 	bl	8006acc <RCCEx_PLLSAI1_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a72:	7cfb      	ldrb	r3, [r7, #19]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* set overall return value */
        status = ret;
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d018      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x6ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a98:	d004      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006a9a:	f240 21b2 	movw	r1, #690	; 0x2b2
 8006a9e:	480a      	ldr	r0, [pc, #40]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 8006aa0:	f7fa fd73 	bl	800158a <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006aa4:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	4904      	ldr	r1, [pc, #16]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006aba:	7cbb      	ldrb	r3, [r7, #18]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	0800d730 	.word	0x0800d730

08006acc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d010      	beq.n	8006b04 <RCCEx_PLLSAI1_Config+0x38>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d00c      	beq.n	8006b04 <RCCEx_PLLSAI1_Config+0x38>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d008      	beq.n	8006b04 <RCCEx_PLLSAI1_Config+0x38>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d004      	beq.n	8006b04 <RCCEx_PLLSAI1_Config+0x38>
 8006afa:	f640 315e 	movw	r1, #2910	; 0xb5e
 8006afe:	4887      	ldr	r0, [pc, #540]	; (8006d1c <RCCEx_PLLSAI1_Config+0x250>)
 8006b00:	f7fa fd43 	bl	800158a <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <RCCEx_PLLSAI1_Config+0x48>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d904      	bls.n	8006b1e <RCCEx_PLLSAI1_Config+0x52>
 8006b14:	f640 315f 	movw	r1, #2911	; 0xb5f
 8006b18:	4880      	ldr	r0, [pc, #512]	; (8006d1c <RCCEx_PLLSAI1_Config+0x250>)
 8006b1a:	f7fa fd36 	bl	800158a <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b07      	cmp	r3, #7
 8006b24:	d903      	bls.n	8006b2e <RCCEx_PLLSAI1_Config+0x62>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b56      	cmp	r3, #86	; 0x56
 8006b2c:	d904      	bls.n	8006b38 <RCCEx_PLLSAI1_Config+0x6c>
 8006b2e:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8006b32:	487a      	ldr	r0, [pc, #488]	; (8006d1c <RCCEx_PLLSAI1_Config+0x250>)
 8006b34:	f7fa fd29 	bl	800158a <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <RCCEx_PLLSAI1_Config+0x90>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <RCCEx_PLLSAI1_Config+0x90>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <RCCEx_PLLSAI1_Config+0xa0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <RCCEx_PLLSAI1_Config+0xaa>
 8006b6c:	f640 3161 	movw	r1, #2913	; 0xb61
 8006b70:	486a      	ldr	r0, [pc, #424]	; (8006d1c <RCCEx_PLLSAI1_Config+0x250>)
 8006b72:	f7fa fd0a 	bl	800158a <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b76:	4b6a      	ldr	r3, [pc, #424]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b82:	4b67      	ldr	r3, [pc, #412]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f003 0203 	and.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d10d      	bne.n	8006bae <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
       ||
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b9a:	4b61      	ldr	r3, [pc, #388]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	091b      	lsrs	r3, r3, #4
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
       ||
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d047      	beq.n	8006c3e <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	e044      	b.n	8006c3e <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d018      	beq.n	8006bee <RCCEx_PLLSAI1_Config+0x122>
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d825      	bhi.n	8006c0c <RCCEx_PLLSAI1_Config+0x140>
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d002      	beq.n	8006bca <RCCEx_PLLSAI1_Config+0xfe>
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d009      	beq.n	8006bdc <RCCEx_PLLSAI1_Config+0x110>
 8006bc8:	e020      	b.n	8006c0c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bca:	4b55      	ldr	r3, [pc, #340]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d11d      	bne.n	8006c12 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bda:	e01a      	b.n	8006c12 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bdc:	4b50      	ldr	r3, [pc, #320]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d116      	bne.n	8006c16 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bec:	e013      	b.n	8006c16 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006bee:	4b4c      	ldr	r3, [pc, #304]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10f      	bne.n	8006c1a <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bfa:	4b49      	ldr	r3, [pc, #292]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c0a:	e006      	b.n	8006c1a <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c10:	e004      	b.n	8006c1c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8006c12:	bf00      	nop
 8006c14:	e002      	b.n	8006c1c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8006c16:	bf00      	nop
 8006c18:	e000      	b.n	8006c1c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8006c1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10d      	bne.n	8006c3e <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c22:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6819      	ldr	r1, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	430b      	orrs	r3, r1
 8006c38:	4939      	ldr	r1, [pc, #228]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 80ba 	bne.w	8006dba <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a35      	ldr	r2, [pc, #212]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006c4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c52:	f7fb fd59 	bl	8002708 <HAL_GetTick>
 8006c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c58:	e009      	b.n	8006c6e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c5a:	f7fb fd55 	bl	8002708 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d902      	bls.n	8006c6e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	73fb      	strb	r3, [r7, #15]
        break;
 8006c6c:	e005      	b.n	8006c7a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c6e:	4b2c      	ldr	r3, [pc, #176]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1ef      	bne.n	8006c5a <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 809c 	bne.w	8006dba <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d11d      	bne.n	8006cc4 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d903      	bls.n	8006c98 <RCCEx_PLLSAI1_Config+0x1cc>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b1f      	cmp	r3, #31
 8006c96:	d904      	bls.n	8006ca2 <RCCEx_PLLSAI1_Config+0x1d6>
 8006c98:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8006c9c:	481f      	ldr	r0, [pc, #124]	; (8006d1c <RCCEx_PLLSAI1_Config+0x250>)
 8006c9e:	f7fa fc74 	bl	800158a <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca2:	4b1f      	ldr	r3, [pc, #124]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6892      	ldr	r2, [r2, #8]
 8006cb2:	0211      	lsls	r1, r2, #8
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	68d2      	ldr	r2, [r2, #12]
 8006cb8:	06d2      	lsls	r2, r2, #27
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	4918      	ldr	r1, [pc, #96]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	610b      	str	r3, [r1, #16]
 8006cc2:	e056      	b.n	8006d72 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d12c      	bne.n	8006d24 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d010      	beq.n	8006cf4 <RCCEx_PLLSAI1_Config+0x228>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d00c      	beq.n	8006cf4 <RCCEx_PLLSAI1_Config+0x228>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b06      	cmp	r3, #6
 8006ce0:	d008      	beq.n	8006cf4 <RCCEx_PLLSAI1_Config+0x228>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d004      	beq.n	8006cf4 <RCCEx_PLLSAI1_Config+0x228>
 8006cea:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8006cee:	480b      	ldr	r0, [pc, #44]	; (8006d1c <RCCEx_PLLSAI1_Config+0x250>)
 8006cf0:	f7fa fc4b 	bl	800158a <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6892      	ldr	r2, [r2, #8]
 8006d04:	0211      	lsls	r1, r2, #8
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6912      	ldr	r2, [r2, #16]
 8006d0a:	0852      	lsrs	r2, r2, #1
 8006d0c:	3a01      	subs	r2, #1
 8006d0e:	0552      	lsls	r2, r2, #21
 8006d10:	430a      	orrs	r2, r1
 8006d12:	4903      	ldr	r1, [pc, #12]	; (8006d20 <RCCEx_PLLSAI1_Config+0x254>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	610b      	str	r3, [r1, #16]
 8006d18:	e02b      	b.n	8006d72 <RCCEx_PLLSAI1_Config+0x2a6>
 8006d1a:	bf00      	nop
 8006d1c:	0800d730 	.word	0x0800d730
 8006d20:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d010      	beq.n	8006d4e <RCCEx_PLLSAI1_Config+0x282>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d00c      	beq.n	8006d4e <RCCEx_PLLSAI1_Config+0x282>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	2b06      	cmp	r3, #6
 8006d3a:	d008      	beq.n	8006d4e <RCCEx_PLLSAI1_Config+0x282>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d004      	beq.n	8006d4e <RCCEx_PLLSAI1_Config+0x282>
 8006d44:	f640 31ea 	movw	r1, #3050	; 0xbea
 8006d48:	481e      	ldr	r0, [pc, #120]	; (8006dc4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8006d4a:	f7fa fc1e 	bl	800158a <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6892      	ldr	r2, [r2, #8]
 8006d5e:	0211      	lsls	r1, r2, #8
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6952      	ldr	r2, [r2, #20]
 8006d64:	0852      	lsrs	r2, r2, #1
 8006d66:	3a01      	subs	r2, #1
 8006d68:	0652      	lsls	r2, r2, #25
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	4916      	ldr	r1, [pc, #88]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7e:	f7fb fcc3 	bl	8002708 <HAL_GetTick>
 8006d82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d84:	e009      	b.n	8006d9a <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d86:	f7fb fcbf 	bl	8002708 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d902      	bls.n	8006d9a <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	73fb      	strb	r3, [r7, #15]
          break;
 8006d98:	e005      	b.n	8006da6 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0ef      	beq.n	8006d86 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	4904      	ldr	r1, [pc, #16]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	0800d730 	.word	0x0800d730
 8006dc8:	40021000 	.word	0x40021000

08006dcc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e052      	b.n	8006e84 <HAL_RNG_Init+0xb8>
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2a      	ldr	r2, [pc, #168]	; (8006e8c <HAL_RNG_Init+0xc0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <HAL_RNG_Init+0x24>
 8006de8:	21a7      	movs	r1, #167	; 0xa7
 8006dea:	4829      	ldr	r0, [pc, #164]	; (8006e90 <HAL_RNG_Init+0xc4>)
 8006dec:	f7fa fbcd 	bl	800158a <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	795b      	ldrb	r3, [r3, #5]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <HAL_RNG_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fa fbdd 	bl	80015c0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0204 	orr.w	r2, r2, #4
 8006e1a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d104      	bne.n	8006e34 <HAL_RNG_Init+0x68>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e027      	b.n	8006e84 <HAL_RNG_Init+0xb8>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006e34:	f7fb fc68 	bl	8002708 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006e3a:	e015      	b.n	8006e68 <HAL_RNG_Init+0x9c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006e3c:	f7fb fc64 	bl	8002708 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d90e      	bls.n	8006e68 <HAL_RNG_Init+0x9c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d107      	bne.n	8006e68 <HAL_RNG_Init+0x9c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e00d      	b.n	8006e84 <HAL_RNG_Init+0xb8>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d0e2      	beq.n	8006e3c <HAL_RNG_Init+0x70>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	50060800 	.word	0x50060800
 8006e90:	0800d7a4 	.word	0x0800d7a4

08006e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e1dd      	b.n	8007262 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a7b      	ldr	r2, [pc, #492]	; (8007098 <HAL_SPI_Init+0x204>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_SPI_Init+0x3a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a79      	ldr	r2, [pc, #484]	; (800709c <HAL_SPI_Init+0x208>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_SPI_Init+0x3a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a78      	ldr	r2, [pc, #480]	; (80070a0 <HAL_SPI_Init+0x20c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_SPI_Init+0x3a>
 8006ec4:	f240 1145 	movw	r1, #325	; 0x145
 8006ec8:	4876      	ldr	r0, [pc, #472]	; (80070a4 <HAL_SPI_Init+0x210>)
 8006eca:	f7fa fb5e 	bl	800158a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <HAL_SPI_Init+0x56>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ede:	d004      	beq.n	8006eea <HAL_SPI_Init+0x56>
 8006ee0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006ee4:	486f      	ldr	r0, [pc, #444]	; (80070a4 <HAL_SPI_Init+0x210>)
 8006ee6:	f7fa fb50 	bl	800158a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00e      	beq.n	8006f10 <HAL_SPI_Init+0x7c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efa:	d009      	beq.n	8006f10 <HAL_SPI_Init+0x7c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f04:	d004      	beq.n	8006f10 <HAL_SPI_Init+0x7c>
 8006f06:	f240 1147 	movw	r1, #327	; 0x147
 8006f0a:	4866      	ldr	r0, [pc, #408]	; (80070a4 <HAL_SPI_Init+0x210>)
 8006f0c:	f7fa fb3d 	bl	800158a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f18:	d040      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006f22:	d03b      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006f2c:	d036      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f36:	d031      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8006f40:	d02c      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006f4a:	d027      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006f54:	d022      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5e:	d01d      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f68:	d018      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f72:	d013      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006f7c:	d00e      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f86:	d009      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f90:	d004      	beq.n	8006f9c <HAL_SPI_Init+0x108>
 8006f92:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006f96:	4843      	ldr	r0, [pc, #268]	; (80070a4 <HAL_SPI_Init+0x210>)
 8006f98:	f7fa faf7 	bl	800158a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa4:	d00d      	beq.n	8006fc2 <HAL_SPI_Init+0x12e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <HAL_SPI_Init+0x12e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fb6:	d004      	beq.n	8006fc2 <HAL_SPI_Init+0x12e>
 8006fb8:	f240 1149 	movw	r1, #329	; 0x149
 8006fbc:	4839      	ldr	r0, [pc, #228]	; (80070a4 <HAL_SPI_Init+0x210>)
 8006fbe:	f7fa fae4 	bl	800158a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d008      	beq.n	8006fdc <HAL_SPI_Init+0x148>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <HAL_SPI_Init+0x148>
 8006fd2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006fd6:	4833      	ldr	r0, [pc, #204]	; (80070a4 <HAL_SPI_Init+0x210>)
 8006fd8:	f7fa fad7 	bl	800158a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d020      	beq.n	8007026 <HAL_SPI_Init+0x192>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d01c      	beq.n	8007026 <HAL_SPI_Init+0x192>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d018      	beq.n	8007026 <HAL_SPI_Init+0x192>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	2b18      	cmp	r3, #24
 8006ffa:	d014      	beq.n	8007026 <HAL_SPI_Init+0x192>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	2b20      	cmp	r3, #32
 8007002:	d010      	beq.n	8007026 <HAL_SPI_Init+0x192>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	2b28      	cmp	r3, #40	; 0x28
 800700a:	d00c      	beq.n	8007026 <HAL_SPI_Init+0x192>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	2b30      	cmp	r3, #48	; 0x30
 8007012:	d008      	beq.n	8007026 <HAL_SPI_Init+0x192>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	2b38      	cmp	r3, #56	; 0x38
 800701a:	d004      	beq.n	8007026 <HAL_SPI_Init+0x192>
 800701c:	f240 114b 	movw	r1, #331	; 0x14b
 8007020:	4820      	ldr	r0, [pc, #128]	; (80070a4 <HAL_SPI_Init+0x210>)
 8007022:	f7fa fab2 	bl	800158a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <HAL_SPI_Init+0x1ac>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d004      	beq.n	8007040 <HAL_SPI_Init+0x1ac>
 8007036:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800703a:	481a      	ldr	r0, [pc, #104]	; (80070a4 <HAL_SPI_Init+0x210>)
 800703c:	f7fa faa5 	bl	800158a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_SPI_Init+0x1c6>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	2b10      	cmp	r3, #16
 800704e:	d004      	beq.n	800705a <HAL_SPI_Init+0x1c6>
 8007050:	f240 114d 	movw	r1, #333	; 0x14d
 8007054:	4813      	ldr	r0, [pc, #76]	; (80070a4 <HAL_SPI_Init+0x210>)
 8007056:	f7fa fa98 	bl	800158a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d151      	bne.n	8007106 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_SPI_Init+0x1e8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d004      	beq.n	800707c <HAL_SPI_Init+0x1e8>
 8007072:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007076:	480b      	ldr	r0, [pc, #44]	; (80070a4 <HAL_SPI_Init+0x210>)
 8007078:	f7fa fa87 	bl	800158a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d011      	beq.n	80070a8 <HAL_SPI_Init+0x214>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d00d      	beq.n	80070a8 <HAL_SPI_Init+0x214>
 800708c:	f240 1151 	movw	r1, #337	; 0x151
 8007090:	4804      	ldr	r0, [pc, #16]	; (80070a4 <HAL_SPI_Init+0x210>)
 8007092:	f7fa fa7a 	bl	800158a <assert_failed>
 8007096:	e007      	b.n	80070a8 <HAL_SPI_Init+0x214>
 8007098:	40013000 	.word	0x40013000
 800709c:	40003800 	.word	0x40003800
 80070a0:	40003c00 	.word	0x40003c00
 80070a4:	0800d818 	.word	0x0800d818

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070b0:	d125      	bne.n	80070fe <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d050      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d04c      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	d048      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	2b18      	cmp	r3, #24
 80070d0:	d044      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d040      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	2b28      	cmp	r3, #40	; 0x28
 80070e0:	d03c      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	2b30      	cmp	r3, #48	; 0x30
 80070e8:	d038      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	2b38      	cmp	r3, #56	; 0x38
 80070f0:	d034      	beq.n	800715c <HAL_SPI_Init+0x2c8>
 80070f2:	f240 1155 	movw	r1, #341	; 0x155
 80070f6:	485d      	ldr	r0, [pc, #372]	; (800726c <HAL_SPI_Init+0x3d8>)
 80070f8:	f7fa fa47 	bl	800158a <assert_failed>
 80070fc:	e02e      	b.n	800715c <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	61da      	str	r2, [r3, #28]
 8007104:	e02a      	b.n	800715c <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d020      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b08      	cmp	r3, #8
 8007114:	d01c      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	2b10      	cmp	r3, #16
 800711c:	d018      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	2b18      	cmp	r3, #24
 8007124:	d014      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	2b20      	cmp	r3, #32
 800712c:	d010      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	2b28      	cmp	r3, #40	; 0x28
 8007134:	d00c      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	2b30      	cmp	r3, #48	; 0x30
 800713c:	d008      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	2b38      	cmp	r3, #56	; 0x38
 8007144:	d004      	beq.n	8007150 <HAL_SPI_Init+0x2bc>
 8007146:	f240 115f 	movw	r1, #351	; 0x15f
 800714a:	4848      	ldr	r0, [pc, #288]	; (800726c <HAL_SPI_Init+0x3d8>)
 800714c:	f7fa fa1d 	bl	800158a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fa fab0 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007192:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800719c:	d902      	bls.n	80071a4 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e002      	b.n	80071aa <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071b2:	d007      	beq.n	80071c4 <HAL_SPI_Init+0x330>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071bc:	d002      	beq.n	80071c4 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007206:	ea42 0103 	orr.w	r1, r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	0c1b      	lsrs	r3, r3, #16
 8007220:	f003 0204 	and.w	r2, r3, #4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007240:	ea42 0103 	orr.w	r1, r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	0800d818 	.word	0x0800d818

08007270 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d009      	beq.n	80072a0 <HAL_SPI_Transmit+0x30>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007294:	d004      	beq.n	80072a0 <HAL_SPI_Transmit+0x30>
 8007296:	f44f 714f 	mov.w	r1, #828	; 0x33c
 800729a:	4886      	ldr	r0, [pc, #536]	; (80074b4 <HAL_SPI_Transmit+0x244>)
 800729c:	f7fa f975 	bl	800158a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <HAL_SPI_Transmit+0x3e>
 80072aa:	2302      	movs	r3, #2
 80072ac:	e15a      	b.n	8007564 <HAL_SPI_Transmit+0x2f4>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072b6:	f7fb fa27 	bl	8002708 <HAL_GetTick>
 80072ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d002      	beq.n	80072d2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80072cc:	2302      	movs	r3, #2
 80072ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072d0:	e13f      	b.n	8007552 <HAL_SPI_Transmit+0x2e2>
  }

  if ((pData == NULL) || (Size == 0U))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_SPI_Transmit+0x6e>
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072e2:	e136      	b.n	8007552 <HAL_SPI_Transmit+0x2e2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2203      	movs	r2, #3
 80072e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	88fa      	ldrh	r2, [r7, #6]
 8007302:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732e:	d10f      	bne.n	8007350 <HAL_SPI_Transmit+0xe0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800733e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800734e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d007      	beq.n	800736e <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007376:	d94b      	bls.n	8007410 <HAL_SPI_Transmit+0x1a0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <HAL_SPI_Transmit+0x116>
 8007380:	8afb      	ldrh	r3, [r7, #22]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d13e      	bne.n	8007404 <HAL_SPI_Transmit+0x194>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	881a      	ldrh	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	1c9a      	adds	r2, r3, #2
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073aa:	e02b      	b.n	8007404 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d112      	bne.n	80073e0 <HAL_SPI_Transmit+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	881a      	ldrh	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	1c9a      	adds	r2, r3, #2
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073de:	e011      	b.n	8007404 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073e0:	f7fb f992 	bl	8002708 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d803      	bhi.n	80073f8 <HAL_SPI_Transmit+0x188>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d102      	bne.n	80073fe <HAL_SPI_Transmit+0x18e>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <HAL_SPI_Transmit+0x194>
        {
          errorcode = HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007402:	e0a6      	b.n	8007552 <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1ce      	bne.n	80073ac <HAL_SPI_Transmit+0x13c>
 800740e:	e07e      	b.n	800750e <HAL_SPI_Transmit+0x29e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <HAL_SPI_Transmit+0x1ae>
 8007418:	8afb      	ldrh	r3, [r7, #22]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d172      	bne.n	8007504 <HAL_SPI_Transmit+0x294>
    {
      if (hspi->TxXferCount > 1U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	d912      	bls.n	800744e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b02      	subs	r3, #2
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800744c:	e05a      	b.n	8007504 <HAL_SPI_Transmit+0x294>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007474:	e046      	b.n	8007504 <HAL_SPI_Transmit+0x294>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b02      	cmp	r3, #2
 8007482:	d12d      	bne.n	80074e0 <HAL_SPI_Transmit+0x270>
      {
        if (hspi->TxXferCount > 1U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b01      	cmp	r3, #1
 800748c:	d914      	bls.n	80074b8 <HAL_SPI_Transmit+0x248>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	881a      	ldrh	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	1c9a      	adds	r2, r3, #2
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b02      	subs	r3, #2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074b2:	e027      	b.n	8007504 <HAL_SPI_Transmit+0x294>
 80074b4:	0800d818 	.word	0x0800d818
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	330c      	adds	r3, #12
 80074c2:	7812      	ldrb	r2, [r2, #0]
 80074c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074de:	e011      	b.n	8007504 <HAL_SPI_Transmit+0x294>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074e0:	f7fb f912 	bl	8002708 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d803      	bhi.n	80074f8 <HAL_SPI_Transmit+0x288>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d102      	bne.n	80074fe <HAL_SPI_Transmit+0x28e>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <HAL_SPI_Transmit+0x294>
        {
          errorcode = HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007502:	e026      	b.n	8007552 <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1b3      	bne.n	8007476 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f948 	bl	80077a8 <SPI_EndRxTxTransaction>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_SPI_Transmit+0x2b4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2220      	movs	r2, #32
 8007522:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <HAL_SPI_Transmit+0x2d2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_SPI_Transmit+0x2e0>
  {
    errorcode = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	77fb      	strb	r3, [r7, #31]
 800754e:	e000      	b.n	8007552 <HAL_SPI_Transmit+0x2e2>
  }

error:
 8007550:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007562:	7ffb      	ldrb	r3, [r7, #31]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3720      	adds	r7, #32
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	4613      	mov	r3, r2
 800757a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800757c:	f7fb f8c4 	bl	8002708 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4413      	add	r3, r2
 800758a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800758c:	f7fb f8bc 	bl	8002708 <HAL_GetTick>
 8007590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007592:	4b39      	ldr	r3, [pc, #228]	; (8007678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	015b      	lsls	r3, r3, #5
 8007598:	0d1b      	lsrs	r3, r3, #20
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075a2:	e054      	b.n	800764e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d050      	beq.n	800764e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075ac:	f7fb f8ac 	bl	8002708 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d902      	bls.n	80075c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d13d      	bne.n	800763e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075da:	d111      	bne.n	8007600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e4:	d004      	beq.n	80075f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ee:	d107      	bne.n	8007600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007608:	d10f      	bne.n	800762a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e017      	b.n	800766e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	3b01      	subs	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4013      	ands	r3, r2
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	bf0c      	ite	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	2300      	movne	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	429a      	cmp	r2, r3
 800766a:	d19b      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000004 	.word	0x20000004

0800767c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800768e:	f7fb f83b 	bl	8002708 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	4413      	add	r3, r2
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800769e:	f7fb f833 	bl	8002708 <HAL_GetTick>
 80076a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076ac:	4b3d      	ldr	r3, [pc, #244]	; (80077a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	00da      	lsls	r2, r3, #3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	0d1b      	lsrs	r3, r3, #20
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80076c4:	e060      	b.n	8007788 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80076cc:	d107      	bne.n	80076de <SPI_WaitFifoStateUntilTimeout+0x62>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d050      	beq.n	8007788 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076e6:	f7fb f80f 	bl	8002708 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d902      	bls.n	80076fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d13d      	bne.n	8007778 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800770a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007714:	d111      	bne.n	800773a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771e:	d004      	beq.n	800772a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007728:	d107      	bne.n	800773a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007738:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007742:	d10f      	bne.n	8007764 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007762:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e010      	b.n	800779a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	3b01      	subs	r3, #1
 8007786:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4013      	ands	r3, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d196      	bne.n	80076c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3728      	adds	r7, #40	; 0x28
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000004 	.word	0x20000004

080077a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f7ff ff5b 	bl	800767c <SPI_WaitFifoStateUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d0:	f043 0220 	orr.w	r2, r3, #32
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e027      	b.n	800782c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	2180      	movs	r1, #128	; 0x80
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff fec0 	bl	800756c <SPI_WaitFlagStateUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e014      	b.n	800782c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2200      	movs	r2, #0
 800780a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff ff34 	bl	800767c <SPI_WaitFifoStateUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781e:	f043 0220 	orr.w	r2, r3, #32
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e000      	b.n	800782c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e0c8      	b.n	80079d8 <HAL_TIM_Base_Init+0x1a4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a65      	ldr	r2, [pc, #404]	; (80079e0 <HAL_TIM_Base_Init+0x1ac>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01d      	beq.n	800788c <HAL_TIM_Base_Init+0x58>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007858:	d018      	beq.n	800788c <HAL_TIM_Base_Init+0x58>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a61      	ldr	r2, [pc, #388]	; (80079e4 <HAL_TIM_Base_Init+0x1b0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <HAL_TIM_Base_Init+0x58>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a5f      	ldr	r2, [pc, #380]	; (80079e8 <HAL_TIM_Base_Init+0x1b4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_TIM_Base_Init+0x58>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a5e      	ldr	r2, [pc, #376]	; (80079ec <HAL_TIM_Base_Init+0x1b8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_TIM_Base_Init+0x58>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5c      	ldr	r2, [pc, #368]	; (80079f0 <HAL_TIM_Base_Init+0x1bc>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_TIM_Base_Init+0x58>
 8007882:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007886:	485b      	ldr	r0, [pc, #364]	; (80079f4 <HAL_TIM_Base_Init+0x1c0>)
 8007888:	f7f9 fe7f 	bl	800158a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d014      	beq.n	80078be <HAL_TIM_Base_Init+0x8a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	2b10      	cmp	r3, #16
 800789a:	d010      	beq.n	80078be <HAL_TIM_Base_Init+0x8a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d00c      	beq.n	80078be <HAL_TIM_Base_Init+0x8a>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d008      	beq.n	80078be <HAL_TIM_Base_Init+0x8a>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2b60      	cmp	r3, #96	; 0x60
 80078b2:	d004      	beq.n	80078be <HAL_TIM_Base_Init+0x8a>
 80078b4:	f240 1117 	movw	r1, #279	; 0x117
 80078b8:	484e      	ldr	r0, [pc, #312]	; (80079f4 <HAL_TIM_Base_Init+0x1c0>)
 80078ba:	f7f9 fe66 	bl	800158a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00e      	beq.n	80078e4 <HAL_TIM_Base_Init+0xb0>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ce:	d009      	beq.n	80078e4 <HAL_TIM_Base_Init+0xb0>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d8:	d004      	beq.n	80078e4 <HAL_TIM_Base_Init+0xb0>
 80078da:	f44f 718c 	mov.w	r1, #280	; 0x118
 80078de:	4845      	ldr	r0, [pc, #276]	; (80079f4 <HAL_TIM_Base_Init+0x1c0>)
 80078e0:	f7f9 fe53 	bl	800158a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ec:	d00f      	beq.n	800790e <HAL_TIM_Base_Init+0xda>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <HAL_TIM_Base_Init+0xd0>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078fe:	d201      	bcs.n	8007904 <HAL_TIM_Base_Init+0xd0>
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <HAL_TIM_Base_Init+0xd2>
 8007904:	2300      	movs	r3, #0
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e006      	b.n	800791c <HAL_TIM_Base_Init+0xe8>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <HAL_TIM_Base_Init+0xf6>
 8007920:	f240 1119 	movw	r1, #281	; 0x119
 8007924:	4833      	ldr	r0, [pc, #204]	; (80079f4 <HAL_TIM_Base_Init+0x1c0>)
 8007926:	f7f9 fe30 	bl	800158a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_TIM_Base_Init+0x110>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	2b80      	cmp	r3, #128	; 0x80
 8007938:	d004      	beq.n	8007944 <HAL_TIM_Base_Init+0x110>
 800793a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800793e:	482d      	ldr	r0, [pc, #180]	; (80079f4 <HAL_TIM_Base_Init+0x1c0>)
 8007940:	f7f9 fe23 	bl	800158a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <HAL_TIM_Base_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7fa fd2d 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f000 fec1 	bl	80086f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40001000 	.word	0x40001000
 80079e8:	40001400 	.word	0x40001400
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40014400 	.word	0x40014400
 80079f4:	0800d88c 	.word	0x0800d88c

080079f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a34      	ldr	r2, [pc, #208]	; (8007ad8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d01d      	beq.n	8007a46 <HAL_TIM_Base_Start_IT+0x4e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a12:	d018      	beq.n	8007a46 <HAL_TIM_Base_Start_IT+0x4e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a30      	ldr	r2, [pc, #192]	; (8007adc <HAL_TIM_Base_Start_IT+0xe4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <HAL_TIM_Base_Start_IT+0x4e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a2f      	ldr	r2, [pc, #188]	; (8007ae0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00e      	beq.n	8007a46 <HAL_TIM_Base_Start_IT+0x4e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ae4 <HAL_TIM_Base_Start_IT+0xec>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d009      	beq.n	8007a46 <HAL_TIM_Base_Start_IT+0x4e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a2c      	ldr	r2, [pc, #176]	; (8007ae8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d004      	beq.n	8007a46 <HAL_TIM_Base_Start_IT+0x4e>
 8007a3c:	f240 11d3 	movw	r1, #467	; 0x1d3
 8007a40:	482a      	ldr	r0, [pc, #168]	; (8007aec <HAL_TIM_Base_Start_IT+0xf4>)
 8007a42:	f7f9 fda2 	bl	800158a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d001      	beq.n	8007a56 <HAL_TIM_Base_Start_IT+0x5e>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e03b      	b.n	8007ace <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a19      	ldr	r2, [pc, #100]	; (8007ad8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d009      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x94>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a80:	d004      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x94>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <HAL_TIM_Base_Start_IT+0xec>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d115      	bne.n	8007ab8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <HAL_TIM_Base_Start_IT+0xf8>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b06      	cmp	r3, #6
 8007a9c:	d015      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0xd2>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa4:	d011      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab6:	e008      	b.n	8007aca <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0201 	orr.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e000      	b.n	8007acc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40012c00 	.word	0x40012c00
 8007adc:	40001000 	.word	0x40001000
 8007ae0:	40001400 	.word	0x40001400
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40014400 	.word	0x40014400
 8007aec:	0800d88c 	.word	0x0800d88c
 8007af0:	00010007 	.word	0x00010007

08007af4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e0c8      	b.n	8007c98 <HAL_TIM_OC_Init+0x1a4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a65      	ldr	r2, [pc, #404]	; (8007ca0 <HAL_TIM_OC_Init+0x1ac>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d01d      	beq.n	8007b4c <HAL_TIM_OC_Init+0x58>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b18:	d018      	beq.n	8007b4c <HAL_TIM_OC_Init+0x58>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a61      	ldr	r2, [pc, #388]	; (8007ca4 <HAL_TIM_OC_Init+0x1b0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d013      	beq.n	8007b4c <HAL_TIM_OC_Init+0x58>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a5f      	ldr	r2, [pc, #380]	; (8007ca8 <HAL_TIM_OC_Init+0x1b4>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00e      	beq.n	8007b4c <HAL_TIM_OC_Init+0x58>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a5e      	ldr	r2, [pc, #376]	; (8007cac <HAL_TIM_OC_Init+0x1b8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d009      	beq.n	8007b4c <HAL_TIM_OC_Init+0x58>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a5c      	ldr	r2, [pc, #368]	; (8007cb0 <HAL_TIM_OC_Init+0x1bc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIM_OC_Init+0x58>
 8007b42:	f240 2196 	movw	r1, #662	; 0x296
 8007b46:	485b      	ldr	r0, [pc, #364]	; (8007cb4 <HAL_TIM_OC_Init+0x1c0>)
 8007b48:	f7f9 fd1f 	bl	800158a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d014      	beq.n	8007b7e <HAL_TIM_OC_Init+0x8a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d010      	beq.n	8007b7e <HAL_TIM_OC_Init+0x8a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d00c      	beq.n	8007b7e <HAL_TIM_OC_Init+0x8a>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b40      	cmp	r3, #64	; 0x40
 8007b6a:	d008      	beq.n	8007b7e <HAL_TIM_OC_Init+0x8a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b60      	cmp	r3, #96	; 0x60
 8007b72:	d004      	beq.n	8007b7e <HAL_TIM_OC_Init+0x8a>
 8007b74:	f240 2197 	movw	r1, #663	; 0x297
 8007b78:	484e      	ldr	r0, [pc, #312]	; (8007cb4 <HAL_TIM_OC_Init+0x1c0>)
 8007b7a:	f7f9 fd06 	bl	800158a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00e      	beq.n	8007ba4 <HAL_TIM_OC_Init+0xb0>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8e:	d009      	beq.n	8007ba4 <HAL_TIM_OC_Init+0xb0>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b98:	d004      	beq.n	8007ba4 <HAL_TIM_OC_Init+0xb0>
 8007b9a:	f44f 7126 	mov.w	r1, #664	; 0x298
 8007b9e:	4845      	ldr	r0, [pc, #276]	; (8007cb4 <HAL_TIM_OC_Init+0x1c0>)
 8007ba0:	f7f9 fcf3 	bl	800158a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bac:	d00f      	beq.n	8007bce <HAL_TIM_OC_Init+0xda>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d006      	beq.n	8007bc4 <HAL_TIM_OC_Init+0xd0>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bbe:	d201      	bcs.n	8007bc4 <HAL_TIM_OC_Init+0xd0>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <HAL_TIM_OC_Init+0xd2>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	e006      	b.n	8007bdc <HAL_TIM_OC_Init+0xe8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf14      	ite	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2300      	moveq	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_OC_Init+0xf6>
 8007be0:	f240 2199 	movw	r1, #665	; 0x299
 8007be4:	4833      	ldr	r0, [pc, #204]	; (8007cb4 <HAL_TIM_OC_Init+0x1c0>)
 8007be6:	f7f9 fcd0 	bl	800158a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_TIM_OC_Init+0x110>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	2b80      	cmp	r3, #128	; 0x80
 8007bf8:	d004      	beq.n	8007c04 <HAL_TIM_OC_Init+0x110>
 8007bfa:	f240 219a 	movw	r1, #666	; 0x29a
 8007bfe:	482d      	ldr	r0, [pc, #180]	; (8007cb4 <HAL_TIM_OC_Init+0x1c0>)
 8007c00:	f7f9 fcc3 	bl	800158a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <HAL_TIM_OC_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f84d 	bl	8007cb8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4610      	mov	r0, r2
 8007c32:	f000 fd61 	bl	80086f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40001000 	.word	0x40001000
 8007ca8:	40001400 	.word	0x40001400
 8007cac:	40014000 	.word	0x40014000
 8007cb0:	40014400 	.word	0x40014400
 8007cb4:	0800d88c 	.word	0x0800d88c

08007cb8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d122      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d11b      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0202 	mvn.w	r2, #2
 8007cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fcd4 	bl	80086bc <HAL_TIM_IC_CaptureCallback>
 8007d14:	e005      	b.n	8007d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fcc6 	bl	80086a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fcd7 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d122      	bne.n	8007d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d11b      	bne.n	8007d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0204 	mvn.w	r2, #4
 8007d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fcaa 	bl	80086bc <HAL_TIM_IC_CaptureCallback>
 8007d68:	e005      	b.n	8007d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fc9c 	bl	80086a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fcad 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d122      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d11b      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0208 	mvn.w	r2, #8
 8007da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fc80 	bl	80086bc <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fc72 	bl	80086a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fc83 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0310 	and.w	r3, r3, #16
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d122      	bne.n	8007e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d11b      	bne.n	8007e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0210 	mvn.w	r2, #16
 8007df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2208      	movs	r2, #8
 8007dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fc56 	bl	80086bc <HAL_TIM_IC_CaptureCallback>
 8007e10:	e005      	b.n	8007e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fc48 	bl	80086a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fc59 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d10e      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d107      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0201 	mvn.w	r2, #1
 8007e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7f9 fb86 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5a:	2b80      	cmp	r3, #128	; 0x80
 8007e5c:	d10e      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d107      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fa86 	bl	8009388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8a:	d10e      	bne.n	8007eaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e96:	2b80      	cmp	r3, #128	; 0x80
 8007e98:	d107      	bne.n	8007eaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fa79 	bl	800939c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	d10e      	bne.n	8007ed6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d107      	bne.n	8007ed6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc07 	bl	80086e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d10e      	bne.n	8007f02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d107      	bne.n	8007f02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f06f 0220 	mvn.w	r2, #32
 8007efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 fa39 	bl	8009374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d016      	beq.n	8007f50 <HAL_TIM_OC_ConfigChannel+0x44>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d013      	beq.n	8007f50 <HAL_TIM_OC_ConfigChannel+0x44>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d010      	beq.n	8007f50 <HAL_TIM_OC_ConfigChannel+0x44>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b0c      	cmp	r3, #12
 8007f32:	d00d      	beq.n	8007f50 <HAL_TIM_OC_ConfigChannel+0x44>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d00a      	beq.n	8007f50 <HAL_TIM_OC_ConfigChannel+0x44>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b14      	cmp	r3, #20
 8007f3e:	d007      	beq.n	8007f50 <HAL_TIM_OC_ConfigChannel+0x44>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b3c      	cmp	r3, #60	; 0x3c
 8007f44:	d004      	beq.n	8007f50 <HAL_TIM_OC_ConfigChannel+0x44>
 8007f46:	f640 71e7 	movw	r1, #4071	; 0xfe7
 8007f4a:	4884      	ldr	r0, [pc, #528]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 8007f4c:	f7f9 fb1d 	bl	800158a <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d022      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b10      	cmp	r3, #16
 8007f5e:	d01e      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d01a      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b30      	cmp	r3, #48	; 0x30
 8007f6e:	d016      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b50      	cmp	r3, #80	; 0x50
 8007f76:	d012      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b40      	cmp	r3, #64	; 0x40
 8007f7e:	d00e      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f88:	d009      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a74      	ldr	r2, [pc, #464]	; (8008160 <HAL_TIM_OC_ConfigChannel+0x254>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d004      	beq.n	8007f9e <HAL_TIM_OC_ConfigChannel+0x92>
 8007f94:	f640 71e8 	movw	r1, #4072	; 0xfe8
 8007f98:	4870      	ldr	r0, [pc, #448]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 8007f9a:	f7f9 faf6 	bl	800158a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d008      	beq.n	8007fb8 <HAL_TIM_OC_ConfigChannel+0xac>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d004      	beq.n	8007fb8 <HAL_TIM_OC_ConfigChannel+0xac>
 8007fae:	f640 71e9 	movw	r1, #4073	; 0xfe9
 8007fb2:	486a      	ldr	r0, [pc, #424]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 8007fb4:	f7f9 fae9 	bl	800158a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_TIM_OC_ConfigChannel+0xba>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e0c5      	b.n	8008152 <HAL_TIM_OC_ConfigChannel+0x246>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b14      	cmp	r3, #20
 8007fd2:	f200 80b6 	bhi.w	8008142 <HAL_TIM_OC_ConfigChannel+0x236>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <HAL_TIM_OC_ConfigChannel+0xd0>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08008031 	.word	0x08008031
 8007fe0:	08008143 	.word	0x08008143
 8007fe4:	08008143 	.word	0x08008143
 8007fe8:	08008143 	.word	0x08008143
 8007fec:	08008071 	.word	0x08008071
 8007ff0:	08008143 	.word	0x08008143
 8007ff4:	08008143 	.word	0x08008143
 8007ff8:	08008143 	.word	0x08008143
 8007ffc:	080080a7 	.word	0x080080a7
 8008000:	08008143 	.word	0x08008143
 8008004:	08008143 	.word	0x08008143
 8008008:	08008143 	.word	0x08008143
 800800c:	080080d3 	.word	0x080080d3
 8008010:	08008143 	.word	0x08008143
 8008014:	08008143 	.word	0x08008143
 8008018:	08008143 	.word	0x08008143
 800801c:	080080ff 	.word	0x080080ff
 8008020:	08008143 	.word	0x08008143
 8008024:	08008143 	.word	0x08008143
 8008028:	08008143 	.word	0x08008143
 800802c:	08008121 	.word	0x08008121
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a4b      	ldr	r2, [pc, #300]	; (8008164 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <HAL_TIM_OC_ConfigChannel+0x156>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008042:	d00e      	beq.n	8008062 <HAL_TIM_OC_ConfigChannel+0x156>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a47      	ldr	r2, [pc, #284]	; (8008168 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d009      	beq.n	8008062 <HAL_TIM_OC_ConfigChannel+0x156>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a46      	ldr	r2, [pc, #280]	; (800816c <HAL_TIM_OC_ConfigChannel+0x260>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <HAL_TIM_OC_ConfigChannel+0x156>
 8008058:	f640 71f3 	movw	r1, #4083	; 0xff3
 800805c:	483f      	ldr	r0, [pc, #252]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 800805e:	f7f9 fa94 	bl	800158a <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68b9      	ldr	r1, [r7, #8]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fba9 	bl	80087c0 <TIM_OC1_SetConfig>
      break;
 800806e:	e06b      	b.n	8008148 <HAL_TIM_OC_ConfigChannel+0x23c>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a3b      	ldr	r2, [pc, #236]	; (8008164 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00e      	beq.n	8008098 <HAL_TIM_OC_ConfigChannel+0x18c>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008082:	d009      	beq.n	8008098 <HAL_TIM_OC_ConfigChannel+0x18c>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a37      	ldr	r2, [pc, #220]	; (8008168 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d004      	beq.n	8008098 <HAL_TIM_OC_ConfigChannel+0x18c>
 800808e:	f640 71fd 	movw	r1, #4093	; 0xffd
 8008092:	4832      	ldr	r0, [pc, #200]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 8008094:	f7f9 fa79 	bl	800158a <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fc34 	bl	800890c <TIM_OC2_SetConfig>
      break;
 80080a4:	e050      	b.n	8008148 <HAL_TIM_OC_ConfigChannel+0x23c>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a2e      	ldr	r2, [pc, #184]	; (8008164 <HAL_TIM_OC_ConfigChannel+0x258>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_TIM_OC_ConfigChannel+0x1b8>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b8:	d004      	beq.n	80080c4 <HAL_TIM_OC_ConfigChannel+0x1b8>
 80080ba:	f241 0107 	movw	r1, #4103	; 0x1007
 80080be:	4827      	ldr	r0, [pc, #156]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 80080c0:	f7f9 fa63 	bl	800158a <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fcc0 	bl	8008a50 <TIM_OC3_SetConfig>
      break;
 80080d0:	e03a      	b.n	8008148 <HAL_TIM_OC_ConfigChannel+0x23c>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a23      	ldr	r2, [pc, #140]	; (8008164 <HAL_TIM_OC_ConfigChannel+0x258>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d009      	beq.n	80080f0 <HAL_TIM_OC_ConfigChannel+0x1e4>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e4:	d004      	beq.n	80080f0 <HAL_TIM_OC_ConfigChannel+0x1e4>
 80080e6:	f241 0111 	movw	r1, #4113	; 0x1011
 80080ea:	481c      	ldr	r0, [pc, #112]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 80080ec:	f7f9 fa4d 	bl	800158a <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fd4c 	bl	8008b94 <TIM_OC4_SetConfig>
      break;
 80080fc:	e024      	b.n	8008148 <HAL_TIM_OC_ConfigChannel+0x23c>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a18      	ldr	r2, [pc, #96]	; (8008164 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIM_OC_ConfigChannel+0x206>
 8008108:	f241 011b 	movw	r1, #4123	; 0x101b
 800810c:	4813      	ldr	r0, [pc, #76]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 800810e:	f7f9 fa3c 	bl	800158a <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fda7 	bl	8008c6c <TIM_OC5_SetConfig>
      break;
 800811e:	e013      	b.n	8008148 <HAL_TIM_OC_ConfigChannel+0x23c>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a0f      	ldr	r2, [pc, #60]	; (8008164 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d004      	beq.n	8008134 <HAL_TIM_OC_ConfigChannel+0x228>
 800812a:	f241 0125 	movw	r1, #4133	; 0x1025
 800812e:	480b      	ldr	r0, [pc, #44]	; (800815c <HAL_TIM_OC_ConfigChannel+0x250>)
 8008130:	f7f9 fa2b 	bl	800158a <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fdee 	bl	8008d1c <TIM_OC6_SetConfig>
      break;
 8008140:	e002      	b.n	8008148 <HAL_TIM_OC_ConfigChannel+0x23c>
    }

    default:
      status = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	75fb      	strb	r3, [r7, #23]
      break;
 8008146:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	0800d88c 	.word	0x0800d88c
 8008160:	00010010 	.word	0x00010010
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400

08008170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_TIM_ConfigClockSource+0x1c>
 8008188:	2302      	movs	r3, #2
 800818a:	e282      	b.n	8008692 <HAL_TIM_ConfigClockSource+0x522>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a4:	d029      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b70      	cmp	r3, #112	; 0x70
 80081ac:	d025      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b6:	d020      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b40      	cmp	r3, #64	; 0x40
 80081be:	d01c      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b50      	cmp	r3, #80	; 0x50
 80081c6:	d018      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b60      	cmp	r3, #96	; 0x60
 80081ce:	d014      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d010      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b10      	cmp	r3, #16
 80081de:	d00c      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	d008      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b30      	cmp	r3, #48	; 0x30
 80081ee:	d004      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x8a>
 80081f0:	f241 5151 	movw	r1, #5457	; 0x1551
 80081f4:	486f      	ldr	r0, [pc, #444]	; (80083b4 <HAL_TIM_ConfigClockSource+0x244>)
 80081f6:	f7f9 f9c8 	bl	800158a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008208:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800820c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008214:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008226:	f000 80d1 	beq.w	80083cc <HAL_TIM_ConfigClockSource+0x25c>
 800822a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822e:	f200 8223 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 8008232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008236:	d02d      	beq.n	8008294 <HAL_TIM_ConfigClockSource+0x124>
 8008238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823c:	f200 821c 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 8008240:	2b70      	cmp	r3, #112	; 0x70
 8008242:	d051      	beq.n	80082e8 <HAL_TIM_ConfigClockSource+0x178>
 8008244:	2b70      	cmp	r3, #112	; 0x70
 8008246:	f200 8217 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 800824a:	2b60      	cmp	r3, #96	; 0x60
 800824c:	f000 8162 	beq.w	8008514 <HAL_TIM_ConfigClockSource+0x3a4>
 8008250:	2b60      	cmp	r3, #96	; 0x60
 8008252:	f200 8211 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 8008256:	2b50      	cmp	r3, #80	; 0x50
 8008258:	f000 8115 	beq.w	8008486 <HAL_TIM_ConfigClockSource+0x316>
 800825c:	2b50      	cmp	r3, #80	; 0x50
 800825e:	f200 820b 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 8008262:	2b40      	cmp	r3, #64	; 0x40
 8008264:	f000 81a4 	beq.w	80085b0 <HAL_TIM_ConfigClockSource+0x440>
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	f200 8205 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 800826e:	2b30      	cmp	r3, #48	; 0x30
 8008270:	f000 81e5 	beq.w	800863e <HAL_TIM_ConfigClockSource+0x4ce>
 8008274:	2b30      	cmp	r3, #48	; 0x30
 8008276:	f200 81ff 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 800827a:	2b20      	cmp	r3, #32
 800827c:	f000 81df 	beq.w	800863e <HAL_TIM_ConfigClockSource+0x4ce>
 8008280:	2b20      	cmp	r3, #32
 8008282:	f200 81f9 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x508>
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 81d9 	beq.w	800863e <HAL_TIM_ConfigClockSource+0x4ce>
 800828c:	2b10      	cmp	r3, #16
 800828e:	f000 81d6 	beq.w	800863e <HAL_TIM_ConfigClockSource+0x4ce>
 8008292:	e1f1      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x508>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a47      	ldr	r2, [pc, #284]	; (80083b8 <HAL_TIM_ConfigClockSource+0x248>)
 800829a:	4293      	cmp	r3, r2
 800829c:	f000 81ef 	beq.w	800867e <HAL_TIM_ConfigClockSource+0x50e>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a8:	f000 81e9 	beq.w	800867e <HAL_TIM_ConfigClockSource+0x50e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a42      	ldr	r2, [pc, #264]	; (80083bc <HAL_TIM_ConfigClockSource+0x24c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	f000 81e3 	beq.w	800867e <HAL_TIM_ConfigClockSource+0x50e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a40      	ldr	r2, [pc, #256]	; (80083c0 <HAL_TIM_ConfigClockSource+0x250>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	f000 81dd 	beq.w	800867e <HAL_TIM_ConfigClockSource+0x50e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a3e      	ldr	r2, [pc, #248]	; (80083c4 <HAL_TIM_ConfigClockSource+0x254>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	f000 81d7 	beq.w	800867e <HAL_TIM_ConfigClockSource+0x50e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a3c      	ldr	r2, [pc, #240]	; (80083c8 <HAL_TIM_ConfigClockSource+0x258>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	f000 81d1 	beq.w	800867e <HAL_TIM_ConfigClockSource+0x50e>
 80082dc:	f241 515d 	movw	r1, #5469	; 0x155d
 80082e0:	4834      	ldr	r0, [pc, #208]	; (80083b4 <HAL_TIM_ConfigClockSource+0x244>)
 80082e2:	f7f9 f952 	bl	800158a <assert_failed>
      break;
 80082e6:	e1ca      	b.n	800867e <HAL_TIM_ConfigClockSource+0x50e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a32      	ldr	r2, [pc, #200]	; (80083b8 <HAL_TIM_ConfigClockSource+0x248>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00e      	beq.n	8008310 <HAL_TIM_ConfigClockSource+0x1a0>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fa:	d009      	beq.n	8008310 <HAL_TIM_ConfigClockSource+0x1a0>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a30      	ldr	r2, [pc, #192]	; (80083c4 <HAL_TIM_ConfigClockSource+0x254>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d004      	beq.n	8008310 <HAL_TIM_ConfigClockSource+0x1a0>
 8008306:	f241 5164 	movw	r1, #5476	; 0x1564
 800830a:	482a      	ldr	r0, [pc, #168]	; (80083b4 <HAL_TIM_ConfigClockSource+0x244>)
 800830c:	f7f9 f93d 	bl	800158a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d013      	beq.n	8008340 <HAL_TIM_ConfigClockSource+0x1d0>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008320:	d00e      	beq.n	8008340 <HAL_TIM_ConfigClockSource+0x1d0>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832a:	d009      	beq.n	8008340 <HAL_TIM_ConfigClockSource+0x1d0>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008334:	d004      	beq.n	8008340 <HAL_TIM_ConfigClockSource+0x1d0>
 8008336:	f241 5167 	movw	r1, #5479	; 0x1567
 800833a:	481e      	ldr	r0, [pc, #120]	; (80083b4 <HAL_TIM_ConfigClockSource+0x244>)
 800833c:	f7f9 f925 	bl	800158a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008348:	d014      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0x204>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d010      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0x204>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00c      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0x204>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d008      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0x204>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b0a      	cmp	r3, #10
 8008368:	d004      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0x204>
 800836a:	f241 5168 	movw	r1, #5480	; 0x1568
 800836e:	4811      	ldr	r0, [pc, #68]	; (80083b4 <HAL_TIM_ConfigClockSource+0x244>)
 8008370:	f7f9 f90b 	bl	800158a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b0f      	cmp	r3, #15
 800837a:	d904      	bls.n	8008386 <HAL_TIM_ConfigClockSource+0x216>
 800837c:	f241 5169 	movw	r1, #5481	; 0x1569
 8008380:	480c      	ldr	r0, [pc, #48]	; (80083b4 <HAL_TIM_ConfigClockSource+0x244>)
 8008382:	f7f9 f902 	bl	800158a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6899      	ldr	r1, [r3, #8]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f000 fd95 	bl	8008ec4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	609a      	str	r2, [r3, #8]
      break;
 80083b2:	e165      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x510>
 80083b4:	0800d88c 	.word	0x0800d88c
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40001000 	.word	0x40001000
 80083c0:	40001400 	.word	0x40001400
 80083c4:	40014000 	.word	0x40014000
 80083c8:	40014400 	.word	0x40014400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a74      	ldr	r2, [pc, #464]	; (80085a4 <HAL_TIM_ConfigClockSource+0x434>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d009      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x27a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083de:	d004      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x27a>
 80083e0:	f241 517c 	movw	r1, #5500	; 0x157c
 80083e4:	4870      	ldr	r0, [pc, #448]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 80083e6:	f7f9 f8d0 	bl	800158a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d013      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x2aa>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fa:	d00e      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x2aa>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008404:	d009      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x2aa>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800840e:	d004      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x2aa>
 8008410:	f241 517f 	movw	r1, #5503	; 0x157f
 8008414:	4864      	ldr	r0, [pc, #400]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 8008416:	f7f9 f8b8 	bl	800158a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008422:	d014      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x2de>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d010      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x2de>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00c      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x2de>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d008      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x2de>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b0a      	cmp	r3, #10
 8008442:	d004      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x2de>
 8008444:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8008448:	4857      	ldr	r0, [pc, #348]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 800844a:	f7f9 f89e 	bl	800158a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	2b0f      	cmp	r3, #15
 8008454:	d904      	bls.n	8008460 <HAL_TIM_ConfigClockSource+0x2f0>
 8008456:	f241 5181 	movw	r1, #5505	; 0x1581
 800845a:	4853      	ldr	r0, [pc, #332]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 800845c:	f7f9 f895 	bl	800158a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6899      	ldr	r1, [r3, #8]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f000 fd28 	bl	8008ec4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008482:	609a      	str	r2, [r3, #8]
      break;
 8008484:	e0fc      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x510>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a46      	ldr	r2, [pc, #280]	; (80085a4 <HAL_TIM_ConfigClockSource+0x434>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_TIM_ConfigClockSource+0x33e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008498:	d009      	beq.n	80084ae <HAL_TIM_ConfigClockSource+0x33e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a43      	ldr	r2, [pc, #268]	; (80085ac <HAL_TIM_ConfigClockSource+0x43c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_TIM_ConfigClockSource+0x33e>
 80084a4:	f241 5190 	movw	r1, #5520	; 0x1590
 80084a8:	483f      	ldr	r0, [pc, #252]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 80084aa:	f7f9 f86e 	bl	800158a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b6:	d014      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x372>
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d010      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x372>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00c      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x372>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d008      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x372>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b0a      	cmp	r3, #10
 80084d6:	d004      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x372>
 80084d8:	f241 5193 	movw	r1, #5523	; 0x1593
 80084dc:	4832      	ldr	r0, [pc, #200]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 80084de:	f7f9 f854 	bl	800158a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d904      	bls.n	80084f4 <HAL_TIM_ConfigClockSource+0x384>
 80084ea:	f241 5194 	movw	r1, #5524	; 0x1594
 80084ee:	482e      	ldr	r0, [pc, #184]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 80084f0:	f7f9 f84b 	bl	800158a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	6859      	ldr	r1, [r3, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	461a      	mov	r2, r3
 8008502:	f000 fc65 	bl	8008dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2150      	movs	r1, #80	; 0x50
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fcbe 	bl	8008e8e <TIM_ITRx_SetConfig>
      break;
 8008512:	e0b5      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x510>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a22      	ldr	r2, [pc, #136]	; (80085a4 <HAL_TIM_ConfigClockSource+0x434>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00e      	beq.n	800853c <HAL_TIM_ConfigClockSource+0x3cc>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008526:	d009      	beq.n	800853c <HAL_TIM_ConfigClockSource+0x3cc>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1f      	ldr	r2, [pc, #124]	; (80085ac <HAL_TIM_ConfigClockSource+0x43c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <HAL_TIM_ConfigClockSource+0x3cc>
 8008532:	f44f 51ad 	mov.w	r1, #5536	; 0x15a0
 8008536:	481c      	ldr	r0, [pc, #112]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 8008538:	f7f9 f827 	bl	800158a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008544:	d014      	beq.n	8008570 <HAL_TIM_ConfigClockSource+0x400>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d010      	beq.n	8008570 <HAL_TIM_ConfigClockSource+0x400>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00c      	beq.n	8008570 <HAL_TIM_ConfigClockSource+0x400>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d008      	beq.n	8008570 <HAL_TIM_ConfigClockSource+0x400>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b0a      	cmp	r3, #10
 8008564:	d004      	beq.n	8008570 <HAL_TIM_ConfigClockSource+0x400>
 8008566:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800856a:	480f      	ldr	r0, [pc, #60]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 800856c:	f7f9 f80d 	bl	800158a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b0f      	cmp	r3, #15
 8008576:	d904      	bls.n	8008582 <HAL_TIM_ConfigClockSource+0x412>
 8008578:	f241 51a4 	movw	r1, #5540	; 0x15a4
 800857c:	480a      	ldr	r0, [pc, #40]	; (80085a8 <HAL_TIM_ConfigClockSource+0x438>)
 800857e:	f7f9 f804 	bl	800158a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6859      	ldr	r1, [r3, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	461a      	mov	r2, r3
 8008590:	f000 fc4d 	bl	8008e2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2160      	movs	r1, #96	; 0x60
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fc77 	bl	8008e8e <TIM_ITRx_SetConfig>
      break;
 80085a0:	e06e      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x510>
 80085a2:	bf00      	nop
 80085a4:	40012c00 	.word	0x40012c00
 80085a8:	0800d88c 	.word	0x0800d88c
 80085ac:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a39      	ldr	r2, [pc, #228]	; (800869c <HAL_TIM_ConfigClockSource+0x52c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00e      	beq.n	80085d8 <HAL_TIM_ConfigClockSource+0x468>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c2:	d009      	beq.n	80085d8 <HAL_TIM_ConfigClockSource+0x468>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a35      	ldr	r2, [pc, #212]	; (80086a0 <HAL_TIM_ConfigClockSource+0x530>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_TIM_ConfigClockSource+0x468>
 80085ce:	f241 51b0 	movw	r1, #5552	; 0x15b0
 80085d2:	4834      	ldr	r0, [pc, #208]	; (80086a4 <HAL_TIM_ConfigClockSource+0x534>)
 80085d4:	f7f8 ffd9 	bl	800158a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e0:	d014      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x49c>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x49c>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00c      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x49c>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d008      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x49c>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2b0a      	cmp	r3, #10
 8008600:	d004      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x49c>
 8008602:	f241 51b3 	movw	r1, #5555	; 0x15b3
 8008606:	4827      	ldr	r0, [pc, #156]	; (80086a4 <HAL_TIM_ConfigClockSource+0x534>)
 8008608:	f7f8 ffbf 	bl	800158a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	2b0f      	cmp	r3, #15
 8008612:	d904      	bls.n	800861e <HAL_TIM_ConfigClockSource+0x4ae>
 8008614:	f241 51b4 	movw	r1, #5556	; 0x15b4
 8008618:	4822      	ldr	r0, [pc, #136]	; (80086a4 <HAL_TIM_ConfigClockSource+0x534>)
 800861a:	f7f8 ffb6 	bl	800158a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6859      	ldr	r1, [r3, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	461a      	mov	r2, r3
 800862c:	f000 fbd0 	bl	8008dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2140      	movs	r1, #64	; 0x40
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fc29 	bl	8008e8e <TIM_ITRx_SetConfig>
      break;
 800863c:	e020      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x510>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a16      	ldr	r2, [pc, #88]	; (800869c <HAL_TIM_ConfigClockSource+0x52c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00e      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x4f6>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008650:	d009      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x4f6>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a12      	ldr	r2, [pc, #72]	; (80086a0 <HAL_TIM_ConfigClockSource+0x530>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x4f6>
 800865c:	f241 51c3 	movw	r1, #5571	; 0x15c3
 8008660:	4810      	ldr	r0, [pc, #64]	; (80086a4 <HAL_TIM_ConfigClockSource+0x534>)
 8008662:	f7f8 ff92 	bl	800158a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f000 fc0c 	bl	8008e8e <TIM_ITRx_SetConfig>
      break;
 8008676:	e003      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x510>
    }

    default:
      status = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]
      break;
 800867c:	e000      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x510>
      break;
 800867e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40014000 	.word	0x40014000
 80086a4:	0800d88c 	.word	0x0800d88c

080086a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a2a      	ldr	r2, [pc, #168]	; (80087b4 <TIM_Base_SetConfig+0xbc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_Base_SetConfig+0x20>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008716:	d108      	bne.n	800872a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a21      	ldr	r2, [pc, #132]	; (80087b4 <TIM_Base_SetConfig+0xbc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d00b      	beq.n	800874a <TIM_Base_SetConfig+0x52>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008738:	d007      	beq.n	800874a <TIM_Base_SetConfig+0x52>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a1e      	ldr	r2, [pc, #120]	; (80087b8 <TIM_Base_SetConfig+0xc0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d003      	beq.n	800874a <TIM_Base_SetConfig+0x52>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a1d      	ldr	r2, [pc, #116]	; (80087bc <TIM_Base_SetConfig+0xc4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d108      	bne.n	800875c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <TIM_Base_SetConfig+0xbc>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d007      	beq.n	8008798 <TIM_Base_SetConfig+0xa0>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a0b      	ldr	r2, [pc, #44]	; (80087b8 <TIM_Base_SetConfig+0xc0>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d003      	beq.n	8008798 <TIM_Base_SetConfig+0xa0>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <TIM_Base_SetConfig+0xc4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d103      	bne.n	80087a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	691a      	ldr	r2, [r3, #16]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	615a      	str	r2, [r3, #20]
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	40012c00 	.word	0x40012c00
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400

080087c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f023 0201 	bic.w	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f023 0302 	bic.w	r3, r3, #2
 800880c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4313      	orrs	r3, r2
 8008816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a38      	ldr	r2, [pc, #224]	; (80088fc <TIM_OC1_SetConfig+0x13c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d007      	beq.n	8008830 <TIM_OC1_SetConfig+0x70>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a37      	ldr	r2, [pc, #220]	; (8008900 <TIM_OC1_SetConfig+0x140>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_OC1_SetConfig+0x70>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a36      	ldr	r2, [pc, #216]	; (8008904 <TIM_OC1_SetConfig+0x144>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d119      	bne.n	8008864 <TIM_OC1_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d008      	beq.n	800884a <TIM_OC1_SetConfig+0x8a>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	2b08      	cmp	r3, #8
 800883e:	d004      	beq.n	800884a <TIM_OC1_SetConfig+0x8a>
 8008840:	f641 316c 	movw	r1, #7020	; 0x1b6c
 8008844:	4830      	ldr	r0, [pc, #192]	; (8008908 <TIM_OC1_SetConfig+0x148>)
 8008846:	f7f8 fea0 	bl	800158a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f023 0308 	bic.w	r3, r3, #8
 8008850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f023 0304 	bic.w	r3, r3, #4
 8008862:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a25      	ldr	r2, [pc, #148]	; (80088fc <TIM_OC1_SetConfig+0x13c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_OC1_SetConfig+0xbc>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a24      	ldr	r2, [pc, #144]	; (8008900 <TIM_OC1_SetConfig+0x140>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC1_SetConfig+0xbc>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a23      	ldr	r2, [pc, #140]	; (8008904 <TIM_OC1_SetConfig+0x144>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d12d      	bne.n	80088d8 <TIM_OC1_SetConfig+0x118>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008884:	d008      	beq.n	8008898 <TIM_OC1_SetConfig+0xd8>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <TIM_OC1_SetConfig+0xd8>
 800888e:	f641 3179 	movw	r1, #7033	; 0x1b79
 8008892:	481d      	ldr	r0, [pc, #116]	; (8008908 <TIM_OC1_SetConfig+0x148>)
 8008894:	f7f8 fe79 	bl	800158a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a0:	d008      	beq.n	80088b4 <TIM_OC1_SetConfig+0xf4>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d004      	beq.n	80088b4 <TIM_OC1_SetConfig+0xf4>
 80088aa:	f641 317a 	movw	r1, #7034	; 0x1b7a
 80088ae:	4816      	ldr	r0, [pc, #88]	; (8008908 <TIM_OC1_SetConfig+0x148>)
 80088b0:	f7f8 fe6b 	bl	800158a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40014000 	.word	0x40014000
 8008904:	40014400 	.word	0x40014400
 8008908:	0800d88c 	.word	0x0800d88c

0800890c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	f023 0210 	bic.w	r2, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800893a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f023 0320 	bic.w	r3, r3, #32
 800895a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	4313      	orrs	r3, r2
 8008966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a35      	ldr	r2, [pc, #212]	; (8008a40 <TIM_OC2_SetConfig+0x134>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d11a      	bne.n	80089a6 <TIM_OC2_SetConfig+0x9a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d008      	beq.n	800898a <TIM_OC2_SetConfig+0x7e>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d004      	beq.n	800898a <TIM_OC2_SetConfig+0x7e>
 8008980:	f641 31b7 	movw	r1, #7095	; 0x1bb7
 8008984:	482f      	ldr	r0, [pc, #188]	; (8008a44 <TIM_OC2_SetConfig+0x138>)
 8008986:	f7f8 fe00 	bl	800158a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a25      	ldr	r2, [pc, #148]	; (8008a40 <TIM_OC2_SetConfig+0x134>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d007      	beq.n	80089be <TIM_OC2_SetConfig+0xb2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a25      	ldr	r2, [pc, #148]	; (8008a48 <TIM_OC2_SetConfig+0x13c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d003      	beq.n	80089be <TIM_OC2_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a24      	ldr	r2, [pc, #144]	; (8008a4c <TIM_OC2_SetConfig+0x140>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d12f      	bne.n	8008a1e <TIM_OC2_SetConfig+0x112>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c6:	d008      	beq.n	80089da <TIM_OC2_SetConfig+0xce>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <TIM_OC2_SetConfig+0xce>
 80089d0:	f641 31c5 	movw	r1, #7109	; 0x1bc5
 80089d4:	481b      	ldr	r0, [pc, #108]	; (8008a44 <TIM_OC2_SetConfig+0x138>)
 80089d6:	f7f8 fdd8 	bl	800158a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e2:	d008      	beq.n	80089f6 <TIM_OC2_SetConfig+0xea>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <TIM_OC2_SetConfig+0xea>
 80089ec:	f641 31c6 	movw	r1, #7110	; 0x1bc6
 80089f0:	4814      	ldr	r0, [pc, #80]	; (8008a44 <TIM_OC2_SetConfig+0x138>)
 80089f2:	f7f8 fdca 	bl	800158a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	621a      	str	r2, [r3, #32]
}
 8008a38:	bf00      	nop
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40012c00 	.word	0x40012c00
 8008a44:	0800d88c 	.word	0x0800d88c
 8008a48:	40014000 	.word	0x40014000
 8008a4c:	40014400 	.word	0x40014400

08008a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0303 	bic.w	r3, r3, #3
 8008a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a35      	ldr	r2, [pc, #212]	; (8008b84 <TIM_OC3_SetConfig+0x134>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d11a      	bne.n	8008ae8 <TIM_OC3_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d008      	beq.n	8008acc <TIM_OC3_SetConfig+0x7c>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d004      	beq.n	8008acc <TIM_OC3_SetConfig+0x7c>
 8008ac2:	f641 4102 	movw	r1, #7170	; 0x1c02
 8008ac6:	4830      	ldr	r0, [pc, #192]	; (8008b88 <TIM_OC3_SetConfig+0x138>)
 8008ac8:	f7f8 fd5f 	bl	800158a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ae6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a26      	ldr	r2, [pc, #152]	; (8008b84 <TIM_OC3_SetConfig+0x134>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d007      	beq.n	8008b00 <TIM_OC3_SetConfig+0xb0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <TIM_OC3_SetConfig+0x13c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d003      	beq.n	8008b00 <TIM_OC3_SetConfig+0xb0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a25      	ldr	r2, [pc, #148]	; (8008b90 <TIM_OC3_SetConfig+0x140>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d12f      	bne.n	8008b60 <TIM_OC3_SetConfig+0x110>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b08:	d008      	beq.n	8008b1c <TIM_OC3_SetConfig+0xcc>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d004      	beq.n	8008b1c <TIM_OC3_SetConfig+0xcc>
 8008b12:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8008b16:	481c      	ldr	r0, [pc, #112]	; (8008b88 <TIM_OC3_SetConfig+0x138>)
 8008b18:	f7f8 fd37 	bl	800158a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b24:	d008      	beq.n	8008b38 <TIM_OC3_SetConfig+0xe8>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d004      	beq.n	8008b38 <TIM_OC3_SetConfig+0xe8>
 8008b2e:	f641 4110 	movw	r1, #7184	; 0x1c10
 8008b32:	4815      	ldr	r0, [pc, #84]	; (8008b88 <TIM_OC3_SetConfig+0x138>)
 8008b34:	f7f8 fd29 	bl	800158a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	621a      	str	r2, [r3, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40012c00 	.word	0x40012c00
 8008b88:	0800d88c 	.word	0x0800d88c
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40014400 	.word	0x40014400

08008b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	031b      	lsls	r3, r3, #12
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a1a      	ldr	r2, [pc, #104]	; (8008c5c <TIM_OC4_SetConfig+0xc8>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d007      	beq.n	8008c08 <TIM_OC4_SetConfig+0x74>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a19      	ldr	r2, [pc, #100]	; (8008c60 <TIM_OC4_SetConfig+0xcc>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d003      	beq.n	8008c08 <TIM_OC4_SetConfig+0x74>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a18      	ldr	r2, [pc, #96]	; (8008c64 <TIM_OC4_SetConfig+0xd0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d117      	bne.n	8008c38 <TIM_OC4_SetConfig+0xa4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c10:	d008      	beq.n	8008c24 <TIM_OC4_SetConfig+0x90>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <TIM_OC4_SetConfig+0x90>
 8008c1a:	f641 414e 	movw	r1, #7246	; 0x1c4e
 8008c1e:	4812      	ldr	r0, [pc, #72]	; (8008c68 <TIM_OC4_SetConfig+0xd4>)
 8008c20:	f7f8 fcb3 	bl	800158a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	019b      	lsls	r3, r3, #6
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	bf00      	nop
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40012c00 	.word	0x40012c00
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40014400 	.word	0x40014400
 8008c68:	0800d88c 	.word	0x0800d88c

08008c6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008cb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a13      	ldr	r2, [pc, #76]	; (8008d10 <TIM_OC5_SetConfig+0xa4>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d007      	beq.n	8008cd6 <TIM_OC5_SetConfig+0x6a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a12      	ldr	r2, [pc, #72]	; (8008d14 <TIM_OC5_SetConfig+0xa8>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d003      	beq.n	8008cd6 <TIM_OC5_SetConfig+0x6a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a11      	ldr	r2, [pc, #68]	; (8008d18 <TIM_OC5_SetConfig+0xac>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d109      	bne.n	8008cea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	621a      	str	r2, [r3, #32]
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	40012c00 	.word	0x40012c00
 8008d14:	40014000 	.word	0x40014000
 8008d18:	40014400 	.word	0x40014400

08008d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	051b      	lsls	r3, r3, #20
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a14      	ldr	r2, [pc, #80]	; (8008dc4 <TIM_OC6_SetConfig+0xa8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d007      	beq.n	8008d88 <TIM_OC6_SetConfig+0x6c>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a13      	ldr	r2, [pc, #76]	; (8008dc8 <TIM_OC6_SetConfig+0xac>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d003      	beq.n	8008d88 <TIM_OC6_SetConfig+0x6c>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a12      	ldr	r2, [pc, #72]	; (8008dcc <TIM_OC6_SetConfig+0xb0>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d109      	bne.n	8008d9c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	029b      	lsls	r3, r3, #10
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	bf00      	nop
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40014400 	.word	0x40014400

08008dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f023 0201 	bic.w	r2, r3, #1
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f023 030a 	bic.w	r3, r3, #10
 8008e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b087      	sub	sp, #28
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	f023 0210 	bic.w	r2, r3, #16
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
 8008e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	031b      	lsls	r3, r3, #12
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b085      	sub	sp, #20
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f043 0307 	orr.w	r3, r3, #7
 8008eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	609a      	str	r2, [r3, #8]
}
 8008eb8:	bf00      	nop
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	021a      	lsls	r2, r3, #8
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	609a      	str	r2, [r3, #8]
}
 8008ef8:	bf00      	nop
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a81      	ldr	r2, [pc, #516]	; (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d018      	beq.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f20:	d013      	beq.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a7d      	ldr	r2, [pc, #500]	; (800911c <HAL_TIMEx_MasterConfigSynchronization+0x218>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00e      	beq.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a7b      	ldr	r2, [pc, #492]	; (8009120 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d009      	beq.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a7a      	ldr	r2, [pc, #488]	; (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d004      	beq.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008f40:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8008f44:	4878      	ldr	r0, [pc, #480]	; (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8008f46:	f7f8 fb20 	bl	800158a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d020      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b10      	cmp	r3, #16
 8008f58:	d01c      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d018      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b30      	cmp	r3, #48	; 0x30
 8008f68:	d014      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b40      	cmp	r3, #64	; 0x40
 8008f70:	d010      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b50      	cmp	r3, #80	; 0x50
 8008f78:	d00c      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b60      	cmp	r3, #96	; 0x60
 8008f80:	d008      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b70      	cmp	r3, #112	; 0x70
 8008f88:	d004      	beq.n	8008f94 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008f8a:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8008f8e:	4866      	ldr	r0, [pc, #408]	; (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8008f90:	f7f8 fafb 	bl	800158a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	2b80      	cmp	r3, #128	; 0x80
 8008f9a:	d008      	beq.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d004      	beq.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008fa4:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8008fa8:	485f      	ldr	r0, [pc, #380]	; (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8008faa:	f7f8 faee 	bl	800158a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e0a8      	b.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0x20a>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a4d      	ldr	r2, [pc, #308]	; (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d161      	bne.n	80090aa <HAL_TIMEx_MasterConfigSynchronization+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d054      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ff6:	d04f      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009000:	d04a      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800900a:	d045      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009014:	d040      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800901e:	d03b      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009028:	d036      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009032:	d031      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800903c:	d02c      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009046:	d027      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8009050:	d022      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800905a:	d01d      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8009064:	d018      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800906e:	d013      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8009078:	d00e      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8009082:	d009      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800908c:	d004      	beq.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 800908e:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8009092:	4825      	ldr	r0, [pc, #148]	; (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8009094:	f7f8 fa79 	bl	800158a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800909e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a13      	ldr	r2, [pc, #76]	; (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d009      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d6:	d004      	beq.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a11      	ldr	r2, [pc, #68]	; (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d10c      	bne.n	80090fc <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40012c00 	.word	0x40012c00
 800911c:	40001000 	.word	0x40001000
 8009120:	40001400 	.word	0x40001400
 8009124:	40014000 	.word	0x40014000
 8009128:	0800d900 	.word	0x0800d900

0800912c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a89      	ldr	r2, [pc, #548]	; (8009364 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00e      	beq.n	8009162 <HAL_TIMEx_ConfigBreakDeadTime+0x36>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a87      	ldr	r2, [pc, #540]	; (8009368 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d009      	beq.n	8009162 <HAL_TIMEx_ConfigBreakDeadTime+0x36>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a86      	ldr	r2, [pc, #536]	; (800936c <HAL_TIMEx_ConfigBreakDeadTime+0x240>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d004      	beq.n	8009162 <HAL_TIMEx_ConfigBreakDeadTime+0x36>
 8009158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800915c:	4884      	ldr	r0, [pc, #528]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 800915e:	f7f8 fa14 	bl	800158a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800916a:	d008      	beq.n	800917e <HAL_TIMEx_ConfigBreakDeadTime+0x52>
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <HAL_TIMEx_ConfigBreakDeadTime+0x52>
 8009174:	f640 0101 	movw	r1, #2049	; 0x801
 8009178:	487d      	ldr	r0, [pc, #500]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 800917a:	f7f8 fa06 	bl	800158a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009186:	d008      	beq.n	800919a <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
 8009190:	f640 0102 	movw	r1, #2050	; 0x802
 8009194:	4876      	ldr	r0, [pc, #472]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 8009196:	f7f8 f9f8 	bl	800158a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d013      	beq.n	80091ca <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091aa:	d00e      	beq.n	80091ca <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091b4:	d009      	beq.n	80091ca <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091be:	d004      	beq.n	80091ca <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
 80091c0:	f640 0103 	movw	r1, #2051	; 0x803
 80091c4:	486a      	ldr	r0, [pc, #424]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 80091c6:	f7f8 f9e0 	bl	800158a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	2bff      	cmp	r3, #255	; 0xff
 80091d0:	d904      	bls.n	80091dc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
 80091d2:	f640 0104 	movw	r1, #2052	; 0x804
 80091d6:	4866      	ldr	r0, [pc, #408]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 80091d8:	f7f8 f9d7 	bl	800158a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e4:	d008      	beq.n	80091f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d004      	beq.n	80091f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80091ee:	f640 0105 	movw	r1, #2053	; 0x805
 80091f2:	485f      	ldr	r0, [pc, #380]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 80091f4:	f7f8 f9c9 	bl	800158a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009208:	d004      	beq.n	8009214 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800920a:	f640 0106 	movw	r1, #2054	; 0x806
 800920e:	4858      	ldr	r0, [pc, #352]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 8009210:	f7f8 f9bb 	bl	800158a <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b0f      	cmp	r3, #15
 800921a:	d904      	bls.n	8009226 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800921c:	f640 0107 	movw	r1, #2055	; 0x807
 8009220:	4853      	ldr	r0, [pc, #332]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 8009222:	f7f8 f9b2 	bl	800158a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800922e:	d008      	beq.n	8009242 <HAL_TIMEx_ConfigBreakDeadTime+0x116>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <HAL_TIMEx_ConfigBreakDeadTime+0x116>
 8009238:	f640 0108 	movw	r1, #2056	; 0x808
 800923c:	484c      	ldr	r0, [pc, #304]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 800923e:	f7f8 f9a4 	bl	800158a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_TIMEx_ConfigBreakDeadTime+0x124>
 800924c:	2302      	movs	r3, #2
 800924e:	e085      	b.n	800935c <HAL_TIMEx_ConfigBreakDeadTime+0x230>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	041b      	lsls	r3, r3, #16
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a25      	ldr	r2, [pc, #148]	; (8009364 <HAL_TIMEx_ConfigBreakDeadTime+0x238>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d13a      	bne.n	800934a <HAL_TIMEx_ConfigBreakDeadTime+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092dc:	d008      	beq.n	80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d004      	beq.n	80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>
 80092e6:	f640 011d 	movw	r1, #2077	; 0x81d
 80092ea:	4821      	ldr	r0, [pc, #132]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 80092ec:	f7f8 f94d 	bl	800158a <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d009      	beq.n	800930c <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009300:	d004      	beq.n	800930c <HAL_TIMEx_ConfigBreakDeadTime+0x1e0>
 8009302:	f640 011e 	movw	r1, #2078	; 0x81e
 8009306:	481a      	ldr	r0, [pc, #104]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 8009308:	f7f8 f93f 	bl	800158a <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b0f      	cmp	r3, #15
 8009312:	d904      	bls.n	800931e <HAL_TIMEx_ConfigBreakDeadTime+0x1f2>
 8009314:	f640 011f 	movw	r1, #2079	; 0x81f
 8009318:	4815      	ldr	r0, [pc, #84]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x244>)
 800931a:	f7f8 f936 	bl	800158a <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	051b      	lsls	r3, r3, #20
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40012c00 	.word	0x40012c00
 8009368:	40014000 	.word	0x40014000
 800936c:	40014400 	.word	0x40014400
 8009370:	0800d900 	.word	0x0800d900

08009374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <LL_GPIO_SetPinMode>:
{
 80093b0:	b480      	push	{r7}
 80093b2:	b08b      	sub	sp, #44	; 0x2c
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	fa93 f3a3 	rbit	r3, r3
 80093ca:	613b      	str	r3, [r7, #16]
  return result;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80093d6:	2320      	movs	r3, #32
 80093d8:	e003      	b.n	80093e2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	fab3 f383 	clz	r3, r3
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	2103      	movs	r1, #3
 80093e6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ea:	43db      	mvns	r3, r3
 80093ec:	401a      	ands	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	fa93 f3a3 	rbit	r3, r3
 80093f8:	61fb      	str	r3, [r7, #28]
  return result;
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009404:	2320      	movs	r3, #32
 8009406:	e003      	b.n	8009410 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	fab3 f383 	clz	r3, r3
 800940e:	b2db      	uxtb	r3, r3
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	fa01 f303 	lsl.w	r3, r1, r3
 8009418:	431a      	orrs	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]
}
 800941e:	bf00      	nop
 8009420:	372c      	adds	r7, #44	; 0x2c
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <LL_GPIO_SetPinOutputType>:
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	43db      	mvns	r3, r3
 800943e:	401a      	ands	r2, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6879      	ldr	r1, [r7, #4]
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	431a      	orrs	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	605a      	str	r2, [r3, #4]
}
 800944e:	bf00      	nop
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <LL_GPIO_SetPinSpeed>:
{
 800945a:	b480      	push	{r7}
 800945c:	b08b      	sub	sp, #44	; 0x2c
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	fa93 f3a3 	rbit	r3, r3
 8009474:	613b      	str	r3, [r7, #16]
  return result;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009480:	2320      	movs	r3, #32
 8009482:	e003      	b.n	800948c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	fab3 f383 	clz	r3, r3
 800948a:	b2db      	uxtb	r3, r3
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	2103      	movs	r1, #3
 8009490:	fa01 f303 	lsl.w	r3, r1, r3
 8009494:	43db      	mvns	r3, r3
 8009496:	401a      	ands	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	fa93 f3a3 	rbit	r3, r3
 80094a2:	61fb      	str	r3, [r7, #28]
  return result;
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80094ae:	2320      	movs	r3, #32
 80094b0:	e003      	b.n	80094ba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	fab3 f383 	clz	r3, r3
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	fa01 f303 	lsl.w	r3, r1, r3
 80094c2:	431a      	orrs	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	609a      	str	r2, [r3, #8]
}
 80094c8:	bf00      	nop
 80094ca:	372c      	adds	r7, #44	; 0x2c
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <LL_GPIO_SetPinPull>:
{
 80094d4:	b480      	push	{r7}
 80094d6:	b08b      	sub	sp, #44	; 0x2c
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	fa93 f3a3 	rbit	r3, r3
 80094ee:	613b      	str	r3, [r7, #16]
  return result;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80094fa:	2320      	movs	r3, #32
 80094fc:	e003      	b.n	8009506 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	fab3 f383 	clz	r3, r3
 8009504:	b2db      	uxtb	r3, r3
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	2103      	movs	r1, #3
 800950a:	fa01 f303 	lsl.w	r3, r1, r3
 800950e:	43db      	mvns	r3, r3
 8009510:	401a      	ands	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	fa93 f3a3 	rbit	r3, r3
 800951c:	61fb      	str	r3, [r7, #28]
  return result;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009528:	2320      	movs	r3, #32
 800952a:	e003      	b.n	8009534 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	fab3 f383 	clz	r3, r3
 8009532:	b2db      	uxtb	r3, r3
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	fa01 f303 	lsl.w	r3, r1, r3
 800953c:	431a      	orrs	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	60da      	str	r2, [r3, #12]
}
 8009542:	bf00      	nop
 8009544:	372c      	adds	r7, #44	; 0x2c
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <LL_GPIO_SetAFPin_0_7>:
{
 800954e:	b480      	push	{r7}
 8009550:	b08b      	sub	sp, #44	; 0x2c
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a1a      	ldr	r2, [r3, #32]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	fa93 f3a3 	rbit	r3, r3
 8009568:	613b      	str	r3, [r7, #16]
  return result;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009574:	2320      	movs	r3, #32
 8009576:	e003      	b.n	8009580 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	fab3 f383 	clz	r3, r3
 800957e:	b2db      	uxtb	r3, r3
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	210f      	movs	r1, #15
 8009584:	fa01 f303 	lsl.w	r3, r1, r3
 8009588:	43db      	mvns	r3, r3
 800958a:	401a      	ands	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	fa93 f3a3 	rbit	r3, r3
 8009596:	61fb      	str	r3, [r7, #28]
  return result;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80095a2:	2320      	movs	r3, #32
 80095a4:	e003      	b.n	80095ae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	fab3 f383 	clz	r3, r3
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	fa01 f303 	lsl.w	r3, r1, r3
 80095b6:	431a      	orrs	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	621a      	str	r2, [r3, #32]
}
 80095bc:	bf00      	nop
 80095be:	372c      	adds	r7, #44	; 0x2c
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <LL_GPIO_SetAFPin_8_15>:
{
 80095c8:	b480      	push	{r7}
 80095ca:	b08b      	sub	sp, #44	; 0x2c
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	fa93 f3a3 	rbit	r3, r3
 80095e4:	613b      	str	r3, [r7, #16]
  return result;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80095f0:	2320      	movs	r3, #32
 80095f2:	e003      	b.n	80095fc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	fab3 f383 	clz	r3, r3
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	210f      	movs	r1, #15
 8009600:	fa01 f303 	lsl.w	r3, r1, r3
 8009604:	43db      	mvns	r3, r3
 8009606:	401a      	ands	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	0a1b      	lsrs	r3, r3, #8
 800960c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	fa93 f3a3 	rbit	r3, r3
 8009614:	61fb      	str	r3, [r7, #28]
  return result;
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009620:	2320      	movs	r3, #32
 8009622:	e003      	b.n	800962c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	fab3 f383 	clz	r3, r3
 800962a:	b2db      	uxtb	r3, r3
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	fa01 f303 	lsl.w	r3, r1, r3
 8009634:	431a      	orrs	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	625a      	str	r2, [r3, #36]	; 0x24
}
 800963a:	bf00      	nop
 800963c:	372c      	adds	r7, #44	; 0x2c
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009658:	d017      	beq.n	800968a <LL_GPIO_Init+0x42>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a8b      	ldr	r2, [pc, #556]	; (800988c <LL_GPIO_Init+0x244>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <LL_GPIO_Init+0x42>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a8a      	ldr	r2, [pc, #552]	; (8009890 <LL_GPIO_Init+0x248>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00f      	beq.n	800968a <LL_GPIO_Init+0x42>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a89      	ldr	r2, [pc, #548]	; (8009894 <LL_GPIO_Init+0x24c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00b      	beq.n	800968a <LL_GPIO_Init+0x42>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a88      	ldr	r2, [pc, #544]	; (8009898 <LL_GPIO_Init+0x250>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d007      	beq.n	800968a <LL_GPIO_Init+0x42>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a87      	ldr	r2, [pc, #540]	; (800989c <LL_GPIO_Init+0x254>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <LL_GPIO_Init+0x42>
 8009682:	21c4      	movs	r1, #196	; 0xc4
 8009684:	4886      	ldr	r0, [pc, #536]	; (80098a0 <LL_GPIO_Init+0x258>)
 8009686:	f7f7 ff80 	bl	800158a <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d004      	beq.n	800969c <LL_GPIO_Init+0x54>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800969a:	d303      	bcc.n	80096a4 <LL_GPIO_Init+0x5c>
 800969c:	21c5      	movs	r1, #197	; 0xc5
 800969e:	4880      	ldr	r0, [pc, #512]	; (80098a0 <LL_GPIO_Init+0x258>)
 80096a0:	f7f7 ff73 	bl	800158a <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00f      	beq.n	80096cc <LL_GPIO_Init+0x84>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d00b      	beq.n	80096cc <LL_GPIO_Init+0x84>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d007      	beq.n	80096cc <LL_GPIO_Init+0x84>
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d003      	beq.n	80096cc <LL_GPIO_Init+0x84>
 80096c4:	21c6      	movs	r1, #198	; 0xc6
 80096c6:	4876      	ldr	r0, [pc, #472]	; (80098a0 <LL_GPIO_Init+0x258>)
 80096c8:	f7f7 ff5f 	bl	800158a <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00b      	beq.n	80096ec <LL_GPIO_Init+0xa4>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d007      	beq.n	80096ec <LL_GPIO_Init+0xa4>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d003      	beq.n	80096ec <LL_GPIO_Init+0xa4>
 80096e4:	21c7      	movs	r1, #199	; 0xc7
 80096e6:	486e      	ldr	r0, [pc, #440]	; (80098a0 <LL_GPIO_Init+0x258>)
 80096e8:	f7f7 ff4f 	bl	800158a <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	fa93 f3a3 	rbit	r3, r3
 80096f8:	60fb      	str	r3, [r7, #12]
  return result;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <LL_GPIO_Init+0xc0>
    return 32U;
 8009704:	2320      	movs	r3, #32
 8009706:	e003      	b.n	8009710 <LL_GPIO_Init+0xc8>
  return __builtin_clz(value);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	fab3 f383 	clz	r3, r3
 800970e:	b2db      	uxtb	r3, r3
 8009710:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009712:	e0ad      	b.n	8009870 <LL_GPIO_Init+0x228>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	2101      	movs	r1, #1
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	fa01 f303 	lsl.w	r3, r1, r3
 8009720:	4013      	ands	r3, r2
 8009722:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 809f 	beq.w	800986a <LL_GPIO_Init+0x222>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d003      	beq.n	800973c <LL_GPIO_Init+0xf4>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d12e      	bne.n	800979a <LL_GPIO_Init+0x152>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00f      	beq.n	8009764 <LL_GPIO_Init+0x11c>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d00b      	beq.n	8009764 <LL_GPIO_Init+0x11c>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d007      	beq.n	8009764 <LL_GPIO_Init+0x11c>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d003      	beq.n	8009764 <LL_GPIO_Init+0x11c>
 800975c:	21d8      	movs	r1, #216	; 0xd8
 800975e:	4850      	ldr	r0, [pc, #320]	; (80098a0 <LL_GPIO_Init+0x258>)
 8009760:	f7f7 ff13 	bl	800158a <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	461a      	mov	r2, r3
 800976a:	69b9      	ldr	r1, [r7, #24]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff fe74 	bl	800945a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d007      	beq.n	800978a <LL_GPIO_Init+0x142>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d003      	beq.n	800978a <LL_GPIO_Init+0x142>
 8009782:	21de      	movs	r1, #222	; 0xde
 8009784:	4846      	ldr	r0, [pc, #280]	; (80098a0 <LL_GPIO_Init+0x258>)
 8009786:	f7f7 ff00 	bl	800158a <assert_failed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6819      	ldr	r1, [r3, #0]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	461a      	mov	r2, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff fe48 	bl	800942a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	461a      	mov	r2, r3
 80097a0:	69b9      	ldr	r1, [r7, #24]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff fe96 	bl	80094d4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d155      	bne.n	800985c <LL_GPIO_Init+0x214>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d03f      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d03b      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d037      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d033      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d02f      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d02b      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	d027      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d023      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	2b08      	cmp	r3, #8
 80097f6:	d01f      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d01b      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	2b0a      	cmp	r3, #10
 8009806:	d017      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	2b0b      	cmp	r3, #11
 800980e:	d013      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	2b0c      	cmp	r3, #12
 8009816:	d00f      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	2b0d      	cmp	r3, #13
 800981e:	d00b      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	2b0e      	cmp	r3, #14
 8009826:	d007      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	2b0f      	cmp	r3, #15
 800982e:	d003      	beq.n	8009838 <LL_GPIO_Init+0x1f0>
 8009830:	21ea      	movs	r1, #234	; 0xea
 8009832:	481b      	ldr	r0, [pc, #108]	; (80098a0 <LL_GPIO_Init+0x258>)
 8009834:	f7f7 fea9 	bl	800158a <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2bff      	cmp	r3, #255	; 0xff
 800983c:	d807      	bhi.n	800984e <LL_GPIO_Init+0x206>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	461a      	mov	r2, r3
 8009844:	69b9      	ldr	r1, [r7, #24]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7ff fe81 	bl	800954e <LL_GPIO_SetAFPin_0_7>
 800984c:	e006      	b.n	800985c <LL_GPIO_Init+0x214>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	461a      	mov	r2, r3
 8009854:	69b9      	ldr	r1, [r7, #24]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff feb6 	bl	80095c8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	461a      	mov	r2, r3
 8009862:	69b9      	ldr	r1, [r7, #24]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fda3 	bl	80093b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	3301      	adds	r3, #1
 800986e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	fa22 f303 	lsr.w	r3, r2, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	f47f af4a 	bne.w	8009714 <LL_GPIO_Init+0xcc>
  }

  return (SUCCESS);
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	48000400 	.word	0x48000400
 8009890:	48000800 	.word	0x48000800
 8009894:	48000c00 	.word	0x48000c00
 8009898:	48001000 	.word	0x48001000
 800989c:	48001c00 	.word	0x48001c00
 80098a0:	0800d974 	.word	0x0800d974

080098a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80098a8:	4b07      	ldr	r3, [pc, #28]	; (80098c8 <LL_RCC_HSI_IsReady+0x24>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098b4:	d101      	bne.n	80098ba <LL_RCC_HSI_IsReady+0x16>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e000      	b.n	80098bc <LL_RCC_HSI_IsReady+0x18>
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	40021000 	.word	0x40021000

080098cc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <LL_RCC_LSE_IsReady+0x24>)
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d101      	bne.n	80098e2 <LL_RCC_LSE_IsReady+0x16>
 80098de:	2301      	movs	r3, #1
 80098e0:	e000      	b.n	80098e4 <LL_RCC_LSE_IsReady+0x18>
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	40021000 	.word	0x40021000

080098f4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80098f8:	4b06      	ldr	r3, [pc, #24]	; (8009914 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0308 	and.w	r3, r3, #8
 8009900:	2b08      	cmp	r3, #8
 8009902:	d101      	bne.n	8009908 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8009904:	2301      	movs	r3, #1
 8009906:	e000      	b.n	800990a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	40021000 	.word	0x40021000

08009918 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800991c:	4b04      	ldr	r3, [pc, #16]	; (8009930 <LL_RCC_MSI_GetRange+0x18>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009924:	4618      	mov	r0, r3
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40021000 	.word	0x40021000

08009934 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009938:	4b04      	ldr	r3, [pc, #16]	; (800994c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800993a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800993e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8009942:	4618      	mov	r0, r3
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	40021000 	.word	0x40021000

08009950 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009950:	b480      	push	{r7}
 8009952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009954:	4b04      	ldr	r3, [pc, #16]	; (8009968 <LL_RCC_GetSysClkSource+0x18>)
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f003 030c 	and.w	r3, r3, #12
}
 800995c:	4618      	mov	r0, r3
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	40021000 	.word	0x40021000

0800996c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <LL_RCC_GetAHBPrescaler+0x18>)
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009978:	4618      	mov	r0, r3
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	40021000 	.word	0x40021000

08009988 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800998c:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8009994:	4618      	mov	r0, r3
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	40021000 	.word	0x40021000

080099a4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80099a8:	4b04      	ldr	r3, [pc, #16]	; (80099bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	40021000 	.word	0x40021000

080099c0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80099c8:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <LL_RCC_GetUSARTClockSource+0x24>)
 80099ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	401a      	ands	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	041b      	lsls	r3, r3, #16
 80099d6:	4313      	orrs	r3, r2
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	40021000 	.word	0x40021000

080099e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80099ec:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <LL_RCC_PLL_GetMainSource+0x18>)
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f003 0303 	and.w	r3, r3, #3
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40021000 	.word	0x40021000

08009a04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <LL_RCC_PLL_GetN+0x18>)
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	0a1b      	lsrs	r3, r3, #8
 8009a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	40021000 	.word	0x40021000

08009a20 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009a24:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <LL_RCC_PLL_GetR+0x18>)
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	40021000 	.word	0x40021000

08009a3c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009a40:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <LL_RCC_PLL_GetDivider+0x18>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	40021000 	.word	0x40021000

08009a58 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d00a      	beq.n	8009a80 <LL_RCC_GetUSARTClockFreq+0x28>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b0c      	cmp	r3, #12
 8009a6e:	d007      	beq.n	8009a80 <LL_RCC_GetUSARTClockFreq+0x28>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b30      	cmp	r3, #48	; 0x30
 8009a74:	d004      	beq.n	8009a80 <LL_RCC_GetUSARTClockFreq+0x28>
 8009a76:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8009a7a:	486d      	ldr	r0, [pc, #436]	; (8009c30 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8009a7c:	f7f7 fd85 	bl	800158a <assert_failed>

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d137      	bne.n	8009af6 <LL_RCC_GetUSARTClockFreq+0x9e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ff9a 	bl	80099c0 <LL_RCC_GetUSARTClockSource>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	f200 80b3 	bhi.w	8009bfe <LL_RCC_GetUSARTClockFreq+0x1a6>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <LL_RCC_GetUSARTClockFreq+0x48>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009adf 	.word	0x08009adf
 8009aa4:	08009ab1 	.word	0x08009ab1
 8009aa8:	08009ab9 	.word	0x08009ab9
 8009aac:	08009acb 	.word	0x08009acb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009ab0:	f000 f8c6 	bl	8009c40 <RCC_GetSystemClockFreq>
 8009ab4:	60f8      	str	r0, [r7, #12]
        break;
 8009ab6:	e0b5      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8009ab8:	f7ff fef4 	bl	80098a4 <LL_RCC_HSI_IsReady>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 809f 	beq.w	8009c02 <LL_RCC_GetUSARTClockFreq+0x1aa>
        {
          usart_frequency = HSI_VALUE;
 8009ac4:	4b5b      	ldr	r3, [pc, #364]	; (8009c34 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8009ac6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009ac8:	e09b      	b.n	8009c02 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8009aca:	f7ff feff 	bl	80098cc <LL_RCC_LSE_IsReady>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8098 	beq.w	8009c06 <LL_RCC_GetUSARTClockFreq+0x1ae>
        {
          usart_frequency = LSE_VALUE;
 8009ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ada:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009adc:	e093      	b.n	8009c06 <LL_RCC_GetUSARTClockFreq+0x1ae>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009ade:	f000 f8af 	bl	8009c40 <RCC_GetSystemClockFreq>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 f93b 	bl	8009d60 <RCC_GetHCLKClockFreq>
 8009aea:	4603      	mov	r3, r0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 f961 	bl	8009db4 <RCC_GetPCLK2ClockFreq>
 8009af2:	60f8      	str	r0, [r7, #12]
        break;
 8009af4:	e096      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b0c      	cmp	r3, #12
 8009afa:	d146      	bne.n	8009b8a <LL_RCC_GetUSARTClockFreq+0x132>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff ff5f 	bl	80099c0 <LL_RCC_GetUSARTClockSource>
 8009b02:	4603      	mov	r3, r0
 8009b04:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8009b08:	2b0c      	cmp	r3, #12
 8009b0a:	d87e      	bhi.n	8009c0a <LL_RCC_GetUSARTClockFreq+0x1b2>
 8009b0c:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <LL_RCC_GetUSARTClockFreq+0xbc>)
 8009b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b12:	bf00      	nop
 8009b14:	08009b73 	.word	0x08009b73
 8009b18:	08009c0b 	.word	0x08009c0b
 8009b1c:	08009c0b 	.word	0x08009c0b
 8009b20:	08009c0b 	.word	0x08009c0b
 8009b24:	08009b49 	.word	0x08009b49
 8009b28:	08009c0b 	.word	0x08009c0b
 8009b2c:	08009c0b 	.word	0x08009c0b
 8009b30:	08009c0b 	.word	0x08009c0b
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009c0b 	.word	0x08009c0b
 8009b3c:	08009c0b 	.word	0x08009c0b
 8009b40:	08009c0b 	.word	0x08009c0b
 8009b44:	08009b61 	.word	0x08009b61
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009b48:	f000 f87a 	bl	8009c40 <RCC_GetSystemClockFreq>
 8009b4c:	60f8      	str	r0, [r7, #12]
        break;
 8009b4e:	e069      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8009b50:	f7ff fea8 	bl	80098a4 <LL_RCC_HSI_IsReady>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d059      	beq.n	8009c0e <LL_RCC_GetUSARTClockFreq+0x1b6>
        {
          usart_frequency = HSI_VALUE;
 8009b5a:	4b36      	ldr	r3, [pc, #216]	; (8009c34 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8009b5c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009b5e:	e056      	b.n	8009c0e <LL_RCC_GetUSARTClockFreq+0x1b6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8009b60:	f7ff feb4 	bl	80098cc <LL_RCC_LSE_IsReady>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d053      	beq.n	8009c12 <LL_RCC_GetUSARTClockFreq+0x1ba>
        {
          usart_frequency = LSE_VALUE;
 8009b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b6e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009b70:	e04f      	b.n	8009c12 <LL_RCC_GetUSARTClockFreq+0x1ba>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009b72:	f000 f865 	bl	8009c40 <RCC_GetSystemClockFreq>
 8009b76:	4603      	mov	r3, r0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f8f1 	bl	8009d60 <RCC_GetHCLKClockFreq>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f903 	bl	8009d8c <RCC_GetPCLK1ClockFreq>
 8009b86:	60f8      	str	r0, [r7, #12]
        break;
 8009b88:	e04c      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b30      	cmp	r3, #48	; 0x30
 8009b8e:	d142      	bne.n	8009c16 <LL_RCC_GetUSARTClockFreq+0x1be>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff ff15 	bl	80099c0 <LL_RCC_GetUSARTClockSource>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8009b9c:	d01a      	beq.n	8009bd4 <LL_RCC_GetUSARTClockFreq+0x17c>
 8009b9e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8009ba2:	d83a      	bhi.n	8009c1a <LL_RCC_GetUSARTClockFreq+0x1c2>
 8009ba4:	4a24      	ldr	r2, [pc, #144]	; (8009c38 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00c      	beq.n	8009bc4 <LL_RCC_GetUSARTClockFreq+0x16c>
 8009baa:	4a23      	ldr	r2, [pc, #140]	; (8009c38 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d834      	bhi.n	8009c1a <LL_RCC_GetUSARTClockFreq+0x1c2>
 8009bb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bb4:	d017      	beq.n	8009be6 <LL_RCC_GetUSARTClockFreq+0x18e>
 8009bb6:	4a21      	ldr	r2, [pc, #132]	; (8009c3c <LL_RCC_GetUSARTClockFreq+0x1e4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d12e      	bne.n	8009c1a <LL_RCC_GetUSARTClockFreq+0x1c2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8009bbc:	f000 f840 	bl	8009c40 <RCC_GetSystemClockFreq>
 8009bc0:	60f8      	str	r0, [r7, #12]
          break;
 8009bc2:	e02f      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8009bc4:	f7ff fe6e 	bl	80098a4 <LL_RCC_HSI_IsReady>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d027      	beq.n	8009c1e <LL_RCC_GetUSARTClockFreq+0x1c6>
          {
            usart_frequency = HSI_VALUE;
 8009bce:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8009bd0:	60fb      	str	r3, [r7, #12]
          }
          break;
 8009bd2:	e024      	b.n	8009c1e <LL_RCC_GetUSARTClockFreq+0x1c6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8009bd4:	f7ff fe7a 	bl	80098cc <LL_RCC_LSE_IsReady>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d021      	beq.n	8009c22 <LL_RCC_GetUSARTClockFreq+0x1ca>
          {
            usart_frequency = LSE_VALUE;
 8009bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009be2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8009be4:	e01d      	b.n	8009c22 <LL_RCC_GetUSARTClockFreq+0x1ca>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009be6:	f000 f82b 	bl	8009c40 <RCC_GetSystemClockFreq>
 8009bea:	4603      	mov	r3, r0
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f8b7 	bl	8009d60 <RCC_GetHCLKClockFreq>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 f8c9 	bl	8009d8c <RCC_GetPCLK1ClockFreq>
 8009bfa:	60f8      	str	r0, [r7, #12]
          break;
 8009bfc:	e012      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8009bfe:	bf00      	nop
 8009c00:	e010      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8009c02:	bf00      	nop
 8009c04:	e00e      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8009c06:	bf00      	nop
 8009c08:	e00c      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e00a      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8009c0e:	bf00      	nop
 8009c10:	e008      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8009c12:	bf00      	nop
 8009c14:	e006      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>

        default:
          break;
      }
    }
 8009c16:	bf00      	nop
 8009c18:	e004      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 8009c1a:	bf00      	nop
 8009c1c:	e002      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 8009c1e:	bf00      	nop
 8009c20:	e000      	b.n	8009c24 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 8009c22:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8009c24:	68fb      	ldr	r3, [r7, #12]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800d9e8 	.word	0x0800d9e8
 8009c34:	00f42400 	.word	0x00f42400
 8009c38:	00300020 	.word	0x00300020
 8009c3c:	00300010 	.word	0x00300010

08009c40 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009c46:	f7ff fe83 	bl	8009950 <LL_RCC_GetSysClkSource>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b0c      	cmp	r3, #12
 8009c4e:	d851      	bhi.n	8009cf4 <RCC_GetSystemClockFreq+0xb4>
 8009c50:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <RCC_GetSystemClockFreq+0x18>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009c8d 	.word	0x08009c8d
 8009c5c:	08009cf5 	.word	0x08009cf5
 8009c60:	08009cf5 	.word	0x08009cf5
 8009c64:	08009cf5 	.word	0x08009cf5
 8009c68:	08009ce1 	.word	0x08009ce1
 8009c6c:	08009cf5 	.word	0x08009cf5
 8009c70:	08009cf5 	.word	0x08009cf5
 8009c74:	08009cf5 	.word	0x08009cf5
 8009c78:	08009ce7 	.word	0x08009ce7
 8009c7c:	08009cf5 	.word	0x08009cf5
 8009c80:	08009cf5 	.word	0x08009cf5
 8009c84:	08009cf5 	.word	0x08009cf5
 8009c88:	08009ced 	.word	0x08009ced
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009c8c:	f7ff fe32 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d111      	bne.n	8009cba <RCC_GetSystemClockFreq+0x7a>
 8009c96:	f7ff fe2d 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <RCC_GetSystemClockFreq+0x6a>
 8009ca0:	f7ff fe3a 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	e003      	b.n	8009cb2 <RCC_GetSystemClockFreq+0x72>
 8009caa:	f7ff fe43 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	0a1b      	lsrs	r3, r3, #8
 8009cb2:	4a28      	ldr	r2, [pc, #160]	; (8009d54 <RCC_GetSystemClockFreq+0x114>)
 8009cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cb8:	e010      	b.n	8009cdc <RCC_GetSystemClockFreq+0x9c>
 8009cba:	f7ff fe1b 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d004      	beq.n	8009cce <RCC_GetSystemClockFreq+0x8e>
 8009cc4:	f7ff fe28 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	091b      	lsrs	r3, r3, #4
 8009ccc:	e003      	b.n	8009cd6 <RCC_GetSystemClockFreq+0x96>
 8009cce:	f7ff fe31 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	091b      	lsrs	r3, r3, #4
 8009cd6:	4a1f      	ldr	r2, [pc, #124]	; (8009d54 <RCC_GetSystemClockFreq+0x114>)
 8009cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cdc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009cde:	e033      	b.n	8009d48 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8009ce0:	4b1d      	ldr	r3, [pc, #116]	; (8009d58 <RCC_GetSystemClockFreq+0x118>)
 8009ce2:	607b      	str	r3, [r7, #4]
      break;
 8009ce4:	e030      	b.n	8009d48 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009ce6:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <RCC_GetSystemClockFreq+0x11c>)
 8009ce8:	607b      	str	r3, [r7, #4]
      break;
 8009cea:	e02d      	b.n	8009d48 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8009cec:	f000 f876 	bl	8009ddc <RCC_PLL_GetFreqDomain_SYS>
 8009cf0:	6078      	str	r0, [r7, #4]
      break;
 8009cf2:	e029      	b.n	8009d48 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009cf4:	f7ff fdfe 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d111      	bne.n	8009d22 <RCC_GetSystemClockFreq+0xe2>
 8009cfe:	f7ff fdf9 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <RCC_GetSystemClockFreq+0xd2>
 8009d08:	f7ff fe06 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	0a1b      	lsrs	r3, r3, #8
 8009d10:	e003      	b.n	8009d1a <RCC_GetSystemClockFreq+0xda>
 8009d12:	f7ff fe0f 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009d16:	4603      	mov	r3, r0
 8009d18:	0a1b      	lsrs	r3, r3, #8
 8009d1a:	4a0e      	ldr	r2, [pc, #56]	; (8009d54 <RCC_GetSystemClockFreq+0x114>)
 8009d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d20:	e010      	b.n	8009d44 <RCC_GetSystemClockFreq+0x104>
 8009d22:	f7ff fde7 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <RCC_GetSystemClockFreq+0xf6>
 8009d2c:	f7ff fdf4 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009d30:	4603      	mov	r3, r0
 8009d32:	091b      	lsrs	r3, r3, #4
 8009d34:	e003      	b.n	8009d3e <RCC_GetSystemClockFreq+0xfe>
 8009d36:	f7ff fdfd 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	091b      	lsrs	r3, r3, #4
 8009d3e:	4a05      	ldr	r2, [pc, #20]	; (8009d54 <RCC_GetSystemClockFreq+0x114>)
 8009d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d44:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009d46:	bf00      	nop
  }

  return frequency;
 8009d48:	687b      	ldr	r3, [r7, #4]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	0800db80 	.word	0x0800db80
 8009d58:	00f42400 	.word	0x00f42400
 8009d5c:	02dc6c00 	.word	0x02dc6c00

08009d60 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009d68:	f7ff fe00 	bl	800996c <LL_RCC_GetAHBPrescaler>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	091b      	lsrs	r3, r3, #4
 8009d70:	f003 030f 	and.w	r3, r3, #15
 8009d74:	4a04      	ldr	r2, [pc, #16]	; (8009d88 <RCC_GetHCLKClockFreq+0x28>)
 8009d76:	5cd3      	ldrb	r3, [r2, r3]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	40d3      	lsrs	r3, r2
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	0800db68 	.word	0x0800db68

08009d8c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009d94:	f7ff fdf8 	bl	8009988 <LL_RCC_GetAPB1Prescaler>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	0a1b      	lsrs	r3, r3, #8
 8009d9c:	4a04      	ldr	r2, [pc, #16]	; (8009db0 <RCC_GetPCLK1ClockFreq+0x24>)
 8009d9e:	5cd3      	ldrb	r3, [r2, r3]
 8009da0:	461a      	mov	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	40d3      	lsrs	r3, r2
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	0800db78 	.word	0x0800db78

08009db4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009dbc:	f7ff fdf2 	bl	80099a4 <LL_RCC_GetAPB2Prescaler>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	0adb      	lsrs	r3, r3, #11
 8009dc4:	4a04      	ldr	r2, [pc, #16]	; (8009dd8 <RCC_GetPCLK2ClockFreq+0x24>)
 8009dc6:	5cd3      	ldrb	r3, [r2, r3]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	40d3      	lsrs	r3, r2
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	0800db78 	.word	0x0800db78

08009ddc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009ddc:	b590      	push	{r4, r7, lr}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009de2:	f7ff fe01 	bl	80099e8 <LL_RCC_PLL_GetMainSource>
 8009de6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d036      	beq.n	8009e5c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d836      	bhi.n	8009e62 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d003      	beq.n	8009e02 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d02a      	beq.n	8009e56 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8009e00:	e02f      	b.n	8009e62 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009e02:	f7ff fd77 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d111      	bne.n	8009e30 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8009e0c:	f7ff fd72 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8009e16:	f7ff fd7f 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	0a1b      	lsrs	r3, r3, #8
 8009e1e:	e003      	b.n	8009e28 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8009e20:	f7ff fd88 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009e24:	4603      	mov	r3, r0
 8009e26:	0a1b      	lsrs	r3, r3, #8
 8009e28:	4a2f      	ldr	r2, [pc, #188]	; (8009ee8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e2e:	e010      	b.n	8009e52 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8009e30:	f7ff fd60 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8009e3a:	f7ff fd6d 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	091b      	lsrs	r3, r3, #4
 8009e42:	e003      	b.n	8009e4c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8009e44:	f7ff fd76 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	091b      	lsrs	r3, r3, #4
 8009e4c:	4a26      	ldr	r2, [pc, #152]	; (8009ee8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e52:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009e54:	e02f      	b.n	8009eb6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009e56:	4b25      	ldr	r3, [pc, #148]	; (8009eec <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8009e58:	607b      	str	r3, [r7, #4]
      break;
 8009e5a:	e02c      	b.n	8009eb6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009e5c:	4b24      	ldr	r3, [pc, #144]	; (8009ef0 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8009e5e:	607b      	str	r3, [r7, #4]
      break;
 8009e60:	e029      	b.n	8009eb6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009e62:	f7ff fd47 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d111      	bne.n	8009e90 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8009e6c:	f7ff fd42 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8009e76:	f7ff fd4f 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	0a1b      	lsrs	r3, r3, #8
 8009e7e:	e003      	b.n	8009e88 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8009e80:	f7ff fd58 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009e84:	4603      	mov	r3, r0
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e8e:	e010      	b.n	8009eb2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8009e90:	f7ff fd30 	bl	80098f4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d004      	beq.n	8009ea4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8009e9a:	f7ff fd3d 	bl	8009918 <LL_RCC_MSI_GetRange>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	091b      	lsrs	r3, r3, #4
 8009ea2:	e003      	b.n	8009eac <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8009ea4:	f7ff fd46 	bl	8009934 <LL_RCC_MSI_GetRangeAfterStandby>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	091b      	lsrs	r3, r3, #4
 8009eac:	4a0e      	ldr	r2, [pc, #56]	; (8009ee8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eb2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009eb4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009eb6:	f7ff fdc1 	bl	8009a3c <LL_RCC_PLL_GetDivider>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	091b      	lsrs	r3, r3, #4
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	fbb2 f4f3 	udiv	r4, r2, r3
 8009ec6:	f7ff fd9d 	bl	8009a04 <LL_RCC_PLL_GetN>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	fb03 f404 	mul.w	r4, r3, r4
 8009ed0:	f7ff fda6 	bl	8009a20 <LL_RCC_PLL_GetR>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	0e5b      	lsrs	r3, r3, #25
 8009ed8:	3301      	adds	r3, #1
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd90      	pop	{r4, r7, pc}
 8009ee8:	0800db80 	.word	0x0800db80
 8009eec:	00f42400 	.word	0x00f42400
 8009ef0:	02dc6c00 	.word	0x02dc6c00

08009ef4 <LL_USART_IsEnabled>:
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <LL_USART_IsEnabled+0x18>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <LL_USART_IsEnabled+0x1a>
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <LL_USART_SetStopBitsLength>:
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	605a      	str	r2, [r3, #4]
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <LL_USART_SetHWFlowCtrl>:
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	609a      	str	r2, [r3, #8]
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <LL_USART_SetBaudRate>:
{
 8009f66:	b480      	push	{r7}
 8009f68:	b087      	sub	sp, #28
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f7a:	d11a      	bne.n	8009fb2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	005a      	lsls	r2, r3, #1
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	085b      	lsrs	r3, r3, #1
 8009f84:	441a      	add	r2, r3
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8009f96:	4013      	ands	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	085b      	lsrs	r3, r3, #1
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f003 0307 	and.w	r3, r3, #7
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	60da      	str	r2, [r3, #12]
}
 8009fb0:	e00a      	b.n	8009fc8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	085a      	lsrs	r2, r3, #1
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	441a      	add	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	60da      	str	r2, [r3, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	371c      	adds	r7, #28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a73      	ldr	r2, [pc, #460]	; (800a1b8 <LL_USART_Init+0x1e4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00b      	beq.n	800a006 <LL_USART_Init+0x32>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a72      	ldr	r2, [pc, #456]	; (800a1bc <LL_USART_Init+0x1e8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d007      	beq.n	800a006 <LL_USART_Init+0x32>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a71      	ldr	r2, [pc, #452]	; (800a1c0 <LL_USART_Init+0x1ec>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d003      	beq.n	800a006 <LL_USART_Init+0x32>
 8009ffe:	21d7      	movs	r1, #215	; 0xd7
 800a000:	4870      	ldr	r0, [pc, #448]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a002:	f7f7 fac2 	bl	800158a <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
#endif /* USART_PRESC_PRESCALER */
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a6f      	ldr	r2, [pc, #444]	; (800a1c8 <LL_USART_Init+0x1f4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d903      	bls.n	800a018 <LL_USART_Init+0x44>
 800a010:	21db      	movs	r1, #219	; 0xdb
 800a012:	486c      	ldr	r0, [pc, #432]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a014:	f7f7 fab9 	bl	800158a <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a020:	d00c      	beq.n	800a03c <LL_USART_Init+0x68>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d008      	beq.n	800a03c <LL_USART_Init+0x68>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a032:	d003      	beq.n	800a03c <LL_USART_Init+0x68>
 800a034:	21dc      	movs	r1, #220	; 0xdc
 800a036:	4863      	ldr	r0, [pc, #396]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a038:	f7f7 faa7 	bl	800158a <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a044:	d011      	beq.n	800a06a <LL_USART_Init+0x96>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00d      	beq.n	800a06a <LL_USART_Init+0x96>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a056:	d008      	beq.n	800a06a <LL_USART_Init+0x96>
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a060:	d003      	beq.n	800a06a <LL_USART_Init+0x96>
 800a062:	21dd      	movs	r1, #221	; 0xdd
 800a064:	4857      	ldr	r0, [pc, #348]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a066:	f7f7 fa90 	bl	800158a <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00d      	beq.n	800a08e <LL_USART_Init+0xba>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a07a:	d008      	beq.n	800a08e <LL_USART_Init+0xba>
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a084:	d003      	beq.n	800a08e <LL_USART_Init+0xba>
 800a086:	21de      	movs	r1, #222	; 0xde
 800a088:	484e      	ldr	r0, [pc, #312]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a08a:	f7f7 fa7e 	bl	800158a <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00f      	beq.n	800a0b6 <LL_USART_Init+0xe2>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d00b      	beq.n	800a0b6 <LL_USART_Init+0xe2>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	d007      	beq.n	800a0b6 <LL_USART_Init+0xe2>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	2b0c      	cmp	r3, #12
 800a0ac:	d003      	beq.n	800a0b6 <LL_USART_Init+0xe2>
 800a0ae:	21df      	movs	r1, #223	; 0xdf
 800a0b0:	4844      	ldr	r0, [pc, #272]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a0b2:	f7f7 fa6a 	bl	800158a <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d012      	beq.n	800a0e4 <LL_USART_Init+0x110>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c6:	d00d      	beq.n	800a0e4 <LL_USART_Init+0x110>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d0:	d008      	beq.n	800a0e4 <LL_USART_Init+0x110>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0da:	d003      	beq.n	800a0e4 <LL_USART_Init+0x110>
 800a0dc:	21e0      	movs	r1, #224	; 0xe0
 800a0de:	4839      	ldr	r0, [pc, #228]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a0e0:	f7f7 fa53 	bl	800158a <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d008      	beq.n	800a0fe <LL_USART_Init+0x12a>
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0f4:	d003      	beq.n	800a0fe <LL_USART_Init+0x12a>
 800a0f6:	21e1      	movs	r1, #225	; 0xe1
 800a0f8:	4832      	ldr	r0, [pc, #200]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a0fa:	f7f7 fa46 	bl	800158a <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff fef8 	bl	8009ef4 <LL_USART_IsEnabled>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d151      	bne.n	800a1ae <LL_USART_Init+0x1da>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	4b2f      	ldr	r3, [pc, #188]	; (800a1cc <LL_USART_Init+0x1f8>)
 800a110:	4013      	ands	r3, r2
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	6851      	ldr	r1, [r2, #4]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	68d2      	ldr	r2, [r2, #12]
 800a11a:	4311      	orrs	r1, r2
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	6912      	ldr	r2, [r2, #16]
 800a120:	4311      	orrs	r1, r2
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	6992      	ldr	r2, [r2, #24]
 800a126:	430a      	orrs	r2, r1
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fef0 	bl	8009f1a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff fefd 	bl	8009f40 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a1b      	ldr	r2, [pc, #108]	; (800a1b8 <LL_USART_Init+0x1e4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d104      	bne.n	800a158 <LL_USART_Init+0x184>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a14e:	2003      	movs	r0, #3
 800a150:	f7ff fc82 	bl	8009a58 <LL_RCC_GetUSARTClockFreq>
 800a154:	60b8      	str	r0, [r7, #8]
 800a156:	e010      	b.n	800a17a <LL_USART_Init+0x1a6>
    }
    else if (USARTx == USART2)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a18      	ldr	r2, [pc, #96]	; (800a1bc <LL_USART_Init+0x1e8>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d104      	bne.n	800a16a <LL_USART_Init+0x196>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a160:	200c      	movs	r0, #12
 800a162:	f7ff fc79 	bl	8009a58 <LL_RCC_GetUSARTClockFreq>
 800a166:	60b8      	str	r0, [r7, #8]
 800a168:	e007      	b.n	800a17a <LL_USART_Init+0x1a6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <LL_USART_Init+0x1ec>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d103      	bne.n	800a17a <LL_USART_Init+0x1a6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800a172:	2030      	movs	r0, #48	; 0x30
 800a174:	f7ff fc70 	bl	8009a58 <LL_RCC_GetUSARTClockFreq>
 800a178:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d016      	beq.n	800a1ae <LL_USART_Init+0x1da>
        && (USART_InitStruct->BaudRate != 0U))
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d012      	beq.n	800a1ae <LL_USART_Init+0x1da>
    {
      status = SUCCESS;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	699a      	ldr	r2, [r3, #24]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff fee5 	bl	8009f66 <LL_USART_SetBaudRate>
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	2b0f      	cmp	r3, #15
 800a1a2:	d804      	bhi.n	800a1ae <LL_USART_Init+0x1da>
 800a1a4:	f44f 719c 	mov.w	r1, #312	; 0x138
 800a1a8:	4806      	ldr	r0, [pc, #24]	; (800a1c4 <LL_USART_Init+0x1f0>)
 800a1aa:	f7f7 f9ee 	bl	800158a <assert_failed>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	40013800 	.word	0x40013800
 800a1bc:	40004400 	.word	0x40004400
 800a1c0:	40004800 	.word	0x40004800
 800a1c4:	0800da58 	.word	0x0800da58
 800a1c8:	00989680 	.word	0x00989680
 800a1cc:	efff69f3 	.word	0xefff69f3

0800a1d0 <__NVIC_SetPriority>:
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	6039      	str	r1, [r7, #0]
 800a1da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	db0a      	blt.n	800a1fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	490c      	ldr	r1, [pc, #48]	; (800a21c <__NVIC_SetPriority+0x4c>)
 800a1ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ee:	0112      	lsls	r2, r2, #4
 800a1f0:	b2d2      	uxtb	r2, r2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a1f8:	e00a      	b.n	800a210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	4908      	ldr	r1, [pc, #32]	; (800a220 <__NVIC_SetPriority+0x50>)
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	f003 030f 	and.w	r3, r3, #15
 800a206:	3b04      	subs	r3, #4
 800a208:	0112      	lsls	r2, r2, #4
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	440b      	add	r3, r1
 800a20e:	761a      	strb	r2, [r3, #24]
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	e000e100 	.word	0xe000e100
 800a220:	e000ed00 	.word	0xe000ed00

0800a224 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a228:	4b05      	ldr	r3, [pc, #20]	; (800a240 <SysTick_Handler+0x1c>)
 800a22a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a22c:	f002 fa30 	bl	800c690 <xTaskGetSchedulerState>
 800a230:	4603      	mov	r3, r0
 800a232:	2b01      	cmp	r3, #1
 800a234:	d001      	beq.n	800a23a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a236:	f000 fe07 	bl	800ae48 <xPortSysTickHandler>
  }
}
 800a23a:	bf00      	nop
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	e000e010 	.word	0xe000e010

0800a244 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a248:	2100      	movs	r1, #0
 800a24a:	f06f 0004 	mvn.w	r0, #4
 800a24e:	f7ff ffbf 	bl	800a1d0 <__NVIC_SetPriority>
#endif
}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a25e:	f3ef 8305 	mrs	r3, IPSR
 800a262:	603b      	str	r3, [r7, #0]
  return(result);
 800a264:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a26a:	f06f 0305 	mvn.w	r3, #5
 800a26e:	607b      	str	r3, [r7, #4]
 800a270:	e00c      	b.n	800a28c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a272:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <osKernelInitialize+0x44>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d105      	bne.n	800a286 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a27a:	4b08      	ldr	r3, [pc, #32]	; (800a29c <osKernelInitialize+0x44>)
 800a27c:	2201      	movs	r2, #1
 800a27e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a280:	2300      	movs	r3, #0
 800a282:	607b      	str	r3, [r7, #4]
 800a284:	e002      	b.n	800a28c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a286:	f04f 33ff 	mov.w	r3, #4294967295
 800a28a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a28c:	687b      	ldr	r3, [r7, #4]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000350 	.word	0x20000350

0800a2a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a6:	f3ef 8305 	mrs	r3, IPSR
 800a2aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a2ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800a2b2:	f06f 0305 	mvn.w	r3, #5
 800a2b6:	607b      	str	r3, [r7, #4]
 800a2b8:	e010      	b.n	800a2dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <osKernelStart+0x48>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d109      	bne.n	800a2d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a2c2:	f7ff ffbf 	bl	800a244 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2c6:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <osKernelStart+0x48>)
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2cc:	f001 fd5e 	bl	800bd8c <vTaskStartScheduler>
      stat = osOK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	607b      	str	r3, [r7, #4]
 800a2d4:	e002      	b.n	800a2dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2dc:	687b      	ldr	r3, [r7, #4]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000350 	.word	0x20000350

0800a2ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08e      	sub	sp, #56	; 0x38
 800a2f0:	af04      	add	r7, sp, #16
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2fc:	f3ef 8305 	mrs	r3, IPSR
 800a300:	617b      	str	r3, [r7, #20]
  return(result);
 800a302:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a304:	2b00      	cmp	r3, #0
 800a306:	d17e      	bne.n	800a406 <osThreadNew+0x11a>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d07b      	beq.n	800a406 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a30e:	2380      	movs	r3, #128	; 0x80
 800a310:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a312:	2318      	movs	r3, #24
 800a314:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d045      	beq.n	800a3b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <osThreadNew+0x48>
        name = attr->name;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <osThreadNew+0x6e>
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	2b38      	cmp	r3, #56	; 0x38
 800a34c:	d805      	bhi.n	800a35a <osThreadNew+0x6e>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <osThreadNew+0x72>
        return (NULL);
 800a35a:	2300      	movs	r3, #0
 800a35c:	e054      	b.n	800a408 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	089b      	lsrs	r3, r3, #2
 800a36c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00e      	beq.n	800a394 <osThreadNew+0xa8>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	2bbb      	cmp	r3, #187	; 0xbb
 800a37c:	d90a      	bls.n	800a394 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a382:	2b00      	cmp	r3, #0
 800a384:	d006      	beq.n	800a394 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <osThreadNew+0xa8>
        mem = 1;
 800a38e:	2301      	movs	r3, #1
 800a390:	61bb      	str	r3, [r7, #24]
 800a392:	e010      	b.n	800a3b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10c      	bne.n	800a3b6 <osThreadNew+0xca>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d108      	bne.n	800a3b6 <osThreadNew+0xca>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d104      	bne.n	800a3b6 <osThreadNew+0xca>
          mem = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e001      	b.n	800a3b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d110      	bne.n	800a3de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3c4:	9202      	str	r2, [sp, #8]
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6a3a      	ldr	r2, [r7, #32]
 800a3d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f001 faee 	bl	800b9b4 <xTaskCreateStatic>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	e013      	b.n	800a406 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d110      	bne.n	800a406 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	f107 0310 	add.w	r3, r7, #16
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f001 fb39 	bl	800ba6e <xTaskCreate>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d001      	beq.n	800a406 <osThreadNew+0x11a>
            hTask = NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a406:	693b      	ldr	r3, [r7, #16]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3728      	adds	r7, #40	; 0x28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a418:	f3ef 8305 	mrs	r3, IPSR
 800a41c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a41e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a420:	2b00      	cmp	r3, #0
 800a422:	d003      	beq.n	800a42c <osDelay+0x1c>
    stat = osErrorISR;
 800a424:	f06f 0305 	mvn.w	r3, #5
 800a428:	60fb      	str	r3, [r7, #12]
 800a42a:	e007      	b.n	800a43c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fc74 	bl	800bd24 <vTaskDelay>
    }
  }

  return (stat);
 800a43c:	68fb      	ldr	r3, [r7, #12]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a446:	b580      	push	{r7, lr}
 800a448:	b08a      	sub	sp, #40	; 0x28
 800a44a:	af02      	add	r7, sp, #8
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a456:	f3ef 8305 	mrs	r3, IPSR
 800a45a:	613b      	str	r3, [r7, #16]
  return(result);
 800a45c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d15f      	bne.n	800a522 <osMessageQueueNew+0xdc>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d05c      	beq.n	800a522 <osMessageQueueNew+0xdc>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d059      	beq.n	800a522 <osMessageQueueNew+0xdc>
    mem = -1;
 800a46e:	f04f 33ff 	mov.w	r3, #4294967295
 800a472:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d029      	beq.n	800a4ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d012      	beq.n	800a4a8 <osMessageQueueNew+0x62>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	2b4f      	cmp	r3, #79	; 0x4f
 800a488:	d90e      	bls.n	800a4a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695a      	ldr	r2, [r3, #20]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68b9      	ldr	r1, [r7, #8]
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d302      	bcc.n	800a4a8 <osMessageQueueNew+0x62>
        mem = 1;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	61bb      	str	r3, [r7, #24]
 800a4a6:	e014      	b.n	800a4d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d110      	bne.n	800a4d2 <osMessageQueueNew+0x8c>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10c      	bne.n	800a4d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d108      	bne.n	800a4d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d104      	bne.n	800a4d2 <osMessageQueueNew+0x8c>
          mem = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	61bb      	str	r3, [r7, #24]
 800a4cc:	e001      	b.n	800a4d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d10b      	bne.n	800a4f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691a      	ldr	r2, [r3, #16]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	9100      	str	r1, [sp, #0]
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fda6 	bl	800b038 <xQueueGenericCreateStatic>
 800a4ec:	61f8      	str	r0, [r7, #28]
 800a4ee:	e008      	b.n	800a502 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 fe14 	bl	800b128 <xQueueGenericCreate>
 800a500:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00c      	beq.n	800a522 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	e001      	b.n	800a51a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a51a:	6979      	ldr	r1, [r7, #20]
 800a51c:	69f8      	ldr	r0, [r7, #28]
 800a51e:	f001 f9eb 	bl	800b8f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a522:	69fb      	ldr	r3, [r7, #28]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3720      	adds	r7, #32
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4a07      	ldr	r2, [pc, #28]	; (800a558 <vApplicationGetIdleTaskMemory+0x2c>)
 800a53c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	4a06      	ldr	r2, [pc, #24]	; (800a55c <vApplicationGetIdleTaskMemory+0x30>)
 800a542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2280      	movs	r2, #128	; 0x80
 800a548:	601a      	str	r2, [r3, #0]
}
 800a54a:	bf00      	nop
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	20000354 	.word	0x20000354
 800a55c:	20000410 	.word	0x20000410

0800a560 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4a07      	ldr	r2, [pc, #28]	; (800a58c <vApplicationGetTimerTaskMemory+0x2c>)
 800a570:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	4a06      	ldr	r2, [pc, #24]	; (800a590 <vApplicationGetTimerTaskMemory+0x30>)
 800a576:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a57e:	601a      	str	r2, [r3, #0]
}
 800a580:	bf00      	nop
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20000610 	.word	0x20000610
 800a590:	200006cc 	.word	0x200006cc

0800a594 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5a0:	f001 fc64 	bl	800be6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5a4:	4b5b      	ldr	r3, [pc, #364]	; (800a714 <pvPortMalloc+0x180>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5ac:	f000 f920 	bl	800a7f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5b0:	4b59      	ldr	r3, [pc, #356]	; (800a718 <pvPortMalloc+0x184>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 8093 	bne.w	800a6e4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d01d      	beq.n	800a600 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5c4:	2208      	movs	r2, #8
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d014      	beq.n	800a600 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f023 0307 	bic.w	r3, r3, #7
 800a5dc:	3308      	adds	r3, #8
 800a5de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d06e      	beq.n	800a6e4 <pvPortMalloc+0x150>
 800a606:	4b45      	ldr	r3, [pc, #276]	; (800a71c <pvPortMalloc+0x188>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d869      	bhi.n	800a6e4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a610:	4b43      	ldr	r3, [pc, #268]	; (800a720 <pvPortMalloc+0x18c>)
 800a612:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a614:	4b42      	ldr	r3, [pc, #264]	; (800a720 <pvPortMalloc+0x18c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a61a:	e004      	b.n	800a626 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d903      	bls.n	800a638 <pvPortMalloc+0xa4>
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1f1      	bne.n	800a61c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a638:	4b36      	ldr	r3, [pc, #216]	; (800a714 <pvPortMalloc+0x180>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a63e:	429a      	cmp	r2, r3
 800a640:	d050      	beq.n	800a6e4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2208      	movs	r2, #8
 800a648:	4413      	add	r3, r2
 800a64a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	6a3b      	ldr	r3, [r7, #32]
 800a652:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	2308      	movs	r3, #8
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	429a      	cmp	r2, r3
 800a662:	d91f      	bls.n	800a6a4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4413      	add	r3, r2
 800a66a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	f003 0307 	and.w	r3, r3, #7
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <pvPortMalloc+0xf8>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	613b      	str	r3, [r7, #16]
}
 800a688:	bf00      	nop
 800a68a:	e7fe      	b.n	800a68a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	1ad2      	subs	r2, r2, r3
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a69e:	69b8      	ldr	r0, [r7, #24]
 800a6a0:	f000 f908 	bl	800a8b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6a4:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <pvPortMalloc+0x188>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	4a1b      	ldr	r2, [pc, #108]	; (800a71c <pvPortMalloc+0x188>)
 800a6b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6b2:	4b1a      	ldr	r3, [pc, #104]	; (800a71c <pvPortMalloc+0x188>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	4b1b      	ldr	r3, [pc, #108]	; (800a724 <pvPortMalloc+0x190>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d203      	bcs.n	800a6c6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6be:	4b17      	ldr	r3, [pc, #92]	; (800a71c <pvPortMalloc+0x188>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a18      	ldr	r2, [pc, #96]	; (800a724 <pvPortMalloc+0x190>)
 800a6c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	4b13      	ldr	r3, [pc, #76]	; (800a718 <pvPortMalloc+0x184>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6da:	4b13      	ldr	r3, [pc, #76]	; (800a728 <pvPortMalloc+0x194>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	4a11      	ldr	r2, [pc, #68]	; (800a728 <pvPortMalloc+0x194>)
 800a6e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6e4:	f001 fbd0 	bl	800be88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <pvPortMalloc+0x174>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	60fb      	str	r3, [r7, #12]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <pvPortMalloc+0x172>
	return pvReturn;
 800a708:	69fb      	ldr	r3, [r7, #28]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3728      	adds	r7, #40	; 0x28
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20004954 	.word	0x20004954
 800a718:	20004968 	.word	0x20004968
 800a71c:	20004958 	.word	0x20004958
 800a720:	2000494c 	.word	0x2000494c
 800a724:	2000495c 	.word	0x2000495c
 800a728:	20004960 	.word	0x20004960

0800a72c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d04d      	beq.n	800a7da <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a73e:	2308      	movs	r3, #8
 800a740:	425b      	negs	r3, r3
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4413      	add	r3, r2
 800a746:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	4b24      	ldr	r3, [pc, #144]	; (800a7e4 <vPortFree+0xb8>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4013      	ands	r3, r2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10a      	bne.n	800a770 <vPortFree+0x44>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	60fb      	str	r3, [r7, #12]
}
 800a76c:	bf00      	nop
 800a76e:	e7fe      	b.n	800a76e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00a      	beq.n	800a78e <vPortFree+0x62>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	60bb      	str	r3, [r7, #8]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <vPortFree+0xb8>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4013      	ands	r3, r2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01e      	beq.n	800a7da <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d11a      	bne.n	800a7da <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	4b0e      	ldr	r3, [pc, #56]	; (800a7e4 <vPortFree+0xb8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	401a      	ands	r2, r3
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7b4:	f001 fb5a 	bl	800be6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <vPortFree+0xbc>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4a09      	ldr	r2, [pc, #36]	; (800a7e8 <vPortFree+0xbc>)
 800a7c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7c6:	6938      	ldr	r0, [r7, #16]
 800a7c8:	f000 f874 	bl	800a8b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7cc:	4b07      	ldr	r3, [pc, #28]	; (800a7ec <vPortFree+0xc0>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	4a06      	ldr	r2, [pc, #24]	; (800a7ec <vPortFree+0xc0>)
 800a7d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7d6:	f001 fb57 	bl	800be88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7da:	bf00      	nop
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20004968 	.word	0x20004968
 800a7e8:	20004958 	.word	0x20004958
 800a7ec:	20004964 	.word	0x20004964

0800a7f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7f6:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800a7fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7fc:	4b27      	ldr	r3, [pc, #156]	; (800a89c <prvHeapInit+0xac>)
 800a7fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00c      	beq.n	800a824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3307      	adds	r3, #7
 800a80e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0307 	bic.w	r3, r3, #7
 800a816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	4a1f      	ldr	r2, [pc, #124]	; (800a89c <prvHeapInit+0xac>)
 800a820:	4413      	add	r3, r2
 800a822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a828:	4a1d      	ldr	r2, [pc, #116]	; (800a8a0 <prvHeapInit+0xb0>)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a82e:	4b1c      	ldr	r3, [pc, #112]	; (800a8a0 <prvHeapInit+0xb0>)
 800a830:	2200      	movs	r2, #0
 800a832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	4413      	add	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a83c:	2208      	movs	r2, #8
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f023 0307 	bic.w	r3, r3, #7
 800a84a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4a15      	ldr	r2, [pc, #84]	; (800a8a4 <prvHeapInit+0xb4>)
 800a850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a852:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <prvHeapInit+0xb4>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2200      	movs	r2, #0
 800a858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a85a:	4b12      	ldr	r3, [pc, #72]	; (800a8a4 <prvHeapInit+0xb4>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	1ad2      	subs	r2, r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a870:	4b0c      	ldr	r3, [pc, #48]	; (800a8a4 <prvHeapInit+0xb4>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	4a0a      	ldr	r2, [pc, #40]	; (800a8a8 <prvHeapInit+0xb8>)
 800a87e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	4a09      	ldr	r2, [pc, #36]	; (800a8ac <prvHeapInit+0xbc>)
 800a886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <prvHeapInit+0xc0>)
 800a88a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a88e:	601a      	str	r2, [r3, #0]
}
 800a890:	bf00      	nop
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	20000acc 	.word	0x20000acc
 800a8a0:	2000494c 	.word	0x2000494c
 800a8a4:	20004954 	.word	0x20004954
 800a8a8:	2000495c 	.word	0x2000495c
 800a8ac:	20004958 	.word	0x20004958
 800a8b0:	20004968 	.word	0x20004968

0800a8b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8bc:	4b28      	ldr	r3, [pc, #160]	; (800a960 <prvInsertBlockIntoFreeList+0xac>)
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	e002      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x14>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d8f7      	bhi.n	800a8c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d108      	bne.n	800a8f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	441a      	add	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	441a      	add	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d118      	bne.n	800a93c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	4b15      	ldr	r3, [pc, #84]	; (800a964 <prvInsertBlockIntoFreeList+0xb0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	429a      	cmp	r2, r3
 800a914:	d00d      	beq.n	800a932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	e008      	b.n	800a944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a932:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <prvInsertBlockIntoFreeList+0xb0>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e003      	b.n	800a944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d002      	beq.n	800a952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a952:	bf00      	nop
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	2000494c 	.word	0x2000494c
 800a964:	20004954 	.word	0x20004954

0800a968 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f103 0208 	add.w	r2, r3, #8
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f04f 32ff 	mov.w	r2, #4294967295
 800a980:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f103 0208 	add.w	r2, r3, #8
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f103 0208 	add.w	r2, r3, #8
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9b6:	bf00      	nop
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b085      	sub	sp, #20
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	689a      	ldr	r2, [r3, #8]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	601a      	str	r2, [r3, #0]
}
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa20:	d103      	bne.n	800aa2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	e00c      	b.n	800aa44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	e002      	b.n	800aa38 <vListInsert+0x2e>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d2f6      	bcs.n	800aa32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	601a      	str	r2, [r3, #0]
}
 800aa70:	bf00      	nop
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	6892      	ldr	r2, [r2, #8]
 800aa92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	6852      	ldr	r2, [r2, #4]
 800aa9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d103      	bne.n	800aab0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	1e5a      	subs	r2, r3, #1
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3b04      	subs	r3, #4
 800aae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f023 0201 	bic.w	r2, r3, #1
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3b04      	subs	r3, #4
 800aafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab00:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <pxPortInitialiseStack+0x64>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3b14      	subs	r3, #20
 800ab0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3b04      	subs	r3, #4
 800ab16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f06f 0202 	mvn.w	r2, #2
 800ab1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3b20      	subs	r3, #32
 800ab24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab26:	68fb      	ldr	r3, [r7, #12]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	0800ab39 	.word	0x0800ab39

0800ab38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <prvTaskExitError+0x54>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4a:	d00a      	beq.n	800ab62 <prvTaskExitError+0x2a>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	60fb      	str	r3, [r7, #12]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <prvTaskExitError+0x28>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	60bb      	str	r3, [r7, #8]
}
 800ab74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab76:	bf00      	nop
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0fc      	beq.n	800ab78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	20000010 	.word	0x20000010

0800ab90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <pxCurrentTCBConst2>)
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	6808      	ldr	r0, [r1, #0]
 800ab96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	f380 8809 	msr	PSP, r0
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8811 	msr	BASEPRI, r0
 800abaa:	4770      	bx	lr
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst2>:
 800abb0:	200049b4 	.word	0x200049b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abb8:	4808      	ldr	r0, [pc, #32]	; (800abdc <prvPortStartFirstTask+0x24>)
 800abba:	6800      	ldr	r0, [r0, #0]
 800abbc:	6800      	ldr	r0, [r0, #0]
 800abbe:	f380 8808 	msr	MSP, r0
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8814 	msr	CONTROL, r0
 800abca:	b662      	cpsie	i
 800abcc:	b661      	cpsie	f
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	df00      	svc	0
 800abd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abda:	bf00      	nop
 800abdc:	e000ed08 	.word	0xe000ed08

0800abe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abe6:	4b46      	ldr	r3, [pc, #280]	; (800ad00 <xPortStartScheduler+0x120>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a46      	ldr	r2, [pc, #280]	; (800ad04 <xPortStartScheduler+0x124>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d10a      	bne.n	800ac06 <xPortStartScheduler+0x26>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac06:	4b3e      	ldr	r3, [pc, #248]	; (800ad00 <xPortStartScheduler+0x120>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a3f      	ldr	r2, [pc, #252]	; (800ad08 <xPortStartScheduler+0x128>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d10a      	bne.n	800ac26 <xPortStartScheduler+0x46>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac26:	4b39      	ldr	r3, [pc, #228]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	22ff      	movs	r2, #255	; 0xff
 800ac36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <xPortStartScheduler+0x130>)
 800ac4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac4e:	4b31      	ldr	r3, [pc, #196]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac50:	2207      	movs	r2, #7
 800ac52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac54:	e009      	b.n	800ac6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac56:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	4a2d      	ldr	r2, [pc, #180]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac72:	2b80      	cmp	r3, #128	; 0x80
 800ac74:	d0ef      	beq.n	800ac56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac76:	4b27      	ldr	r3, [pc, #156]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f1c3 0307 	rsb	r3, r3, #7
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d00a      	beq.n	800ac98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	60bb      	str	r3, [r7, #8]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac98:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	021b      	lsls	r3, r3, #8
 800ac9e:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acaa:	4a1a      	ldr	r2, [pc, #104]	; (800ad14 <xPortStartScheduler+0x134>)
 800acac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acb6:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <xPortStartScheduler+0x138>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a17      	ldr	r2, [pc, #92]	; (800ad18 <xPortStartScheduler+0x138>)
 800acbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acc2:	4b15      	ldr	r3, [pc, #84]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a14      	ldr	r2, [pc, #80]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800accc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acce:	f000 f8dd 	bl	800ae8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acd2:	4b12      	ldr	r3, [pc, #72]	; (800ad1c <xPortStartScheduler+0x13c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acd8:	f000 f8fc 	bl	800aed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <xPortStartScheduler+0x140>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <xPortStartScheduler+0x140>)
 800ace2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ace6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ace8:	f7ff ff66 	bl	800abb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acec:	f001 fa34 	bl	800c158 <vTaskSwitchContext>
	prvTaskExitError();
 800acf0:	f7ff ff22 	bl	800ab38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	e000ed00 	.word	0xe000ed00
 800ad04:	410fc271 	.word	0x410fc271
 800ad08:	410fc270 	.word	0x410fc270
 800ad0c:	e000e400 	.word	0xe000e400
 800ad10:	2000496c 	.word	0x2000496c
 800ad14:	20004970 	.word	0x20004970
 800ad18:	e000ed20 	.word	0xe000ed20
 800ad1c:	20000010 	.word	0x20000010
 800ad20:	e000ef34 	.word	0xe000ef34

0800ad24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	607b      	str	r3, [r7, #4]
}
 800ad3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	4a0d      	ldr	r2, [pc, #52]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad48:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d10f      	bne.n	800ad70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <vPortEnterCritical+0x5c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	603b      	str	r3, [r7, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <vPortEnterCritical+0x4a>
	}
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	20000010 	.word	0x20000010
 800ad80:	e000ed04 	.word	0xe000ed04

0800ad84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad8a:	4b12      	ldr	r3, [pc, #72]	; (800add4 <vPortExitCritical+0x50>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <vPortExitCritical+0x24>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	607b      	str	r3, [r7, #4]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <vPortExitCritical+0x50>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3b01      	subs	r3, #1
 800adae:	4a09      	ldr	r2, [pc, #36]	; (800add4 <vPortExitCritical+0x50>)
 800adb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800adb2:	4b08      	ldr	r3, [pc, #32]	; (800add4 <vPortExitCritical+0x50>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <vPortExitCritical+0x42>
 800adba:	2300      	movs	r3, #0
 800adbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	20000010 	.word	0x20000010
	...

0800ade0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ade0:	f3ef 8009 	mrs	r0, PSP
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <pxCurrentTCBConst>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	f01e 0f10 	tst.w	lr, #16
 800adf0:	bf08      	it	eq
 800adf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfa:	6010      	str	r0, [r2, #0]
 800adfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae04:	f380 8811 	msr	BASEPRI, r0
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f001 f9a2 	bl	800c158 <vTaskSwitchContext>
 800ae14:	f04f 0000 	mov.w	r0, #0
 800ae18:	f380 8811 	msr	BASEPRI, r0
 800ae1c:	bc09      	pop	{r0, r3}
 800ae1e:	6819      	ldr	r1, [r3, #0]
 800ae20:	6808      	ldr	r0, [r1, #0]
 800ae22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae26:	f01e 0f10 	tst.w	lr, #16
 800ae2a:	bf08      	it	eq
 800ae2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae30:	f380 8809 	msr	PSP, r0
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	f3af 8000 	nop.w

0800ae40 <pxCurrentTCBConst>:
 800ae40:	200049b4 	.word	0x200049b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	607b      	str	r3, [r7, #4]
}
 800ae60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae62:	f001 f8bf 	bl	800bfe4 <xTaskIncrementTick>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae6c:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <xPortSysTickHandler+0x40>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	2300      	movs	r3, #0
 800ae76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	f383 8811 	msr	BASEPRI, r3
}
 800ae7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	e000ed04 	.word	0xe000ed04

0800ae8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae96:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <vPortSetupTimerInterrupt+0x38>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae9c:	4b0a      	ldr	r3, [pc, #40]	; (800aec8 <vPortSetupTimerInterrupt+0x3c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <vPortSetupTimerInterrupt+0x40>)
 800aea2:	fba2 2303 	umull	r2, r3, r2, r3
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <vPortSetupTimerInterrupt+0x44>)
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aeae:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	601a      	str	r2, [r3, #0]
}
 800aeb4:	bf00      	nop
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	e000e010 	.word	0xe000e010
 800aec4:	e000e018 	.word	0xe000e018
 800aec8:	20000004 	.word	0x20000004
 800aecc:	10624dd3 	.word	0x10624dd3
 800aed0:	e000e014 	.word	0xe000e014

0800aed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aee4 <vPortEnableVFP+0x10>
 800aed8:	6801      	ldr	r1, [r0, #0]
 800aeda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aede:	6001      	str	r1, [r0, #0]
 800aee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aee2:	bf00      	nop
 800aee4:	e000ed88 	.word	0xe000ed88

0800aee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeee:	f3ef 8305 	mrs	r3, IPSR
 800aef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b0f      	cmp	r3, #15
 800aef8:	d914      	bls.n	800af24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aefa:	4a17      	ldr	r2, [pc, #92]	; (800af58 <vPortValidateInterruptPriority+0x70>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <vPortValidateInterruptPriority+0x74>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	7afa      	ldrb	r2, [r7, #11]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d20a      	bcs.n	800af24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af24:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <vPortValidateInterruptPriority+0x78>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <vPortValidateInterruptPriority+0x7c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d90a      	bls.n	800af4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	603b      	str	r3, [r7, #0]
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <vPortValidateInterruptPriority+0x60>
	}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	e000e3f0 	.word	0xe000e3f0
 800af5c:	2000496c 	.word	0x2000496c
 800af60:	e000ed0c 	.word	0xe000ed0c
 800af64:	20004970 	.word	0x20004970

0800af68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xQueueGenericReset+0x2a>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	60bb      	str	r3, [r7, #8]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af92:	f7ff fec7 	bl	800ad24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9e:	68f9      	ldr	r1, [r7, #12]
 800afa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afa2:	fb01 f303 	mul.w	r3, r1, r3
 800afa6:	441a      	add	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc2:	3b01      	subs	r3, #1
 800afc4:	68f9      	ldr	r1, [r7, #12]
 800afc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afc8:	fb01 f303 	mul.w	r3, r1, r3
 800afcc:	441a      	add	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	22ff      	movs	r2, #255	; 0xff
 800afd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	22ff      	movs	r2, #255	; 0xff
 800afde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d114      	bne.n	800b012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01a      	beq.n	800b026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	3310      	adds	r3, #16
 800aff4:	4618      	mov	r0, r3
 800aff6:	f001 f989 	bl	800c30c <xTaskRemoveFromEventList>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d012      	beq.n	800b026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b000:	4b0c      	ldr	r3, [pc, #48]	; (800b034 <xQueueGenericReset+0xcc>)
 800b002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	e009      	b.n	800b026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3310      	adds	r3, #16
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff fca6 	bl	800a968 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	3324      	adds	r3, #36	; 0x24
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fca1 	bl	800a968 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b026:	f7ff fead 	bl	800ad84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b02a:	2301      	movs	r3, #1
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	e000ed04 	.word	0xe000ed04

0800b038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08e      	sub	sp, #56	; 0x38
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b07a:	bf00      	nop
 800b07c:	e7fe      	b.n	800b07c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <xQueueGenericCreateStatic+0x52>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <xQueueGenericCreateStatic+0x56>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e000      	b.n	800b090 <xQueueGenericCreateStatic+0x58>
 800b08e:	2300      	movs	r3, #0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	623b      	str	r3, [r7, #32]
}
 800b0a6:	bf00      	nop
 800b0a8:	e7fe      	b.n	800b0a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d102      	bne.n	800b0b6 <xQueueGenericCreateStatic+0x7e>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <xQueueGenericCreateStatic+0x82>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e000      	b.n	800b0bc <xQueueGenericCreateStatic+0x84>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10a      	bne.n	800b0d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	61fb      	str	r3, [r7, #28]
}
 800b0d2:	bf00      	nop
 800b0d4:	e7fe      	b.n	800b0d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b0d6:	2350      	movs	r3, #80	; 0x50
 800b0d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2b50      	cmp	r3, #80	; 0x50
 800b0de:	d00a      	beq.n	800b0f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	61bb      	str	r3, [r7, #24]
}
 800b0f2:	bf00      	nop
 800b0f4:	e7fe      	b.n	800b0f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b0f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00d      	beq.n	800b11e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b10a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	4613      	mov	r3, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 f83f 	bl	800b19c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b120:	4618      	mov	r0, r3
 800b122:	3730      	adds	r7, #48	; 0x30
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	; 0x28
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	4613      	mov	r3, r2
 800b134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	613b      	str	r3, [r7, #16]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	fb02 f303 	mul.w	r3, r2, r3
 800b15a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	3350      	adds	r3, #80	; 0x50
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fa17 	bl	800a594 <pvPortMalloc>
 800b166:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d011      	beq.n	800b192 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	3350      	adds	r3, #80	; 0x50
 800b176:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b180:	79fa      	ldrb	r2, [r7, #7]
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	4613      	mov	r3, r2
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	68b9      	ldr	r1, [r7, #8]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 f805 	bl	800b19c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b192:	69bb      	ldr	r3, [r7, #24]
	}
 800b194:	4618      	mov	r0, r3
 800b196:	3720      	adds	r7, #32
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d103      	bne.n	800b1b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	e002      	b.n	800b1be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	69b8      	ldr	r0, [r7, #24]
 800b1ce:	f7ff fecb 	bl	800af68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b1da:	bf00      	nop
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
	...

0800b1e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08e      	sub	sp, #56	; 0x38
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <xQueueGenericSend+0x32>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <xQueueGenericSend+0x40>
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <xQueueGenericSend+0x44>
 800b224:	2301      	movs	r3, #1
 800b226:	e000      	b.n	800b22a <xQueueGenericSend+0x46>
 800b228:	2300      	movs	r3, #0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10a      	bne.n	800b244 <xQueueGenericSend+0x60>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d103      	bne.n	800b252 <xQueueGenericSend+0x6e>
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d101      	bne.n	800b256 <xQueueGenericSend+0x72>
 800b252:	2301      	movs	r3, #1
 800b254:	e000      	b.n	800b258 <xQueueGenericSend+0x74>
 800b256:	2300      	movs	r3, #0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <xQueueGenericSend+0x8e>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	623b      	str	r3, [r7, #32]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b272:	f001 fa0d 	bl	800c690 <xTaskGetSchedulerState>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d102      	bne.n	800b282 <xQueueGenericSend+0x9e>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <xQueueGenericSend+0xa2>
 800b282:	2301      	movs	r3, #1
 800b284:	e000      	b.n	800b288 <xQueueGenericSend+0xa4>
 800b286:	2300      	movs	r3, #0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	61fb      	str	r3, [r7, #28]
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2a2:	f7ff fd3f 	bl	800ad24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d302      	bcc.n	800b2b8 <xQueueGenericSend+0xd4>
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d129      	bne.n	800b30c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2be:	f000 fa0b 	bl	800b6d8 <prvCopyDataToQueue>
 800b2c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d010      	beq.n	800b2ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	3324      	adds	r3, #36	; 0x24
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 f81b 	bl	800c30c <xTaskRemoveFromEventList>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d013      	beq.n	800b304 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b2dc:	4b3f      	ldr	r3, [pc, #252]	; (800b3dc <xQueueGenericSend+0x1f8>)
 800b2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	e00a      	b.n	800b304 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d007      	beq.n	800b304 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b2f4:	4b39      	ldr	r3, [pc, #228]	; (800b3dc <xQueueGenericSend+0x1f8>)
 800b2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b304:	f7ff fd3e 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 800b308:	2301      	movs	r3, #1
 800b30a:	e063      	b.n	800b3d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d103      	bne.n	800b31a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b312:	f7ff fd37 	bl	800ad84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b316:	2300      	movs	r3, #0
 800b318:	e05c      	b.n	800b3d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d106      	bne.n	800b32e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b320:	f107 0314 	add.w	r3, r7, #20
 800b324:	4618      	mov	r0, r3
 800b326:	f001 f855 	bl	800c3d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b32a:	2301      	movs	r3, #1
 800b32c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b32e:	f7ff fd29 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b332:	f000 fd9b 	bl	800be6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b336:	f7ff fcf5 	bl	800ad24 <vPortEnterCritical>
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b340:	b25b      	sxtb	r3, r3
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b346:	d103      	bne.n	800b350 <xQueueGenericSend+0x16c>
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b356:	b25b      	sxtb	r3, r3
 800b358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35c:	d103      	bne.n	800b366 <xQueueGenericSend+0x182>
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	2200      	movs	r2, #0
 800b362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b366:	f7ff fd0d 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b36a:	1d3a      	adds	r2, r7, #4
 800b36c:	f107 0314 	add.w	r3, r7, #20
 800b370:	4611      	mov	r1, r2
 800b372:	4618      	mov	r0, r3
 800b374:	f001 f844 	bl	800c400 <xTaskCheckForTimeOut>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d124      	bne.n	800b3c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b37e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b380:	f000 faa2 	bl	800b8c8 <prvIsQueueFull>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d018      	beq.n	800b3bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	3310      	adds	r3, #16
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f000 ff6a 	bl	800c26c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b39a:	f000 fa2d 	bl	800b7f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b39e:	f000 fd73 	bl	800be88 <xTaskResumeAll>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f47f af7c 	bne.w	800b2a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b3aa:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <xQueueGenericSend+0x1f8>)
 800b3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	e772      	b.n	800b2a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b3bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3be:	f000 fa1b 	bl	800b7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3c2:	f000 fd61 	bl	800be88 <xTaskResumeAll>
 800b3c6:	e76c      	b.n	800b2a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b3c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3ca:	f000 fa15 	bl	800b7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3ce:	f000 fd5b 	bl	800be88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b3d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3738      	adds	r7, #56	; 0x38
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	e000ed04 	.word	0xe000ed04

0800b3e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b090      	sub	sp, #64	; 0x40
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
 800b3ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b40a:	bf00      	nop
 800b40c:	e7fe      	b.n	800b40c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <xQueueGenericSendFromISR+0x3c>
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <xQueueGenericSendFromISR+0x40>
 800b41c:	2301      	movs	r3, #1
 800b41e:	e000      	b.n	800b422 <xQueueGenericSendFromISR+0x42>
 800b420:	2300      	movs	r3, #0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10a      	bne.n	800b43c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b438:	bf00      	nop
 800b43a:	e7fe      	b.n	800b43a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d103      	bne.n	800b44a <xQueueGenericSendFromISR+0x6a>
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	2b01      	cmp	r3, #1
 800b448:	d101      	bne.n	800b44e <xQueueGenericSendFromISR+0x6e>
 800b44a:	2301      	movs	r3, #1
 800b44c:	e000      	b.n	800b450 <xQueueGenericSendFromISR+0x70>
 800b44e:	2300      	movs	r3, #0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10a      	bne.n	800b46a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	623b      	str	r3, [r7, #32]
}
 800b466:	bf00      	nop
 800b468:	e7fe      	b.n	800b468 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b46a:	f7ff fd3d 	bl	800aee8 <vPortValidateInterruptPriority>
	__asm volatile
 800b46e:	f3ef 8211 	mrs	r2, BASEPRI
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fa      	str	r2, [r7, #28]
 800b484:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b486:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b488:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b492:	429a      	cmp	r2, r3
 800b494:	d302      	bcc.n	800b49c <xQueueGenericSendFromISR+0xbc>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d12f      	bne.n	800b4fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4b2:	f000 f911 	bl	800b6d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b4b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4be:	d112      	bne.n	800b4e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d016      	beq.n	800b4f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	3324      	adds	r3, #36	; 0x24
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 ff1d 	bl	800c30c <xTaskRemoveFromEventList>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00e      	beq.n	800b4f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00b      	beq.n	800b4f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e007      	b.n	800b4f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	b25a      	sxtb	r2, r3
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b4fa:	e001      	b.n	800b500 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b502:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f383 8811 	msr	BASEPRI, r3
}
 800b50a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3740      	adds	r7, #64	; 0x40
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08c      	sub	sp, #48	; 0x30
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b524:	2300      	movs	r3, #0
 800b526:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10a      	bne.n	800b548 <xQueueReceive+0x30>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	623b      	str	r3, [r7, #32]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d103      	bne.n	800b556 <xQueueReceive+0x3e>
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <xQueueReceive+0x42>
 800b556:	2301      	movs	r3, #1
 800b558:	e000      	b.n	800b55c <xQueueReceive+0x44>
 800b55a:	2300      	movs	r3, #0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <xQueueReceive+0x5e>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	61fb      	str	r3, [r7, #28]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b576:	f001 f88b 	bl	800c690 <xTaskGetSchedulerState>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d102      	bne.n	800b586 <xQueueReceive+0x6e>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <xQueueReceive+0x72>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <xQueueReceive+0x74>
 800b58a:	2300      	movs	r3, #0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <xQueueReceive+0x8e>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	61bb      	str	r3, [r7, #24]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5a6:	f7ff fbbd 	bl	800ad24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d01f      	beq.n	800b5f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ba:	f000 f8f7 	bl	800b7ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	1e5a      	subs	r2, r3, #1
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00f      	beq.n	800b5ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d0:	3310      	adds	r3, #16
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 fe9a 	bl	800c30c <xTaskRemoveFromEventList>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d007      	beq.n	800b5ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b5de:	4b3d      	ldr	r3, [pc, #244]	; (800b6d4 <xQueueReceive+0x1bc>)
 800b5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5ee:	f7ff fbc9 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e069      	b.n	800b6ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d103      	bne.n	800b604 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5fc:	f7ff fbc2 	bl	800ad84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b600:	2300      	movs	r3, #0
 800b602:	e062      	b.n	800b6ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b60a:	f107 0310 	add.w	r3, r7, #16
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fee0 	bl	800c3d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b614:	2301      	movs	r3, #1
 800b616:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b618:	f7ff fbb4 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b61c:	f000 fc26 	bl	800be6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b620:	f7ff fb80 	bl	800ad24 <vPortEnterCritical>
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b62a:	b25b      	sxtb	r3, r3
 800b62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b630:	d103      	bne.n	800b63a <xQueueReceive+0x122>
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b640:	b25b      	sxtb	r3, r3
 800b642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b646:	d103      	bne.n	800b650 <xQueueReceive+0x138>
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b650:	f7ff fb98 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b654:	1d3a      	adds	r2, r7, #4
 800b656:	f107 0310 	add.w	r3, r7, #16
 800b65a:	4611      	mov	r1, r2
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fecf 	bl	800c400 <xTaskCheckForTimeOut>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d123      	bne.n	800b6b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b66a:	f000 f917 	bl	800b89c <prvIsQueueEmpty>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d017      	beq.n	800b6a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	3324      	adds	r3, #36	; 0x24
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	4611      	mov	r1, r2
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fdf5 	bl	800c26c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b684:	f000 f8b8 	bl	800b7f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b688:	f000 fbfe 	bl	800be88 <xTaskResumeAll>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d189      	bne.n	800b5a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b692:	4b10      	ldr	r3, [pc, #64]	; (800b6d4 <xQueueReceive+0x1bc>)
 800b694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	e780      	b.n	800b5a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6a6:	f000 f8a7 	bl	800b7f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6aa:	f000 fbed 	bl	800be88 <xTaskResumeAll>
 800b6ae:	e77a      	b.n	800b5a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b2:	f000 f8a1 	bl	800b7f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6b6:	f000 fbe7 	bl	800be88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6bc:	f000 f8ee 	bl	800b89c <prvIsQueueEmpty>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f43f af6f 	beq.w	800b5a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b6c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3730      	adds	r7, #48	; 0x30
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10d      	bne.n	800b712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d14d      	bne.n	800b79a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	4618      	mov	r0, r3
 800b704:	f000 ffe2 	bl	800c6cc <xTaskPriorityDisinherit>
 800b708:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	609a      	str	r2, [r3, #8]
 800b710:	e043      	b.n	800b79a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d119      	bne.n	800b74c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6858      	ldr	r0, [r3, #4]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b720:	461a      	mov	r2, r3
 800b722:	68b9      	ldr	r1, [r7, #8]
 800b724:	f001 fd26 	bl	800d174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b730:	441a      	add	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d32b      	bcc.n	800b79a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	605a      	str	r2, [r3, #4]
 800b74a:	e026      	b.n	800b79a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	68d8      	ldr	r0, [r3, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b754:	461a      	mov	r2, r3
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	f001 fd0c 	bl	800d174 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68da      	ldr	r2, [r3, #12]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b764:	425b      	negs	r3, r3
 800b766:	441a      	add	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d207      	bcs.n	800b788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	689a      	ldr	r2, [r3, #8]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b780:	425b      	negs	r3, r3
 800b782:	441a      	add	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d105      	bne.n	800b79a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	3b01      	subs	r3, #1
 800b798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b7a2:	697b      	ldr	r3, [r7, #20]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d018      	beq.n	800b7f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c6:	441a      	add	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d303      	bcc.n	800b7e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68d9      	ldr	r1, [r3, #12]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	6838      	ldr	r0, [r7, #0]
 800b7ec:	f001 fcc2 	bl	800d174 <memcpy>
	}
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b800:	f7ff fa90 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b80a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b80c:	e011      	b.n	800b832 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b00      	cmp	r3, #0
 800b814:	d012      	beq.n	800b83c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3324      	adds	r3, #36	; 0x24
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fd76 	bl	800c30c <xTaskRemoveFromEventList>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b826:	f000 fe4d 	bl	800c4c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b82a:	7bfb      	ldrb	r3, [r7, #15]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b836:	2b00      	cmp	r3, #0
 800b838:	dce9      	bgt.n	800b80e <prvUnlockQueue+0x16>
 800b83a:	e000      	b.n	800b83e <prvUnlockQueue+0x46>
					break;
 800b83c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	22ff      	movs	r2, #255	; 0xff
 800b842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b846:	f7ff fa9d 	bl	800ad84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b84a:	f7ff fa6b 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b854:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b856:	e011      	b.n	800b87c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d012      	beq.n	800b886 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3310      	adds	r3, #16
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fd51 	bl	800c30c <xTaskRemoveFromEventList>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b870:	f000 fe28 	bl	800c4c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	3b01      	subs	r3, #1
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b87c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b880:	2b00      	cmp	r3, #0
 800b882:	dce9      	bgt.n	800b858 <prvUnlockQueue+0x60>
 800b884:	e000      	b.n	800b888 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b886:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	22ff      	movs	r2, #255	; 0xff
 800b88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b890:	f7ff fa78 	bl	800ad84 <vPortExitCritical>
}
 800b894:	bf00      	nop
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8a4:	f7ff fa3e 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	e001      	b.n	800b8ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8ba:	f7ff fa63 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 800b8be:	68fb      	ldr	r3, [r7, #12]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8d0:	f7ff fa28 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d102      	bne.n	800b8e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	e001      	b.n	800b8ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8ea:	f7ff fa4b 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b902:	2300      	movs	r3, #0
 800b904:	60fb      	str	r3, [r7, #12]
 800b906:	e014      	b.n	800b932 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b908:	4a0f      	ldr	r2, [pc, #60]	; (800b948 <vQueueAddToRegistry+0x50>)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10b      	bne.n	800b92c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b914:	490c      	ldr	r1, [pc, #48]	; (800b948 <vQueueAddToRegistry+0x50>)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b91e:	4a0a      	ldr	r2, [pc, #40]	; (800b948 <vQueueAddToRegistry+0x50>)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	4413      	add	r3, r2
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b92a:	e006      	b.n	800b93a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3301      	adds	r3, #1
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2b07      	cmp	r3, #7
 800b936:	d9e7      	bls.n	800b908 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	20004974 	.word	0x20004974

0800b94c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b95c:	f7ff f9e2 	bl	800ad24 <vPortEnterCritical>
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b966:	b25b      	sxtb	r3, r3
 800b968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96c:	d103      	bne.n	800b976 <vQueueWaitForMessageRestricted+0x2a>
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b97c:	b25b      	sxtb	r3, r3
 800b97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b982:	d103      	bne.n	800b98c <vQueueWaitForMessageRestricted+0x40>
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b98c:	f7ff f9fa 	bl	800ad84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	2b00      	cmp	r3, #0
 800b996:	d106      	bne.n	800b9a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	3324      	adds	r3, #36	; 0x24
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 fc87 	bl	800c2b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b9a6:	6978      	ldr	r0, [r7, #20]
 800b9a8:	f7ff ff26 	bl	800b7f8 <prvUnlockQueue>
	}
 800b9ac:	bf00      	nop
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08e      	sub	sp, #56	; 0x38
 800b9b8:	af04      	add	r7, sp, #16
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <xTaskCreateStatic+0x2a>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	623b      	str	r3, [r7, #32]
}
 800b9da:	bf00      	nop
 800b9dc:	e7fe      	b.n	800b9dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <xTaskCreateStatic+0x46>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	61fb      	str	r3, [r7, #28]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b9fa:	23bc      	movs	r3, #188	; 0xbc
 800b9fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2bbc      	cmp	r3, #188	; 0xbc
 800ba02:	d00a      	beq.n	800ba1a <xTaskCreateStatic+0x66>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	61bb      	str	r3, [r7, #24]
}
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d01e      	beq.n	800ba60 <xTaskCreateStatic+0xac>
 800ba22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01b      	beq.n	800ba60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	2202      	movs	r2, #2
 800ba36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	9302      	str	r3, [sp, #8]
 800ba42:	f107 0314 	add.w	r3, r7, #20
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	68b9      	ldr	r1, [r7, #8]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 f850 	bl	800baf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba5a:	f000 f8f3 	bl	800bc44 <prvAddNewTaskToReadyList>
 800ba5e:	e001      	b.n	800ba64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ba60:	2300      	movs	r3, #0
 800ba62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ba64:	697b      	ldr	r3, [r7, #20]
	}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3728      	adds	r7, #40	; 0x28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b08c      	sub	sp, #48	; 0x30
 800ba72:	af04      	add	r7, sp, #16
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	603b      	str	r3, [r7, #0]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fd86 	bl	800a594 <pvPortMalloc>
 800ba88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00e      	beq.n	800baae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba90:	20bc      	movs	r0, #188	; 0xbc
 800ba92:	f7fe fd7f 	bl	800a594 <pvPortMalloc>
 800ba96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	631a      	str	r2, [r3, #48]	; 0x30
 800baa4:	e005      	b.n	800bab2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800baa6:	6978      	ldr	r0, [r7, #20]
 800baa8:	f7fe fe40 	bl	800a72c <vPortFree>
 800baac:	e001      	b.n	800bab2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d017      	beq.n	800bae8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bac0:	88fa      	ldrh	r2, [r7, #6]
 800bac2:	2300      	movs	r3, #0
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	9302      	str	r3, [sp, #8]
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	68b9      	ldr	r1, [r7, #8]
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 f80e 	bl	800baf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800badc:	69f8      	ldr	r0, [r7, #28]
 800bade:	f000 f8b1 	bl	800bc44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bae2:	2301      	movs	r3, #1
 800bae4:	61bb      	str	r3, [r7, #24]
 800bae6:	e002      	b.n	800baee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bae8:	f04f 33ff 	mov.w	r3, #4294967295
 800baec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800baee:	69bb      	ldr	r3, [r7, #24]
	}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3720      	adds	r7, #32
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	461a      	mov	r2, r3
 800bb10:	21a5      	movs	r1, #165	; 0xa5
 800bb12:	f001 fb3d 	bl	800d190 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb20:	3b01      	subs	r3, #1
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	f023 0307 	bic.w	r3, r3, #7
 800bb2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	f003 0307 	and.w	r3, r3, #7
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	617b      	str	r3, [r7, #20]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d01f      	beq.n	800bb96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	e012      	b.n	800bb82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	4413      	add	r3, r2
 800bb62:	7819      	ldrb	r1, [r3, #0]
 800bb64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	4413      	add	r3, r2
 800bb6a:	3334      	adds	r3, #52	; 0x34
 800bb6c:	460a      	mov	r2, r1
 800bb6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	4413      	add	r3, r2
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d006      	beq.n	800bb8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	61fb      	str	r3, [r7, #28]
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	2b0f      	cmp	r3, #15
 800bb86:	d9e9      	bls.n	800bb5c <prvInitialiseNewTask+0x64>
 800bb88:	e000      	b.n	800bb8c <prvInitialiseNewTask+0x94>
			{
				break;
 800bb8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb94:	e003      	b.n	800bb9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	2b37      	cmp	r3, #55	; 0x37
 800bba2:	d901      	bls.n	800bba8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bba4:	2337      	movs	r3, #55	; 0x37
 800bba6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe fef2 	bl	800a9a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe feed 	bl	800a9a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	3354      	adds	r3, #84	; 0x54
 800bbf8:	2260      	movs	r2, #96	; 0x60
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 fac7 	bl	800d190 <memset>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	4a0c      	ldr	r2, [pc, #48]	; (800bc38 <prvInitialiseNewTask+0x140>)
 800bc06:	659a      	str	r2, [r3, #88]	; 0x58
 800bc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0a:	4a0c      	ldr	r2, [pc, #48]	; (800bc3c <prvInitialiseNewTask+0x144>)
 800bc0c:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	4a0b      	ldr	r2, [pc, #44]	; (800bc40 <prvInitialiseNewTask+0x148>)
 800bc12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	68f9      	ldr	r1, [r7, #12]
 800bc18:	69b8      	ldr	r0, [r7, #24]
 800bc1a:	f7fe ff59 	bl	800aad0 <pxPortInitialiseStack>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc30:	bf00      	nop
 800bc32:	3720      	adds	r7, #32
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	0800dbd0 	.word	0x0800dbd0
 800bc3c:	0800dbf0 	.word	0x0800dbf0
 800bc40:	0800dbb0 	.word	0x0800dbb0

0800bc44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bc4c:	f7ff f86a 	bl	800ad24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bc50:	4b2d      	ldr	r3, [pc, #180]	; (800bd08 <prvAddNewTaskToReadyList+0xc4>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3301      	adds	r3, #1
 800bc56:	4a2c      	ldr	r2, [pc, #176]	; (800bd08 <prvAddNewTaskToReadyList+0xc4>)
 800bc58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bc5a:	4b2c      	ldr	r3, [pc, #176]	; (800bd0c <prvAddNewTaskToReadyList+0xc8>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d109      	bne.n	800bc76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bc62:	4a2a      	ldr	r2, [pc, #168]	; (800bd0c <prvAddNewTaskToReadyList+0xc8>)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc68:	4b27      	ldr	r3, [pc, #156]	; (800bd08 <prvAddNewTaskToReadyList+0xc4>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d110      	bne.n	800bc92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc70:	f000 fc4c 	bl	800c50c <prvInitialiseTaskLists>
 800bc74:	e00d      	b.n	800bc92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc76:	4b26      	ldr	r3, [pc, #152]	; (800bd10 <prvAddNewTaskToReadyList+0xcc>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d109      	bne.n	800bc92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc7e:	4b23      	ldr	r3, [pc, #140]	; (800bd0c <prvAddNewTaskToReadyList+0xc8>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d802      	bhi.n	800bc92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc8c:	4a1f      	ldr	r2, [pc, #124]	; (800bd0c <prvAddNewTaskToReadyList+0xc8>)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc92:	4b20      	ldr	r3, [pc, #128]	; (800bd14 <prvAddNewTaskToReadyList+0xd0>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3301      	adds	r3, #1
 800bc98:	4a1e      	ldr	r2, [pc, #120]	; (800bd14 <prvAddNewTaskToReadyList+0xd0>)
 800bc9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc9c:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <prvAddNewTaskToReadyList+0xd0>)
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca8:	4b1b      	ldr	r3, [pc, #108]	; (800bd18 <prvAddNewTaskToReadyList+0xd4>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d903      	bls.n	800bcb8 <prvAddNewTaskToReadyList+0x74>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb4:	4a18      	ldr	r2, [pc, #96]	; (800bd18 <prvAddNewTaskToReadyList+0xd4>)
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4a15      	ldr	r2, [pc, #84]	; (800bd1c <prvAddNewTaskToReadyList+0xd8>)
 800bcc6:	441a      	add	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3304      	adds	r3, #4
 800bccc:	4619      	mov	r1, r3
 800bcce:	4610      	mov	r0, r2
 800bcd0:	f7fe fe77 	bl	800a9c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bcd4:	f7ff f856 	bl	800ad84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bcd8:	4b0d      	ldr	r3, [pc, #52]	; (800bd10 <prvAddNewTaskToReadyList+0xcc>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00e      	beq.n	800bcfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bce0:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <prvAddNewTaskToReadyList+0xc8>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d207      	bcs.n	800bcfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bcee:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <prvAddNewTaskToReadyList+0xdc>)
 800bcf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcfe:	bf00      	nop
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20004e88 	.word	0x20004e88
 800bd0c:	200049b4 	.word	0x200049b4
 800bd10:	20004e94 	.word	0x20004e94
 800bd14:	20004ea4 	.word	0x20004ea4
 800bd18:	20004e90 	.word	0x20004e90
 800bd1c:	200049b8 	.word	0x200049b8
 800bd20:	e000ed04 	.word	0xe000ed04

0800bd24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d017      	beq.n	800bd66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd36:	4b13      	ldr	r3, [pc, #76]	; (800bd84 <vTaskDelay+0x60>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <vTaskDelay+0x30>
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	60bb      	str	r3, [r7, #8]
}
 800bd50:	bf00      	nop
 800bd52:	e7fe      	b.n	800bd52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bd54:	f000 f88a 	bl	800be6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bd58:	2100      	movs	r1, #0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fe42 	bl	800c9e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bd60:	f000 f892 	bl	800be88 <xTaskResumeAll>
 800bd64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d107      	bne.n	800bd7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bd6c:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <vTaskDelay+0x64>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20004eb0 	.word	0x20004eb0
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08a      	sub	sp, #40	; 0x28
 800bd90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd92:	2300      	movs	r3, #0
 800bd94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd96:	2300      	movs	r3, #0
 800bd98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd9a:	463a      	mov	r2, r7
 800bd9c:	1d39      	adds	r1, r7, #4
 800bd9e:	f107 0308 	add.w	r3, r7, #8
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fbc2 	bl	800a52c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	9202      	str	r2, [sp, #8]
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	460a      	mov	r2, r1
 800bdba:	4924      	ldr	r1, [pc, #144]	; (800be4c <vTaskStartScheduler+0xc0>)
 800bdbc:	4824      	ldr	r0, [pc, #144]	; (800be50 <vTaskStartScheduler+0xc4>)
 800bdbe:	f7ff fdf9 	bl	800b9b4 <xTaskCreateStatic>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	4a23      	ldr	r2, [pc, #140]	; (800be54 <vTaskStartScheduler+0xc8>)
 800bdc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bdc8:	4b22      	ldr	r3, [pc, #136]	; (800be54 <vTaskStartScheduler+0xc8>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	617b      	str	r3, [r7, #20]
 800bdd4:	e001      	b.n	800bdda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d102      	bne.n	800bde6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bde0:	f000 fe54 	bl	800ca8c <xTimerCreateTimerTask>
 800bde4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d11b      	bne.n	800be24 <vTaskStartScheduler+0x98>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	613b      	str	r3, [r7, #16]
}
 800bdfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be00:	4b15      	ldr	r3, [pc, #84]	; (800be58 <vTaskStartScheduler+0xcc>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3354      	adds	r3, #84	; 0x54
 800be06:	4a15      	ldr	r2, [pc, #84]	; (800be5c <vTaskStartScheduler+0xd0>)
 800be08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be0a:	4b15      	ldr	r3, [pc, #84]	; (800be60 <vTaskStartScheduler+0xd4>)
 800be0c:	f04f 32ff 	mov.w	r2, #4294967295
 800be10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be12:	4b14      	ldr	r3, [pc, #80]	; (800be64 <vTaskStartScheduler+0xd8>)
 800be14:	2201      	movs	r2, #1
 800be16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be18:	4b13      	ldr	r3, [pc, #76]	; (800be68 <vTaskStartScheduler+0xdc>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be1e:	f7fe fedf 	bl	800abe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be22:	e00e      	b.n	800be42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2a:	d10a      	bne.n	800be42 <vTaskStartScheduler+0xb6>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60fb      	str	r3, [r7, #12]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <vTaskStartScheduler+0xb4>
}
 800be42:	bf00      	nop
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	0800dacc 	.word	0x0800dacc
 800be50:	0800c4dd 	.word	0x0800c4dd
 800be54:	20004eac 	.word	0x20004eac
 800be58:	200049b4 	.word	0x200049b4
 800be5c:	20000014 	.word	0x20000014
 800be60:	20004ea8 	.word	0x20004ea8
 800be64:	20004e94 	.word	0x20004e94
 800be68:	20004e8c 	.word	0x20004e8c

0800be6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800be70:	4b04      	ldr	r3, [pc, #16]	; (800be84 <vTaskSuspendAll+0x18>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3301      	adds	r3, #1
 800be76:	4a03      	ldr	r2, [pc, #12]	; (800be84 <vTaskSuspendAll+0x18>)
 800be78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be7a:	bf00      	nop
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	20004eb0 	.word	0x20004eb0

0800be88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be92:	2300      	movs	r3, #0
 800be94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be96:	4b42      	ldr	r3, [pc, #264]	; (800bfa0 <xTaskResumeAll+0x118>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	603b      	str	r3, [r7, #0]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800beb4:	f7fe ff36 	bl	800ad24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800beb8:	4b39      	ldr	r3, [pc, #228]	; (800bfa0 <xTaskResumeAll+0x118>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	4a38      	ldr	r2, [pc, #224]	; (800bfa0 <xTaskResumeAll+0x118>)
 800bec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bec2:	4b37      	ldr	r3, [pc, #220]	; (800bfa0 <xTaskResumeAll+0x118>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d162      	bne.n	800bf90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800beca:	4b36      	ldr	r3, [pc, #216]	; (800bfa4 <xTaskResumeAll+0x11c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d05e      	beq.n	800bf90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bed2:	e02f      	b.n	800bf34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed4:	4b34      	ldr	r3, [pc, #208]	; (800bfa8 <xTaskResumeAll+0x120>)
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	3318      	adds	r3, #24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe fdcb 	bl	800aa7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3304      	adds	r3, #4
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe fdc6 	bl	800aa7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef4:	4b2d      	ldr	r3, [pc, #180]	; (800bfac <xTaskResumeAll+0x124>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d903      	bls.n	800bf04 <xTaskResumeAll+0x7c>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf00:	4a2a      	ldr	r2, [pc, #168]	; (800bfac <xTaskResumeAll+0x124>)
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4a27      	ldr	r2, [pc, #156]	; (800bfb0 <xTaskResumeAll+0x128>)
 800bf12:	441a      	add	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	f7fe fd51 	bl	800a9c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf24:	4b23      	ldr	r3, [pc, #140]	; (800bfb4 <xTaskResumeAll+0x12c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d302      	bcc.n	800bf34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bf2e:	4b22      	ldr	r3, [pc, #136]	; (800bfb8 <xTaskResumeAll+0x130>)
 800bf30:	2201      	movs	r2, #1
 800bf32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf34:	4b1c      	ldr	r3, [pc, #112]	; (800bfa8 <xTaskResumeAll+0x120>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1cb      	bne.n	800bed4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf42:	f000 fb85 	bl	800c650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bf46:	4b1d      	ldr	r3, [pc, #116]	; (800bfbc <xTaskResumeAll+0x134>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d010      	beq.n	800bf74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf52:	f000 f847 	bl	800bfe4 <xTaskIncrementTick>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bf5c:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <xTaskResumeAll+0x130>)
 800bf5e:	2201      	movs	r2, #1
 800bf60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f1      	bne.n	800bf52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bf6e:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <xTaskResumeAll+0x134>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf74:	4b10      	ldr	r3, [pc, #64]	; (800bfb8 <xTaskResumeAll+0x130>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d009      	beq.n	800bf90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf80:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <xTaskResumeAll+0x138>)
 800bf82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf90:	f7fe fef8 	bl	800ad84 <vPortExitCritical>

	return xAlreadyYielded;
 800bf94:	68bb      	ldr	r3, [r7, #8]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20004eb0 	.word	0x20004eb0
 800bfa4:	20004e88 	.word	0x20004e88
 800bfa8:	20004e48 	.word	0x20004e48
 800bfac:	20004e90 	.word	0x20004e90
 800bfb0:	200049b8 	.word	0x200049b8
 800bfb4:	200049b4 	.word	0x200049b4
 800bfb8:	20004e9c 	.word	0x20004e9c
 800bfbc:	20004e98 	.word	0x20004e98
 800bfc0:	e000ed04 	.word	0xe000ed04

0800bfc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bfca:	4b05      	ldr	r3, [pc, #20]	; (800bfe0 <xTaskGetTickCount+0x1c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bfd0:	687b      	ldr	r3, [r7, #4]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	20004e8c 	.word	0x20004e8c

0800bfe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bfea:	2300      	movs	r3, #0
 800bfec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfee:	4b4f      	ldr	r3, [pc, #316]	; (800c12c <xTaskIncrementTick+0x148>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f040 808f 	bne.w	800c116 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bff8:	4b4d      	ldr	r3, [pc, #308]	; (800c130 <xTaskIncrementTick+0x14c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3301      	adds	r3, #1
 800bffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c000:	4a4b      	ldr	r2, [pc, #300]	; (800c130 <xTaskIncrementTick+0x14c>)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d120      	bne.n	800c04e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c00c:	4b49      	ldr	r3, [pc, #292]	; (800c134 <xTaskIncrementTick+0x150>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <xTaskIncrementTick+0x48>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	603b      	str	r3, [r7, #0]
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <xTaskIncrementTick+0x46>
 800c02c:	4b41      	ldr	r3, [pc, #260]	; (800c134 <xTaskIncrementTick+0x150>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	4b41      	ldr	r3, [pc, #260]	; (800c138 <xTaskIncrementTick+0x154>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a3f      	ldr	r2, [pc, #252]	; (800c134 <xTaskIncrementTick+0x150>)
 800c038:	6013      	str	r3, [r2, #0]
 800c03a:	4a3f      	ldr	r2, [pc, #252]	; (800c138 <xTaskIncrementTick+0x154>)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	4b3e      	ldr	r3, [pc, #248]	; (800c13c <xTaskIncrementTick+0x158>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3301      	adds	r3, #1
 800c046:	4a3d      	ldr	r2, [pc, #244]	; (800c13c <xTaskIncrementTick+0x158>)
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	f000 fb01 	bl	800c650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c04e:	4b3c      	ldr	r3, [pc, #240]	; (800c140 <xTaskIncrementTick+0x15c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	429a      	cmp	r2, r3
 800c056:	d349      	bcc.n	800c0ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c058:	4b36      	ldr	r3, [pc, #216]	; (800c134 <xTaskIncrementTick+0x150>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d104      	bne.n	800c06c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c062:	4b37      	ldr	r3, [pc, #220]	; (800c140 <xTaskIncrementTick+0x15c>)
 800c064:	f04f 32ff 	mov.w	r2, #4294967295
 800c068:	601a      	str	r2, [r3, #0]
					break;
 800c06a:	e03f      	b.n	800c0ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c06c:	4b31      	ldr	r3, [pc, #196]	; (800c134 <xTaskIncrementTick+0x150>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	429a      	cmp	r2, r3
 800c082:	d203      	bcs.n	800c08c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c084:	4a2e      	ldr	r2, [pc, #184]	; (800c140 <xTaskIncrementTick+0x15c>)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c08a:	e02f      	b.n	800c0ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	3304      	adds	r3, #4
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe fcf3 	bl	800aa7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d004      	beq.n	800c0a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	3318      	adds	r3, #24
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe fcea 	bl	800aa7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ac:	4b25      	ldr	r3, [pc, #148]	; (800c144 <xTaskIncrementTick+0x160>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d903      	bls.n	800c0bc <xTaskIncrementTick+0xd8>
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	4a22      	ldr	r2, [pc, #136]	; (800c144 <xTaskIncrementTick+0x160>)
 800c0ba:	6013      	str	r3, [r2, #0]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4a1f      	ldr	r2, [pc, #124]	; (800c148 <xTaskIncrementTick+0x164>)
 800c0ca:	441a      	add	r2, r3
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	f7fe fc75 	bl	800a9c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0dc:	4b1b      	ldr	r3, [pc, #108]	; (800c14c <xTaskIncrementTick+0x168>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d3b8      	bcc.n	800c058 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0ea:	e7b5      	b.n	800c058 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c0ec:	4b17      	ldr	r3, [pc, #92]	; (800c14c <xTaskIncrementTick+0x168>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f2:	4915      	ldr	r1, [pc, #84]	; (800c148 <xTaskIncrementTick+0x164>)
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d901      	bls.n	800c108 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c104:	2301      	movs	r3, #1
 800c106:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c108:	4b11      	ldr	r3, [pc, #68]	; (800c150 <xTaskIncrementTick+0x16c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d007      	beq.n	800c120 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c110:	2301      	movs	r3, #1
 800c112:	617b      	str	r3, [r7, #20]
 800c114:	e004      	b.n	800c120 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c116:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <xTaskIncrementTick+0x170>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3301      	adds	r3, #1
 800c11c:	4a0d      	ldr	r2, [pc, #52]	; (800c154 <xTaskIncrementTick+0x170>)
 800c11e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c120:	697b      	ldr	r3, [r7, #20]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20004eb0 	.word	0x20004eb0
 800c130:	20004e8c 	.word	0x20004e8c
 800c134:	20004e40 	.word	0x20004e40
 800c138:	20004e44 	.word	0x20004e44
 800c13c:	20004ea0 	.word	0x20004ea0
 800c140:	20004ea8 	.word	0x20004ea8
 800c144:	20004e90 	.word	0x20004e90
 800c148:	200049b8 	.word	0x200049b8
 800c14c:	200049b4 	.word	0x200049b4
 800c150:	20004e9c 	.word	0x20004e9c
 800c154:	20004e98 	.word	0x20004e98

0800c158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c15e:	4b3d      	ldr	r3, [pc, #244]	; (800c254 <vTaskSwitchContext+0xfc>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c166:	4b3c      	ldr	r3, [pc, #240]	; (800c258 <vTaskSwitchContext+0x100>)
 800c168:	2201      	movs	r2, #1
 800c16a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c16c:	e06d      	b.n	800c24a <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 800c16e:	4b3a      	ldr	r3, [pc, #232]	; (800c258 <vTaskSwitchContext+0x100>)
 800c170:	2200      	movs	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c174:	4b39      	ldr	r3, [pc, #228]	; (800c25c <vTaskSwitchContext+0x104>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c180:	60fb      	str	r3, [r7, #12]
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d111      	bne.n	800c1b0 <vTaskSwitchContext+0x58>
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	3304      	adds	r3, #4
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	429a      	cmp	r2, r3
 800c196:	d10b      	bne.n	800c1b0 <vTaskSwitchContext+0x58>
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	3308      	adds	r3, #8
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d105      	bne.n	800c1b0 <vTaskSwitchContext+0x58>
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	330c      	adds	r3, #12
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d008      	beq.n	800c1c2 <vTaskSwitchContext+0x6a>
 800c1b0:	4b2a      	ldr	r3, [pc, #168]	; (800c25c <vTaskSwitchContext+0x104>)
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	4b29      	ldr	r3, [pc, #164]	; (800c25c <vTaskSwitchContext+0x104>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3334      	adds	r3, #52	; 0x34
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4610      	mov	r0, r2
 800c1be:	f7f4 ffc9 	bl	8001154 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c2:	4b27      	ldr	r3, [pc, #156]	; (800c260 <vTaskSwitchContext+0x108>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	617b      	str	r3, [r7, #20]
 800c1c8:	e010      	b.n	800c1ec <vTaskSwitchContext+0x94>
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <vTaskSwitchContext+0x8e>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	607b      	str	r3, [r7, #4]
}
 800c1e2:	bf00      	nop
 800c1e4:	e7fe      	b.n	800c1e4 <vTaskSwitchContext+0x8c>
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	617b      	str	r3, [r7, #20]
 800c1ec:	491d      	ldr	r1, [pc, #116]	; (800c264 <vTaskSwitchContext+0x10c>)
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	440b      	add	r3, r1
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0e4      	beq.n	800c1ca <vTaskSwitchContext+0x72>
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4a16      	ldr	r2, [pc, #88]	; (800c264 <vTaskSwitchContext+0x10c>)
 800c20c:	4413      	add	r3, r2
 800c20e:	60bb      	str	r3, [r7, #8]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	605a      	str	r2, [r3, #4]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	3308      	adds	r3, #8
 800c222:	429a      	cmp	r2, r3
 800c224:	d104      	bne.n	800c230 <vTaskSwitchContext+0xd8>
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	605a      	str	r2, [r3, #4]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	4a09      	ldr	r2, [pc, #36]	; (800c25c <vTaskSwitchContext+0x104>)
 800c238:	6013      	str	r3, [r2, #0]
 800c23a:	4a09      	ldr	r2, [pc, #36]	; (800c260 <vTaskSwitchContext+0x108>)
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c240:	4b06      	ldr	r3, [pc, #24]	; (800c25c <vTaskSwitchContext+0x104>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3354      	adds	r3, #84	; 0x54
 800c246:	4a08      	ldr	r2, [pc, #32]	; (800c268 <vTaskSwitchContext+0x110>)
 800c248:	6013      	str	r3, [r2, #0]
}
 800c24a:	bf00      	nop
 800c24c:	3718      	adds	r7, #24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	20004eb0 	.word	0x20004eb0
 800c258:	20004e9c 	.word	0x20004e9c
 800c25c:	200049b4 	.word	0x200049b4
 800c260:	20004e90 	.word	0x20004e90
 800c264:	200049b8 	.word	0x200049b8
 800c268:	20000014 	.word	0x20000014

0800c26c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10a      	bne.n	800c292 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	60fb      	str	r3, [r7, #12]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c292:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <vTaskPlaceOnEventList+0x44>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3318      	adds	r3, #24
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7fe fbb5 	bl	800aa0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	6838      	ldr	r0, [r7, #0]
 800c2a4:	f000 fb9e 	bl	800c9e4 <prvAddCurrentTaskToDelayedList>
}
 800c2a8:	bf00      	nop
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	200049b4 	.word	0x200049b4

0800c2b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10a      	bne.n	800c2dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	617b      	str	r3, [r7, #20]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <vTaskPlaceOnEventListRestricted+0x54>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3318      	adds	r3, #24
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7fe fb6c 	bl	800a9c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c2f6:	6879      	ldr	r1, [r7, #4]
 800c2f8:	68b8      	ldr	r0, [r7, #8]
 800c2fa:	f000 fb73 	bl	800c9e4 <prvAddCurrentTaskToDelayedList>
	}
 800c2fe:	bf00      	nop
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	200049b4 	.word	0x200049b4

0800c30c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	60fb      	str	r3, [r7, #12]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	3318      	adds	r3, #24
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fe fb9d 	bl	800aa7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c342:	4b1e      	ldr	r3, [pc, #120]	; (800c3bc <xTaskRemoveFromEventList+0xb0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d11d      	bne.n	800c386 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	3304      	adds	r3, #4
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe fb94 	bl	800aa7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c358:	4b19      	ldr	r3, [pc, #100]	; (800c3c0 <xTaskRemoveFromEventList+0xb4>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d903      	bls.n	800c368 <xTaskRemoveFromEventList+0x5c>
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c364:	4a16      	ldr	r2, [pc, #88]	; (800c3c0 <xTaskRemoveFromEventList+0xb4>)
 800c366:	6013      	str	r3, [r2, #0]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c36c:	4613      	mov	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4a13      	ldr	r2, [pc, #76]	; (800c3c4 <xTaskRemoveFromEventList+0xb8>)
 800c376:	441a      	add	r2, r3
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	3304      	adds	r3, #4
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f7fe fb1f 	bl	800a9c2 <vListInsertEnd>
 800c384:	e005      	b.n	800c392 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	3318      	adds	r3, #24
 800c38a:	4619      	mov	r1, r3
 800c38c:	480e      	ldr	r0, [pc, #56]	; (800c3c8 <xTaskRemoveFromEventList+0xbc>)
 800c38e:	f7fe fb18 	bl	800a9c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c396:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <xTaskRemoveFromEventList+0xc0>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d905      	bls.n	800c3ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3a4:	4b0a      	ldr	r3, [pc, #40]	; (800c3d0 <xTaskRemoveFromEventList+0xc4>)
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	e001      	b.n	800c3b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3b0:	697b      	ldr	r3, [r7, #20]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20004eb0 	.word	0x20004eb0
 800c3c0:	20004e90 	.word	0x20004e90
 800c3c4:	200049b8 	.word	0x200049b8
 800c3c8:	20004e48 	.word	0x20004e48
 800c3cc:	200049b4 	.word	0x200049b4
 800c3d0:	20004e9c 	.word	0x20004e9c

0800c3d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3dc:	4b06      	ldr	r3, [pc, #24]	; (800c3f8 <vTaskInternalSetTimeOutState+0x24>)
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3e4:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <vTaskInternalSetTimeOutState+0x28>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	605a      	str	r2, [r3, #4]
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	20004ea0 	.word	0x20004ea0
 800c3fc:	20004e8c 	.word	0x20004e8c

0800c400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	613b      	str	r3, [r7, #16]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	60fb      	str	r3, [r7, #12]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c442:	f7fe fc6f 	bl	800ad24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c446:	4b1d      	ldr	r3, [pc, #116]	; (800c4bc <xTaskCheckForTimeOut+0xbc>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	69ba      	ldr	r2, [r7, #24]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45e:	d102      	bne.n	800c466 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c460:	2300      	movs	r3, #0
 800c462:	61fb      	str	r3, [r7, #28]
 800c464:	e023      	b.n	800c4ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	4b15      	ldr	r3, [pc, #84]	; (800c4c0 <xTaskCheckForTimeOut+0xc0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d007      	beq.n	800c482 <xTaskCheckForTimeOut+0x82>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	69ba      	ldr	r2, [r7, #24]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d302      	bcc.n	800c482 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	61fb      	str	r3, [r7, #28]
 800c480:	e015      	b.n	800c4ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d20b      	bcs.n	800c4a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	1ad2      	subs	r2, r2, r3
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7ff ff9b 	bl	800c3d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	61fb      	str	r3, [r7, #28]
 800c4a2:	e004      	b.n	800c4ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4ae:	f7fe fc69 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3720      	adds	r7, #32
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20004e8c 	.word	0x20004e8c
 800c4c0:	20004ea0 	.word	0x20004ea0

0800c4c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4c8:	4b03      	ldr	r3, [pc, #12]	; (800c4d8 <vTaskMissedYield+0x14>)
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	601a      	str	r2, [r3, #0]
}
 800c4ce:	bf00      	nop
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	20004e9c 	.word	0x20004e9c

0800c4dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c4e4:	f000 f852 	bl	800c58c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c4e8:	4b06      	ldr	r3, [pc, #24]	; (800c504 <prvIdleTask+0x28>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d9f9      	bls.n	800c4e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c4f0:	4b05      	ldr	r3, [pc, #20]	; (800c508 <prvIdleTask+0x2c>)
 800c4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c500:	e7f0      	b.n	800c4e4 <prvIdleTask+0x8>
 800c502:	bf00      	nop
 800c504:	200049b8 	.word	0x200049b8
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c512:	2300      	movs	r3, #0
 800c514:	607b      	str	r3, [r7, #4]
 800c516:	e00c      	b.n	800c532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4a12      	ldr	r2, [pc, #72]	; (800c56c <prvInitialiseTaskLists+0x60>)
 800c524:	4413      	add	r3, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe fa1e 	bl	800a968 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3301      	adds	r3, #1
 800c530:	607b      	str	r3, [r7, #4]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b37      	cmp	r3, #55	; 0x37
 800c536:	d9ef      	bls.n	800c518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c538:	480d      	ldr	r0, [pc, #52]	; (800c570 <prvInitialiseTaskLists+0x64>)
 800c53a:	f7fe fa15 	bl	800a968 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c53e:	480d      	ldr	r0, [pc, #52]	; (800c574 <prvInitialiseTaskLists+0x68>)
 800c540:	f7fe fa12 	bl	800a968 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c544:	480c      	ldr	r0, [pc, #48]	; (800c578 <prvInitialiseTaskLists+0x6c>)
 800c546:	f7fe fa0f 	bl	800a968 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c54a:	480c      	ldr	r0, [pc, #48]	; (800c57c <prvInitialiseTaskLists+0x70>)
 800c54c:	f7fe fa0c 	bl	800a968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c550:	480b      	ldr	r0, [pc, #44]	; (800c580 <prvInitialiseTaskLists+0x74>)
 800c552:	f7fe fa09 	bl	800a968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c556:	4b0b      	ldr	r3, [pc, #44]	; (800c584 <prvInitialiseTaskLists+0x78>)
 800c558:	4a05      	ldr	r2, [pc, #20]	; (800c570 <prvInitialiseTaskLists+0x64>)
 800c55a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c55c:	4b0a      	ldr	r3, [pc, #40]	; (800c588 <prvInitialiseTaskLists+0x7c>)
 800c55e:	4a05      	ldr	r2, [pc, #20]	; (800c574 <prvInitialiseTaskLists+0x68>)
 800c560:	601a      	str	r2, [r3, #0]
}
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	200049b8 	.word	0x200049b8
 800c570:	20004e18 	.word	0x20004e18
 800c574:	20004e2c 	.word	0x20004e2c
 800c578:	20004e48 	.word	0x20004e48
 800c57c:	20004e5c 	.word	0x20004e5c
 800c580:	20004e74 	.word	0x20004e74
 800c584:	20004e40 	.word	0x20004e40
 800c588:	20004e44 	.word	0x20004e44

0800c58c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c592:	e019      	b.n	800c5c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c594:	f7fe fbc6 	bl	800ad24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c598:	4b10      	ldr	r3, [pc, #64]	; (800c5dc <prvCheckTasksWaitingTermination+0x50>)
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe fa69 	bl	800aa7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	; (800c5e0 <prvCheckTasksWaitingTermination+0x54>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	4a0b      	ldr	r2, [pc, #44]	; (800c5e0 <prvCheckTasksWaitingTermination+0x54>)
 800c5b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5b4:	4b0b      	ldr	r3, [pc, #44]	; (800c5e4 <prvCheckTasksWaitingTermination+0x58>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	4a0a      	ldr	r2, [pc, #40]	; (800c5e4 <prvCheckTasksWaitingTermination+0x58>)
 800c5bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5be:	f7fe fbe1 	bl	800ad84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f810 	bl	800c5e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5c8:	4b06      	ldr	r3, [pc, #24]	; (800c5e4 <prvCheckTasksWaitingTermination+0x58>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e1      	bne.n	800c594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5d0:	bf00      	nop
 800c5d2:	bf00      	nop
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20004e5c 	.word	0x20004e5c
 800c5e0:	20004e88 	.word	0x20004e88
 800c5e4:	20004e70 	.word	0x20004e70

0800c5e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3354      	adds	r3, #84	; 0x54
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 fde1 	bl	800d1bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c600:	2b00      	cmp	r3, #0
 800c602:	d108      	bne.n	800c616 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fe f88f 	bl	800a72c <vPortFree>
				vPortFree( pxTCB );
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7fe f88c 	bl	800a72c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c614:	e018      	b.n	800c648 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d103      	bne.n	800c628 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7fe f883 	bl	800a72c <vPortFree>
	}
 800c626:	e00f      	b.n	800c648 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d00a      	beq.n	800c648 <prvDeleteTCB+0x60>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	60fb      	str	r3, [r7, #12]
}
 800c644:	bf00      	nop
 800c646:	e7fe      	b.n	800c646 <prvDeleteTCB+0x5e>
	}
 800c648:	bf00      	nop
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c656:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <prvResetNextTaskUnblockTime+0x38>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d104      	bne.n	800c66a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c660:	4b0a      	ldr	r3, [pc, #40]	; (800c68c <prvResetNextTaskUnblockTime+0x3c>)
 800c662:	f04f 32ff 	mov.w	r2, #4294967295
 800c666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c668:	e008      	b.n	800c67c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c66a:	4b07      	ldr	r3, [pc, #28]	; (800c688 <prvResetNextTaskUnblockTime+0x38>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4a04      	ldr	r2, [pc, #16]	; (800c68c <prvResetNextTaskUnblockTime+0x3c>)
 800c67a:	6013      	str	r3, [r2, #0]
}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	20004e40 	.word	0x20004e40
 800c68c:	20004ea8 	.word	0x20004ea8

0800c690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c696:	4b0b      	ldr	r3, [pc, #44]	; (800c6c4 <xTaskGetSchedulerState+0x34>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d102      	bne.n	800c6a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	607b      	str	r3, [r7, #4]
 800c6a2:	e008      	b.n	800c6b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6a4:	4b08      	ldr	r3, [pc, #32]	; (800c6c8 <xTaskGetSchedulerState+0x38>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	607b      	str	r3, [r7, #4]
 800c6b0:	e001      	b.n	800c6b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6b6:	687b      	ldr	r3, [r7, #4]
	}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	20004e94 	.word	0x20004e94
 800c6c8:	20004eb0 	.word	0x20004eb0

0800c6cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d056      	beq.n	800c790 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c6e2:	4b2e      	ldr	r3, [pc, #184]	; (800c79c <xTaskPriorityDisinherit+0xd0>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d00a      	beq.n	800c702 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	60fb      	str	r3, [r7, #12]
}
 800c6fe:	bf00      	nop
 800c700:	e7fe      	b.n	800c700 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70e:	f383 8811 	msr	BASEPRI, r3
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	60bb      	str	r3, [r7, #8]
}
 800c71c:	bf00      	nop
 800c71e:	e7fe      	b.n	800c71e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c724:	1e5a      	subs	r2, r3, #1
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c732:	429a      	cmp	r2, r3
 800c734:	d02c      	beq.n	800c790 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d128      	bne.n	800c790 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	3304      	adds	r3, #4
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe f99a 	bl	800aa7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c754:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c760:	4b0f      	ldr	r3, [pc, #60]	; (800c7a0 <xTaskPriorityDisinherit+0xd4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d903      	bls.n	800c770 <xTaskPriorityDisinherit+0xa4>
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	4a0c      	ldr	r2, [pc, #48]	; (800c7a0 <xTaskPriorityDisinherit+0xd4>)
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4a09      	ldr	r2, [pc, #36]	; (800c7a4 <xTaskPriorityDisinherit+0xd8>)
 800c77e:	441a      	add	r2, r3
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	3304      	adds	r3, #4
 800c784:	4619      	mov	r1, r3
 800c786:	4610      	mov	r0, r2
 800c788:	f7fe f91b 	bl	800a9c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c790:	697b      	ldr	r3, [r7, #20]
	}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	200049b4 	.word	0x200049b4
 800c7a0:	20004e90 	.word	0x20004e90
 800c7a4:	200049b8 	.word	0x200049b8

0800c7a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c7b6:	f7fe fab5 	bl	800ad24 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c7ba:	4b29      	ldr	r3, [pc, #164]	; (800c860 <xTaskNotifyWait+0xb8>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d01c      	beq.n	800c802 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c7c8:	4b25      	ldr	r3, [pc, #148]	; (800c860 <xTaskNotifyWait+0xb8>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	43d2      	mvns	r2, r2
 800c7d4:	400a      	ands	r2, r1
 800c7d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c7da:	4b21      	ldr	r3, [pc, #132]	; (800c860 <xTaskNotifyWait+0xb8>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00b      	beq.n	800c802 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	6838      	ldr	r0, [r7, #0]
 800c7ee:	f000 f8f9 	bl	800c9e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <xTaskNotifyWait+0xbc>)
 800c7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c802:	f7fe fabf 	bl	800ad84 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c806:	f7fe fa8d 	bl	800ad24 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d005      	beq.n	800c81c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c810:	4b13      	ldr	r3, [pc, #76]	; (800c860 <xTaskNotifyWait+0xb8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c81c:	4b10      	ldr	r3, [pc, #64]	; (800c860 <xTaskNotifyWait+0xb8>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b02      	cmp	r3, #2
 800c828:	d002      	beq.n	800c830 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c82a:	2300      	movs	r3, #0
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	e00a      	b.n	800c846 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c830:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <xTaskNotifyWait+0xb8>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	43d2      	mvns	r2, r2
 800c83c:	400a      	ands	r2, r1
 800c83e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800c842:	2301      	movs	r3, #1
 800c844:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c846:	4b06      	ldr	r3, [pc, #24]	; (800c860 <xTaskNotifyWait+0xb8>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800c850:	f7fe fa98 	bl	800ad84 <vPortExitCritical>

		return xReturn;
 800c854:	697b      	ldr	r3, [r7, #20]
	}
 800c856:	4618      	mov	r0, r3
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	200049b4 	.word	0x200049b4
 800c864:	e000ed04 	.word	0xe000ed04

0800c868 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	; 0x28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	4613      	mov	r3, r2
 800c876:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c878:	2301      	movs	r3, #1
 800c87a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10a      	bne.n	800c898 <xTaskGenericNotify+0x30>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	61bb      	str	r3, [r7, #24]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c89c:	f7fe fa42 	bl	800ad24 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d004      	beq.n	800c8b0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c8b6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800c8c0:	79fb      	ldrb	r3, [r7, #7]
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d82d      	bhi.n	800c922 <xTaskGenericNotify+0xba>
 800c8c6:	a201      	add	r2, pc, #4	; (adr r2, 800c8cc <xTaskGenericNotify+0x64>)
 800c8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8cc:	0800c945 	.word	0x0800c945
 800c8d0:	0800c8e1 	.word	0x0800c8e1
 800c8d4:	0800c8f3 	.word	0x0800c8f3
 800c8d8:	0800c903 	.word	0x0800c903
 800c8dc:	0800c90d 	.word	0x0800c90d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c8f0:	e02b      	b.n	800c94a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c900:	e023      	b.n	800c94a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c902:	6a3b      	ldr	r3, [r7, #32]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c90a:	e01e      	b.n	800c94a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c90c:	7ffb      	ldrb	r3, [r7, #31]
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d004      	beq.n	800c91c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c91a:	e016      	b.n	800c94a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c91c:	2300      	movs	r3, #0
 800c91e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c920:	e013      	b.n	800c94a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c92c:	d00c      	beq.n	800c948 <xTaskGenericNotify+0xe0>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	617b      	str	r3, [r7, #20]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <xTaskGenericNotify+0xda>
					break;
 800c944:	bf00      	nop
 800c946:	e000      	b.n	800c94a <xTaskGenericNotify+0xe2>

					break;
 800c948:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c94a:	7ffb      	ldrb	r3, [r7, #31]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d13a      	bne.n	800c9c6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	3304      	adds	r3, #4
 800c954:	4618      	mov	r0, r3
 800c956:	f7fe f891 	bl	800aa7c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c95e:	4b1d      	ldr	r3, [pc, #116]	; (800c9d4 <xTaskGenericNotify+0x16c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	429a      	cmp	r2, r3
 800c964:	d903      	bls.n	800c96e <xTaskGenericNotify+0x106>
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96a:	4a1a      	ldr	r2, [pc, #104]	; (800c9d4 <xTaskGenericNotify+0x16c>)
 800c96c:	6013      	str	r3, [r2, #0]
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4a17      	ldr	r2, [pc, #92]	; (800c9d8 <xTaskGenericNotify+0x170>)
 800c97c:	441a      	add	r2, r3
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	3304      	adds	r3, #4
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7fe f81c 	bl	800a9c2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c98a:	6a3b      	ldr	r3, [r7, #32]
 800c98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00a      	beq.n	800c9a8 <xTaskGenericNotify+0x140>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	613b      	str	r3, [r7, #16]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9a8:	6a3b      	ldr	r3, [r7, #32]
 800c9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ac:	4b0b      	ldr	r3, [pc, #44]	; (800c9dc <xTaskGenericNotify+0x174>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d907      	bls.n	800c9c6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c9b6:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <xTaskGenericNotify+0x178>)
 800c9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c9c6:	f7fe f9dd 	bl	800ad84 <vPortExitCritical>

		return xReturn;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3728      	adds	r7, #40	; 0x28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	20004e90 	.word	0x20004e90
 800c9d8:	200049b8 	.word	0x200049b8
 800c9dc:	200049b4 	.word	0x200049b4
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9ee:	4b21      	ldr	r3, [pc, #132]	; (800ca74 <prvAddCurrentTaskToDelayedList+0x90>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9f4:	4b20      	ldr	r3, [pc, #128]	; (800ca78 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fe f83e 	bl	800aa7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca06:	d10a      	bne.n	800ca1e <prvAddCurrentTaskToDelayedList+0x3a>
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d007      	beq.n	800ca1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca0e:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	3304      	adds	r3, #4
 800ca14:	4619      	mov	r1, r3
 800ca16:	4819      	ldr	r0, [pc, #100]	; (800ca7c <prvAddCurrentTaskToDelayedList+0x98>)
 800ca18:	f7fd ffd3 	bl	800a9c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca1c:	e026      	b.n	800ca6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4413      	add	r3, r2
 800ca24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca26:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d209      	bcs.n	800ca4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca36:	4b12      	ldr	r3, [pc, #72]	; (800ca80 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	4b0f      	ldr	r3, [pc, #60]	; (800ca78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	3304      	adds	r3, #4
 800ca40:	4619      	mov	r1, r3
 800ca42:	4610      	mov	r0, r2
 800ca44:	f7fd ffe1 	bl	800aa0a <vListInsert>
}
 800ca48:	e010      	b.n	800ca6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca4a:	4b0e      	ldr	r3, [pc, #56]	; (800ca84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	4b0a      	ldr	r3, [pc, #40]	; (800ca78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3304      	adds	r3, #4
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	f7fd ffd7 	bl	800aa0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d202      	bcs.n	800ca6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca66:	4a08      	ldr	r2, [pc, #32]	; (800ca88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	6013      	str	r3, [r2, #0]
}
 800ca6c:	bf00      	nop
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20004e8c 	.word	0x20004e8c
 800ca78:	200049b4 	.word	0x200049b4
 800ca7c:	20004e74 	.word	0x20004e74
 800ca80:	20004e44 	.word	0x20004e44
 800ca84:	20004e40 	.word	0x20004e40
 800ca88:	20004ea8 	.word	0x20004ea8

0800ca8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08a      	sub	sp, #40	; 0x28
 800ca90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca96:	f000 fb07 	bl	800d0a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca9a:	4b1c      	ldr	r3, [pc, #112]	; (800cb0c <xTimerCreateTimerTask+0x80>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d021      	beq.n	800cae6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800caaa:	1d3a      	adds	r2, r7, #4
 800caac:	f107 0108 	add.w	r1, r7, #8
 800cab0:	f107 030c 	add.w	r3, r7, #12
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fd fd53 	bl	800a560 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	9202      	str	r2, [sp, #8]
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	2302      	movs	r3, #2
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	2300      	movs	r3, #0
 800caca:	460a      	mov	r2, r1
 800cacc:	4910      	ldr	r1, [pc, #64]	; (800cb10 <xTimerCreateTimerTask+0x84>)
 800cace:	4811      	ldr	r0, [pc, #68]	; (800cb14 <xTimerCreateTimerTask+0x88>)
 800cad0:	f7fe ff70 	bl	800b9b4 <xTaskCreateStatic>
 800cad4:	4603      	mov	r3, r0
 800cad6:	4a10      	ldr	r2, [pc, #64]	; (800cb18 <xTimerCreateTimerTask+0x8c>)
 800cad8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cada:	4b0f      	ldr	r3, [pc, #60]	; (800cb18 <xTimerCreateTimerTask+0x8c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d001      	beq.n	800cae6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cae2:	2301      	movs	r3, #1
 800cae4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	613b      	str	r3, [r7, #16]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb02:	697b      	ldr	r3, [r7, #20]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	20004ee4 	.word	0x20004ee4
 800cb10:	0800dad4 	.word	0x0800dad4
 800cb14:	0800cc51 	.word	0x0800cc51
 800cb18:	20004ee8 	.word	0x20004ee8

0800cb1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b08a      	sub	sp, #40	; 0x28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10a      	bne.n	800cb4a <xTimerGenericCommand+0x2e>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	623b      	str	r3, [r7, #32]
}
 800cb46:	bf00      	nop
 800cb48:	e7fe      	b.n	800cb48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cb4a:	4b1a      	ldr	r3, [pc, #104]	; (800cbb4 <xTimerGenericCommand+0x98>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d02a      	beq.n	800cba8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b05      	cmp	r3, #5
 800cb62:	dc18      	bgt.n	800cb96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb64:	f7ff fd94 	bl	800c690 <xTaskGetSchedulerState>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d109      	bne.n	800cb82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb6e:	4b11      	ldr	r3, [pc, #68]	; (800cbb4 <xTimerGenericCommand+0x98>)
 800cb70:	6818      	ldr	r0, [r3, #0]
 800cb72:	f107 0110 	add.w	r1, r7, #16
 800cb76:	2300      	movs	r3, #0
 800cb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb7a:	f7fe fb33 	bl	800b1e4 <xQueueGenericSend>
 800cb7e:	6278      	str	r0, [r7, #36]	; 0x24
 800cb80:	e012      	b.n	800cba8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb82:	4b0c      	ldr	r3, [pc, #48]	; (800cbb4 <xTimerGenericCommand+0x98>)
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	f107 0110 	add.w	r1, r7, #16
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f7fe fb29 	bl	800b1e4 <xQueueGenericSend>
 800cb92:	6278      	str	r0, [r7, #36]	; 0x24
 800cb94:	e008      	b.n	800cba8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb96:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <xTimerGenericCommand+0x98>)
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	f107 0110 	add.w	r1, r7, #16
 800cb9e:	2300      	movs	r3, #0
 800cba0:	683a      	ldr	r2, [r7, #0]
 800cba2:	f7fe fc1d 	bl	800b3e0 <xQueueGenericSendFromISR>
 800cba6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3728      	adds	r7, #40	; 0x28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	20004ee4 	.word	0x20004ee4

0800cbb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b088      	sub	sp, #32
 800cbbc:	af02      	add	r7, sp, #8
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc2:	4b22      	ldr	r3, [pc, #136]	; (800cc4c <prvProcessExpiredTimer+0x94>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fd ff53 	bl	800aa7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbdc:	f003 0304 	and.w	r3, r3, #4
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d022      	beq.n	800cc2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	699a      	ldr	r2, [r3, #24]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	18d1      	adds	r1, r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	6978      	ldr	r0, [r7, #20]
 800cbf2:	f000 f8d1 	bl	800cd98 <prvInsertTimerInActiveList>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d01f      	beq.n	800cc3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	2300      	movs	r3, #0
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	2100      	movs	r1, #0
 800cc06:	6978      	ldr	r0, [r7, #20]
 800cc08:	f7ff ff88 	bl	800cb1c <xTimerGenericCommand>
 800cc0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d113      	bne.n	800cc3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc18:	f383 8811 	msr	BASEPRI, r3
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	60fb      	str	r3, [r7, #12]
}
 800cc26:	bf00      	nop
 800cc28:	e7fe      	b.n	800cc28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc30:	f023 0301 	bic.w	r3, r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	6978      	ldr	r0, [r7, #20]
 800cc42:	4798      	blx	r3
}
 800cc44:	bf00      	nop
 800cc46:	3718      	adds	r7, #24
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20004edc 	.word	0x20004edc

0800cc50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc58:	f107 0308 	add.w	r3, r7, #8
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 f857 	bl	800cd10 <prvGetNextExpireTime>
 800cc62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	4619      	mov	r1, r3
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f000 f803 	bl	800cc74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc6e:	f000 f8d5 	bl	800ce1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc72:	e7f1      	b.n	800cc58 <prvTimerTask+0x8>

0800cc74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc7e:	f7ff f8f5 	bl	800be6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc82:	f107 0308 	add.w	r3, r7, #8
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 f866 	bl	800cd58 <prvSampleTimeNow>
 800cc8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d130      	bne.n	800ccf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10a      	bne.n	800ccb0 <prvProcessTimerOrBlockTask+0x3c>
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d806      	bhi.n	800ccb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cca2:	f7ff f8f1 	bl	800be88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cca6:	68f9      	ldr	r1, [r7, #12]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff ff85 	bl	800cbb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ccae:	e024      	b.n	800ccfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d008      	beq.n	800ccc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ccb6:	4b13      	ldr	r3, [pc, #76]	; (800cd04 <prvProcessTimerOrBlockTask+0x90>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <prvProcessTimerOrBlockTask+0x50>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <prvProcessTimerOrBlockTask+0x52>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ccc8:	4b0f      	ldr	r3, [pc, #60]	; (800cd08 <prvProcessTimerOrBlockTask+0x94>)
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	f7fe fe39 	bl	800b94c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ccda:	f7ff f8d5 	bl	800be88 <xTaskResumeAll>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10a      	bne.n	800ccfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cce4:	4b09      	ldr	r3, [pc, #36]	; (800cd0c <prvProcessTimerOrBlockTask+0x98>)
 800cce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccea:	601a      	str	r2, [r3, #0]
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	f3bf 8f6f 	isb	sy
}
 800ccf4:	e001      	b.n	800ccfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ccf6:	f7ff f8c7 	bl	800be88 <xTaskResumeAll>
}
 800ccfa:	bf00      	nop
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	20004ee0 	.word	0x20004ee0
 800cd08:	20004ee4 	.word	0x20004ee4
 800cd0c:	e000ed04 	.word	0xe000ed04

0800cd10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd18:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <prvGetNextExpireTime+0x44>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <prvGetNextExpireTime+0x16>
 800cd22:	2201      	movs	r2, #1
 800cd24:	e000      	b.n	800cd28 <prvGetNextExpireTime+0x18>
 800cd26:	2200      	movs	r2, #0
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d105      	bne.n	800cd40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd34:	4b07      	ldr	r3, [pc, #28]	; (800cd54 <prvGetNextExpireTime+0x44>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	60fb      	str	r3, [r7, #12]
 800cd3e:	e001      	b.n	800cd44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cd40:	2300      	movs	r3, #0
 800cd42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cd44:	68fb      	ldr	r3, [r7, #12]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	20004edc 	.word	0x20004edc

0800cd58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd60:	f7ff f930 	bl	800bfc4 <xTaskGetTickCount>
 800cd64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <prvSampleTimeNow+0x3c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d205      	bcs.n	800cd7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd70:	f000 f936 	bl	800cfe0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	e002      	b.n	800cd82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd82:	4a04      	ldr	r2, [pc, #16]	; (800cd94 <prvSampleTimeNow+0x3c>)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd88:	68fb      	ldr	r3, [r7, #12]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	20004eec 	.word	0x20004eec

0800cd98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cda6:	2300      	movs	r3, #0
 800cda8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cdb6:	68ba      	ldr	r2, [r7, #8]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d812      	bhi.n	800cde4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	1ad2      	subs	r2, r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d302      	bcc.n	800cdd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	617b      	str	r3, [r7, #20]
 800cdd0:	e01b      	b.n	800ce0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cdd2:	4b10      	ldr	r3, [pc, #64]	; (800ce14 <prvInsertTimerInActiveList+0x7c>)
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3304      	adds	r3, #4
 800cdda:	4619      	mov	r1, r3
 800cddc:	4610      	mov	r0, r2
 800cdde:	f7fd fe14 	bl	800aa0a <vListInsert>
 800cde2:	e012      	b.n	800ce0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d206      	bcs.n	800cdfa <prvInsertTimerInActiveList+0x62>
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d302      	bcc.n	800cdfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	e007      	b.n	800ce0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdfa:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <prvInsertTimerInActiveList+0x80>)
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4619      	mov	r1, r3
 800ce04:	4610      	mov	r0, r2
 800ce06:	f7fd fe00 	bl	800aa0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce0a:	697b      	ldr	r3, [r7, #20]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3718      	adds	r7, #24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20004ee0 	.word	0x20004ee0
 800ce18:	20004edc 	.word	0x20004edc

0800ce1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b08e      	sub	sp, #56	; 0x38
 800ce20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce22:	e0ca      	b.n	800cfba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	da18      	bge.n	800ce5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce2a:	1d3b      	adds	r3, r7, #4
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10a      	bne.n	800ce4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	61fb      	str	r3, [r7, #28]
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce52:	6850      	ldr	r0, [r2, #4]
 800ce54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce56:	6892      	ldr	r2, [r2, #8]
 800ce58:	4611      	mov	r1, r2
 800ce5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f2c0 80aa 	blt.w	800cfb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	3304      	adds	r3, #4
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fd fe01 	bl	800aa7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce7a:	463b      	mov	r3, r7
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7ff ff6b 	bl	800cd58 <prvSampleTimeNow>
 800ce82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b09      	cmp	r3, #9
 800ce88:	f200 8097 	bhi.w	800cfba <prvProcessReceivedCommands+0x19e>
 800ce8c:	a201      	add	r2, pc, #4	; (adr r2, 800ce94 <prvProcessReceivedCommands+0x78>)
 800ce8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce92:	bf00      	nop
 800ce94:	0800cebd 	.word	0x0800cebd
 800ce98:	0800cebd 	.word	0x0800cebd
 800ce9c:	0800cebd 	.word	0x0800cebd
 800cea0:	0800cf31 	.word	0x0800cf31
 800cea4:	0800cf45 	.word	0x0800cf45
 800cea8:	0800cf8f 	.word	0x0800cf8f
 800ceac:	0800cebd 	.word	0x0800cebd
 800ceb0:	0800cebd 	.word	0x0800cebd
 800ceb4:	0800cf31 	.word	0x0800cf31
 800ceb8:	0800cf45 	.word	0x0800cf45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec2:	f043 0301 	orr.w	r3, r3, #1
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	18d1      	adds	r1, r2, r3
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cedc:	f7ff ff5c 	bl	800cd98 <prvInsertTimerInActiveList>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d069      	beq.n	800cfba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ceee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cef4:	f003 0304 	and.w	r3, r3, #4
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d05e      	beq.n	800cfba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	441a      	add	r2, r3
 800cf04:	2300      	movs	r3, #0
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	2300      	movs	r3, #0
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf0e:	f7ff fe05 	bl	800cb1c <xTimerGenericCommand>
 800cf12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cf14:	6a3b      	ldr	r3, [r7, #32]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d14f      	bne.n	800cfba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	61bb      	str	r3, [r7, #24]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf36:	f023 0301 	bic.w	r3, r3, #1
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cf42:	e03a      	b.n	800cfba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf4a:	f043 0301 	orr.w	r3, r3, #1
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5e:	699b      	ldr	r3, [r3, #24]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d10a      	bne.n	800cf7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	617b      	str	r3, [r7, #20]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7c:	699a      	ldr	r2, [r3, #24]
 800cf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf80:	18d1      	adds	r1, r2, r3
 800cf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf88:	f7ff ff06 	bl	800cd98 <prvInsertTimerInActiveList>
					break;
 800cf8c:	e015      	b.n	800cfba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf94:	f003 0302 	and.w	r3, r3, #2
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d103      	bne.n	800cfa4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cf9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf9e:	f7fd fbc5 	bl	800a72c <vPortFree>
 800cfa2:	e00a      	b.n	800cfba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfaa:	f023 0301 	bic.w	r3, r3, #1
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cfb6:	e000      	b.n	800cfba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cfb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfba:	4b08      	ldr	r3, [pc, #32]	; (800cfdc <prvProcessReceivedCommands+0x1c0>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	1d39      	adds	r1, r7, #4
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe faa8 	bl	800b518 <xQueueReceive>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f47f af2a 	bne.w	800ce24 <prvProcessReceivedCommands+0x8>
	}
}
 800cfd0:	bf00      	nop
 800cfd2:	bf00      	nop
 800cfd4:	3730      	adds	r7, #48	; 0x30
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20004ee4 	.word	0x20004ee4

0800cfe0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfe6:	e048      	b.n	800d07a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfe8:	4b2d      	ldr	r3, [pc, #180]	; (800d0a0 <prvSwitchTimerLists+0xc0>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cff2:	4b2b      	ldr	r3, [pc, #172]	; (800d0a0 <prvSwitchTimerLists+0xc0>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3304      	adds	r3, #4
 800d000:	4618      	mov	r0, r3
 800d002:	f7fd fd3b 	bl	800aa7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6a1b      	ldr	r3, [r3, #32]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d02e      	beq.n	800d07a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	699b      	ldr	r3, [r3, #24]
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	4413      	add	r3, r2
 800d024:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d90e      	bls.n	800d04c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d03a:	4b19      	ldr	r3, [pc, #100]	; (800d0a0 <prvSwitchTimerLists+0xc0>)
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3304      	adds	r3, #4
 800d042:	4619      	mov	r1, r3
 800d044:	4610      	mov	r0, r2
 800d046:	f7fd fce0 	bl	800aa0a <vListInsert>
 800d04a:	e016      	b.n	800d07a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d04c:	2300      	movs	r3, #0
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	2300      	movs	r3, #0
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	2100      	movs	r1, #0
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff fd60 	bl	800cb1c <xTimerGenericCommand>
 800d05c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10a      	bne.n	800d07a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	603b      	str	r3, [r7, #0]
}
 800d076:	bf00      	nop
 800d078:	e7fe      	b.n	800d078 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d07a:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <prvSwitchTimerLists+0xc0>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1b1      	bne.n	800cfe8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d084:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <prvSwitchTimerLists+0xc0>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d08a:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <prvSwitchTimerLists+0xc4>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <prvSwitchTimerLists+0xc0>)
 800d090:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d092:	4a04      	ldr	r2, [pc, #16]	; (800d0a4 <prvSwitchTimerLists+0xc4>)
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	6013      	str	r3, [r2, #0]
}
 800d098:	bf00      	nop
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	20004edc 	.word	0x20004edc
 800d0a4:	20004ee0 	.word	0x20004ee0

0800d0a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d0ae:	f7fd fe39 	bl	800ad24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d0b2:	4b15      	ldr	r3, [pc, #84]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d120      	bne.n	800d0fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d0ba:	4814      	ldr	r0, [pc, #80]	; (800d10c <prvCheckForValidListAndQueue+0x64>)
 800d0bc:	f7fd fc54 	bl	800a968 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d0c0:	4813      	ldr	r0, [pc, #76]	; (800d110 <prvCheckForValidListAndQueue+0x68>)
 800d0c2:	f7fd fc51 	bl	800a968 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d0c6:	4b13      	ldr	r3, [pc, #76]	; (800d114 <prvCheckForValidListAndQueue+0x6c>)
 800d0c8:	4a10      	ldr	r2, [pc, #64]	; (800d10c <prvCheckForValidListAndQueue+0x64>)
 800d0ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d0cc:	4b12      	ldr	r3, [pc, #72]	; (800d118 <prvCheckForValidListAndQueue+0x70>)
 800d0ce:	4a10      	ldr	r2, [pc, #64]	; (800d110 <prvCheckForValidListAndQueue+0x68>)
 800d0d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	4b11      	ldr	r3, [pc, #68]	; (800d11c <prvCheckForValidListAndQueue+0x74>)
 800d0d8:	4a11      	ldr	r2, [pc, #68]	; (800d120 <prvCheckForValidListAndQueue+0x78>)
 800d0da:	2110      	movs	r1, #16
 800d0dc:	200a      	movs	r0, #10
 800d0de:	f7fd ffab 	bl	800b038 <xQueueGenericCreateStatic>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	4a08      	ldr	r2, [pc, #32]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d0e8:	4b07      	ldr	r3, [pc, #28]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0f0:	4b05      	ldr	r3, [pc, #20]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	490b      	ldr	r1, [pc, #44]	; (800d124 <prvCheckForValidListAndQueue+0x7c>)
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe fbfe 	bl	800b8f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0fc:	f7fd fe42 	bl	800ad84 <vPortExitCritical>
}
 800d100:	bf00      	nop
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20004ee4 	.word	0x20004ee4
 800d10c:	20004eb4 	.word	0x20004eb4
 800d110:	20004ec8 	.word	0x20004ec8
 800d114:	20004edc 	.word	0x20004edc
 800d118:	20004ee0 	.word	0x20004ee0
 800d11c:	20004f90 	.word	0x20004f90
 800d120:	20004ef0 	.word	0x20004ef0
 800d124:	0800dadc 	.word	0x0800dadc

0800d128 <__libc_init_array>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	4d0d      	ldr	r5, [pc, #52]	; (800d160 <__libc_init_array+0x38>)
 800d12c:	4c0d      	ldr	r4, [pc, #52]	; (800d164 <__libc_init_array+0x3c>)
 800d12e:	1b64      	subs	r4, r4, r5
 800d130:	10a4      	asrs	r4, r4, #2
 800d132:	2600      	movs	r6, #0
 800d134:	42a6      	cmp	r6, r4
 800d136:	d109      	bne.n	800d14c <__libc_init_array+0x24>
 800d138:	4d0b      	ldr	r5, [pc, #44]	; (800d168 <__libc_init_array+0x40>)
 800d13a:	4c0c      	ldr	r4, [pc, #48]	; (800d16c <__libc_init_array+0x44>)
 800d13c:	f000 f92e 	bl	800d39c <_init>
 800d140:	1b64      	subs	r4, r4, r5
 800d142:	10a4      	asrs	r4, r4, #2
 800d144:	2600      	movs	r6, #0
 800d146:	42a6      	cmp	r6, r4
 800d148:	d105      	bne.n	800d156 <__libc_init_array+0x2e>
 800d14a:	bd70      	pop	{r4, r5, r6, pc}
 800d14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d150:	4798      	blx	r3
 800d152:	3601      	adds	r6, #1
 800d154:	e7ee      	b.n	800d134 <__libc_init_array+0xc>
 800d156:	f855 3b04 	ldr.w	r3, [r5], #4
 800d15a:	4798      	blx	r3
 800d15c:	3601      	adds	r6, #1
 800d15e:	e7f2      	b.n	800d146 <__libc_init_array+0x1e>
 800d160:	0800dc18 	.word	0x0800dc18
 800d164:	0800dc18 	.word	0x0800dc18
 800d168:	0800dc18 	.word	0x0800dc18
 800d16c:	0800dc1c 	.word	0x0800dc1c

0800d170 <__retarget_lock_acquire_recursive>:
 800d170:	4770      	bx	lr

0800d172 <__retarget_lock_release_recursive>:
 800d172:	4770      	bx	lr

0800d174 <memcpy>:
 800d174:	440a      	add	r2, r1
 800d176:	4291      	cmp	r1, r2
 800d178:	f100 33ff 	add.w	r3, r0, #4294967295
 800d17c:	d100      	bne.n	800d180 <memcpy+0xc>
 800d17e:	4770      	bx	lr
 800d180:	b510      	push	{r4, lr}
 800d182:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d18a:	4291      	cmp	r1, r2
 800d18c:	d1f9      	bne.n	800d182 <memcpy+0xe>
 800d18e:	bd10      	pop	{r4, pc}

0800d190 <memset>:
 800d190:	4402      	add	r2, r0
 800d192:	4603      	mov	r3, r0
 800d194:	4293      	cmp	r3, r2
 800d196:	d100      	bne.n	800d19a <memset+0xa>
 800d198:	4770      	bx	lr
 800d19a:	f803 1b01 	strb.w	r1, [r3], #1
 800d19e:	e7f9      	b.n	800d194 <memset+0x4>

0800d1a0 <cleanup_glue>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	6809      	ldr	r1, [r1, #0]
 800d1a6:	4605      	mov	r5, r0
 800d1a8:	b109      	cbz	r1, 800d1ae <cleanup_glue+0xe>
 800d1aa:	f7ff fff9 	bl	800d1a0 <cleanup_glue>
 800d1ae:	4621      	mov	r1, r4
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b6:	f000 b869 	b.w	800d28c <_free_r>
	...

0800d1bc <_reclaim_reent>:
 800d1bc:	4b2c      	ldr	r3, [pc, #176]	; (800d270 <_reclaim_reent+0xb4>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4283      	cmp	r3, r0
 800d1c2:	b570      	push	{r4, r5, r6, lr}
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	d051      	beq.n	800d26c <_reclaim_reent+0xb0>
 800d1c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d1ca:	b143      	cbz	r3, 800d1de <_reclaim_reent+0x22>
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d14a      	bne.n	800d268 <_reclaim_reent+0xac>
 800d1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d4:	6819      	ldr	r1, [r3, #0]
 800d1d6:	b111      	cbz	r1, 800d1de <_reclaim_reent+0x22>
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 f857 	bl	800d28c <_free_r>
 800d1de:	6961      	ldr	r1, [r4, #20]
 800d1e0:	b111      	cbz	r1, 800d1e8 <_reclaim_reent+0x2c>
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 f852 	bl	800d28c <_free_r>
 800d1e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d1ea:	b111      	cbz	r1, 800d1f2 <_reclaim_reent+0x36>
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 f84d 	bl	800d28c <_free_r>
 800d1f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d1f4:	b111      	cbz	r1, 800d1fc <_reclaim_reent+0x40>
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f000 f848 	bl	800d28c <_free_r>
 800d1fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d1fe:	b111      	cbz	r1, 800d206 <_reclaim_reent+0x4a>
 800d200:	4620      	mov	r0, r4
 800d202:	f000 f843 	bl	800d28c <_free_r>
 800d206:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d208:	b111      	cbz	r1, 800d210 <_reclaim_reent+0x54>
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 f83e 	bl	800d28c <_free_r>
 800d210:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d212:	b111      	cbz	r1, 800d21a <_reclaim_reent+0x5e>
 800d214:	4620      	mov	r0, r4
 800d216:	f000 f839 	bl	800d28c <_free_r>
 800d21a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d21c:	b111      	cbz	r1, 800d224 <_reclaim_reent+0x68>
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 f834 	bl	800d28c <_free_r>
 800d224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d226:	b111      	cbz	r1, 800d22e <_reclaim_reent+0x72>
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 f82f 	bl	800d28c <_free_r>
 800d22e:	69a3      	ldr	r3, [r4, #24]
 800d230:	b1e3      	cbz	r3, 800d26c <_reclaim_reent+0xb0>
 800d232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d234:	4620      	mov	r0, r4
 800d236:	4798      	blx	r3
 800d238:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d23a:	b1b9      	cbz	r1, 800d26c <_reclaim_reent+0xb0>
 800d23c:	4620      	mov	r0, r4
 800d23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d242:	f7ff bfad 	b.w	800d1a0 <cleanup_glue>
 800d246:	5949      	ldr	r1, [r1, r5]
 800d248:	b941      	cbnz	r1, 800d25c <_reclaim_reent+0xa0>
 800d24a:	3504      	adds	r5, #4
 800d24c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d24e:	2d80      	cmp	r5, #128	; 0x80
 800d250:	68d9      	ldr	r1, [r3, #12]
 800d252:	d1f8      	bne.n	800d246 <_reclaim_reent+0x8a>
 800d254:	4620      	mov	r0, r4
 800d256:	f000 f819 	bl	800d28c <_free_r>
 800d25a:	e7ba      	b.n	800d1d2 <_reclaim_reent+0x16>
 800d25c:	680e      	ldr	r6, [r1, #0]
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 f814 	bl	800d28c <_free_r>
 800d264:	4631      	mov	r1, r6
 800d266:	e7ef      	b.n	800d248 <_reclaim_reent+0x8c>
 800d268:	2500      	movs	r5, #0
 800d26a:	e7ef      	b.n	800d24c <_reclaim_reent+0x90>
 800d26c:	bd70      	pop	{r4, r5, r6, pc}
 800d26e:	bf00      	nop
 800d270:	20000014 	.word	0x20000014

0800d274 <__malloc_lock>:
 800d274:	4801      	ldr	r0, [pc, #4]	; (800d27c <__malloc_lock+0x8>)
 800d276:	f7ff bf7b 	b.w	800d170 <__retarget_lock_acquire_recursive>
 800d27a:	bf00      	nop
 800d27c:	20004fe0 	.word	0x20004fe0

0800d280 <__malloc_unlock>:
 800d280:	4801      	ldr	r0, [pc, #4]	; (800d288 <__malloc_unlock+0x8>)
 800d282:	f7ff bf76 	b.w	800d172 <__retarget_lock_release_recursive>
 800d286:	bf00      	nop
 800d288:	20004fe0 	.word	0x20004fe0

0800d28c <_free_r>:
 800d28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d28e:	2900      	cmp	r1, #0
 800d290:	d044      	beq.n	800d31c <_free_r+0x90>
 800d292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d296:	9001      	str	r0, [sp, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f1a1 0404 	sub.w	r4, r1, #4
 800d29e:	bfb8      	it	lt
 800d2a0:	18e4      	addlt	r4, r4, r3
 800d2a2:	f7ff ffe7 	bl	800d274 <__malloc_lock>
 800d2a6:	4a1e      	ldr	r2, [pc, #120]	; (800d320 <_free_r+0x94>)
 800d2a8:	9801      	ldr	r0, [sp, #4]
 800d2aa:	6813      	ldr	r3, [r2, #0]
 800d2ac:	b933      	cbnz	r3, 800d2bc <_free_r+0x30>
 800d2ae:	6063      	str	r3, [r4, #4]
 800d2b0:	6014      	str	r4, [r2, #0]
 800d2b2:	b003      	add	sp, #12
 800d2b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2b8:	f7ff bfe2 	b.w	800d280 <__malloc_unlock>
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	d908      	bls.n	800d2d2 <_free_r+0x46>
 800d2c0:	6825      	ldr	r5, [r4, #0]
 800d2c2:	1961      	adds	r1, r4, r5
 800d2c4:	428b      	cmp	r3, r1
 800d2c6:	bf01      	itttt	eq
 800d2c8:	6819      	ldreq	r1, [r3, #0]
 800d2ca:	685b      	ldreq	r3, [r3, #4]
 800d2cc:	1949      	addeq	r1, r1, r5
 800d2ce:	6021      	streq	r1, [r4, #0]
 800d2d0:	e7ed      	b.n	800d2ae <_free_r+0x22>
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	b10b      	cbz	r3, 800d2dc <_free_r+0x50>
 800d2d8:	42a3      	cmp	r3, r4
 800d2da:	d9fa      	bls.n	800d2d2 <_free_r+0x46>
 800d2dc:	6811      	ldr	r1, [r2, #0]
 800d2de:	1855      	adds	r5, r2, r1
 800d2e0:	42a5      	cmp	r5, r4
 800d2e2:	d10b      	bne.n	800d2fc <_free_r+0x70>
 800d2e4:	6824      	ldr	r4, [r4, #0]
 800d2e6:	4421      	add	r1, r4
 800d2e8:	1854      	adds	r4, r2, r1
 800d2ea:	42a3      	cmp	r3, r4
 800d2ec:	6011      	str	r1, [r2, #0]
 800d2ee:	d1e0      	bne.n	800d2b2 <_free_r+0x26>
 800d2f0:	681c      	ldr	r4, [r3, #0]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	6053      	str	r3, [r2, #4]
 800d2f6:	4421      	add	r1, r4
 800d2f8:	6011      	str	r1, [r2, #0]
 800d2fa:	e7da      	b.n	800d2b2 <_free_r+0x26>
 800d2fc:	d902      	bls.n	800d304 <_free_r+0x78>
 800d2fe:	230c      	movs	r3, #12
 800d300:	6003      	str	r3, [r0, #0]
 800d302:	e7d6      	b.n	800d2b2 <_free_r+0x26>
 800d304:	6825      	ldr	r5, [r4, #0]
 800d306:	1961      	adds	r1, r4, r5
 800d308:	428b      	cmp	r3, r1
 800d30a:	bf04      	itt	eq
 800d30c:	6819      	ldreq	r1, [r3, #0]
 800d30e:	685b      	ldreq	r3, [r3, #4]
 800d310:	6063      	str	r3, [r4, #4]
 800d312:	bf04      	itt	eq
 800d314:	1949      	addeq	r1, r1, r5
 800d316:	6021      	streq	r1, [r4, #0]
 800d318:	6054      	str	r4, [r2, #4]
 800d31a:	e7ca      	b.n	800d2b2 <_free_r+0x26>
 800d31c:	b003      	add	sp, #12
 800d31e:	bd30      	pop	{r4, r5, pc}
 800d320:	20004fe4 	.word	0x20004fe4

0800d324 <llroundf>:
 800d324:	ee10 0a10 	vmov	r0, s0
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800d32e:	2800      	cmp	r0, #0
 800d330:	f1a5 047f 	sub.w	r4, r5, #127	; 0x7f
 800d334:	bfb4      	ite	lt
 800d336:	f04f 32ff 	movlt.w	r2, #4294967295
 800d33a:	2201      	movge	r2, #1
 800d33c:	2c3e      	cmp	r4, #62	; 0x3e
 800d33e:	dc2a      	bgt.n	800d396 <llroundf+0x72>
 800d340:	2c00      	cmp	r4, #0
 800d342:	da05      	bge.n	800d350 <llroundf+0x2c>
 800d344:	3401      	adds	r4, #1
 800d346:	bf18      	it	ne
 800d348:	2200      	movne	r2, #0
 800d34a:	4610      	mov	r0, r2
 800d34c:	17d1      	asrs	r1, r2, #31
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800d354:	2c16      	cmp	r4, #22
 800d356:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800d35a:	dd13      	ble.n	800d384 <llroundf+0x60>
 800d35c:	f1a5 0396 	sub.w	r3, r5, #150	; 0x96
 800d360:	f1a5 04b6 	sub.w	r4, r5, #182	; 0xb6
 800d364:	f1c5 05b6 	rsb	r5, r5, #182	; 0xb6
 800d368:	fa01 f404 	lsl.w	r4, r1, r4
 800d36c:	fa21 f505 	lsr.w	r5, r1, r5
 800d370:	432c      	orrs	r4, r5
 800d372:	4099      	lsls	r1, r3
 800d374:	17d3      	asrs	r3, r2, #31
 800d376:	4354      	muls	r4, r2
 800d378:	fb01 4403 	mla	r4, r1, r3, r4
 800d37c:	fba2 0101 	umull	r0, r1, r2, r1
 800d380:	4421      	add	r1, r4
 800d382:	e7e4      	b.n	800d34e <llroundf+0x2a>
 800d384:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d388:	4123      	asrs	r3, r4
 800d38a:	4419      	add	r1, r3
 800d38c:	f1c4 0417 	rsb	r4, r4, #23
 800d390:	40e1      	lsrs	r1, r4
 800d392:	2400      	movs	r4, #0
 800d394:	e7ee      	b.n	800d374 <llroundf+0x50>
 800d396:	f7f3 f841 	bl	800041c <__aeabi_f2lz>
 800d39a:	e7d8      	b.n	800d34e <llroundf+0x2a>

0800d39c <_init>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	bf00      	nop
 800d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a2:	bc08      	pop	{r3}
 800d3a4:	469e      	mov	lr, r3
 800d3a6:	4770      	bx	lr

0800d3a8 <_fini>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	bf00      	nop
 800d3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ae:	bc08      	pop	{r3}
 800d3b0:	469e      	mov	lr, r3
 800d3b2:	4770      	bx	lr
