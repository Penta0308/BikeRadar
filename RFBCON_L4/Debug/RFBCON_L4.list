
RFBCON_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab04  0800ab04  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab0c  0800ab0c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab0c  0800ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab10  0800ab10  0001ab10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ab14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027c8  20000078  0800ab8c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002840  0800ab8c  00022840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021618  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000509b  00000000  00000000  000416c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  00046760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a70  00000000  00000000  00048418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a346  00000000  00000000  00049e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000227d3  00000000  00000000  000741ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2c1f  00000000  00000000  000969a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001895c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c34  00000000  00000000  00189610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a940 	.word	0x0800a940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a940 	.word	0x0800a940

080001d0 <__aeabi_frsub>:
 80001d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__addsf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_fsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001dc <__addsf3>:
 80001dc:	0042      	lsls	r2, r0, #1
 80001de:	bf1f      	itttt	ne
 80001e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e4:	ea92 0f03 	teqne	r2, r3
 80001e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f0:	d06a      	beq.n	80002c8 <__addsf3+0xec>
 80001f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fa:	bfc1      	itttt	gt
 80001fc:	18d2      	addgt	r2, r2, r3
 80001fe:	4041      	eorgt	r1, r0
 8000200:	4048      	eorgt	r0, r1
 8000202:	4041      	eorgt	r1, r0
 8000204:	bfb8      	it	lt
 8000206:	425b      	neglt	r3, r3
 8000208:	2b19      	cmp	r3, #25
 800020a:	bf88      	it	hi
 800020c:	4770      	bxhi	lr
 800020e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000216:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800021a:	bf18      	it	ne
 800021c:	4240      	negne	r0, r0
 800021e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000222:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000226:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800022a:	bf18      	it	ne
 800022c:	4249      	negne	r1, r1
 800022e:	ea92 0f03 	teq	r2, r3
 8000232:	d03f      	beq.n	80002b4 <__addsf3+0xd8>
 8000234:	f1a2 0201 	sub.w	r2, r2, #1
 8000238:	fa41 fc03 	asr.w	ip, r1, r3
 800023c:	eb10 000c 	adds.w	r0, r0, ip
 8000240:	f1c3 0320 	rsb	r3, r3, #32
 8000244:	fa01 f103 	lsl.w	r1, r1, r3
 8000248:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800024c:	d502      	bpl.n	8000254 <__addsf3+0x78>
 800024e:	4249      	negs	r1, r1
 8000250:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000254:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000258:	d313      	bcc.n	8000282 <__addsf3+0xa6>
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d306      	bcc.n	800026e <__addsf3+0x92>
 8000260:	0840      	lsrs	r0, r0, #1
 8000262:	ea4f 0131 	mov.w	r1, r1, rrx
 8000266:	f102 0201 	add.w	r2, r2, #1
 800026a:	2afe      	cmp	r2, #254	; 0xfe
 800026c:	d251      	bcs.n	8000312 <__addsf3+0x136>
 800026e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000272:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000276:	bf08      	it	eq
 8000278:	f020 0001 	biceq.w	r0, r0, #1
 800027c:	ea40 0003 	orr.w	r0, r0, r3
 8000280:	4770      	bx	lr
 8000282:	0049      	lsls	r1, r1, #1
 8000284:	eb40 0000 	adc.w	r0, r0, r0
 8000288:	3a01      	subs	r2, #1
 800028a:	bf28      	it	cs
 800028c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000290:	d2ed      	bcs.n	800026e <__addsf3+0x92>
 8000292:	fab0 fc80 	clz	ip, r0
 8000296:	f1ac 0c08 	sub.w	ip, ip, #8
 800029a:	ebb2 020c 	subs.w	r2, r2, ip
 800029e:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a2:	bfaa      	itet	ge
 80002a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a8:	4252      	neglt	r2, r2
 80002aa:	4318      	orrge	r0, r3
 80002ac:	bfbc      	itt	lt
 80002ae:	40d0      	lsrlt	r0, r2
 80002b0:	4318      	orrlt	r0, r3
 80002b2:	4770      	bx	lr
 80002b4:	f092 0f00 	teq	r2, #0
 80002b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002bc:	bf06      	itte	eq
 80002be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002c2:	3201      	addeq	r2, #1
 80002c4:	3b01      	subne	r3, #1
 80002c6:	e7b5      	b.n	8000234 <__addsf3+0x58>
 80002c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d0:	bf18      	it	ne
 80002d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d6:	d021      	beq.n	800031c <__addsf3+0x140>
 80002d8:	ea92 0f03 	teq	r2, r3
 80002dc:	d004      	beq.n	80002e8 <__addsf3+0x10c>
 80002de:	f092 0f00 	teq	r2, #0
 80002e2:	bf08      	it	eq
 80002e4:	4608      	moveq	r0, r1
 80002e6:	4770      	bx	lr
 80002e8:	ea90 0f01 	teq	r0, r1
 80002ec:	bf1c      	itt	ne
 80002ee:	2000      	movne	r0, #0
 80002f0:	4770      	bxne	lr
 80002f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002f6:	d104      	bne.n	8000302 <__addsf3+0x126>
 80002f8:	0040      	lsls	r0, r0, #1
 80002fa:	bf28      	it	cs
 80002fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000300:	4770      	bx	lr
 8000302:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000306:	bf3c      	itt	cc
 8000308:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800030c:	4770      	bxcc	lr
 800030e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000312:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000316:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031a:	4770      	bx	lr
 800031c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000320:	bf16      	itet	ne
 8000322:	4608      	movne	r0, r1
 8000324:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000328:	4601      	movne	r1, r0
 800032a:	0242      	lsls	r2, r0, #9
 800032c:	bf06      	itte	eq
 800032e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000332:	ea90 0f01 	teqeq	r0, r1
 8000336:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800033a:	4770      	bx	lr

0800033c <__aeabi_ui2f>:
 800033c:	f04f 0300 	mov.w	r3, #0
 8000340:	e004      	b.n	800034c <__aeabi_i2f+0x8>
 8000342:	bf00      	nop

08000344 <__aeabi_i2f>:
 8000344:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000348:	bf48      	it	mi
 800034a:	4240      	negmi	r0, r0
 800034c:	ea5f 0c00 	movs.w	ip, r0
 8000350:	bf08      	it	eq
 8000352:	4770      	bxeq	lr
 8000354:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000358:	4601      	mov	r1, r0
 800035a:	f04f 0000 	mov.w	r0, #0
 800035e:	e01c      	b.n	800039a <__aeabi_l2f+0x2a>

08000360 <__aeabi_ul2f>:
 8000360:	ea50 0201 	orrs.w	r2, r0, r1
 8000364:	bf08      	it	eq
 8000366:	4770      	bxeq	lr
 8000368:	f04f 0300 	mov.w	r3, #0
 800036c:	e00a      	b.n	8000384 <__aeabi_l2f+0x14>
 800036e:	bf00      	nop

08000370 <__aeabi_l2f>:
 8000370:	ea50 0201 	orrs.w	r2, r0, r1
 8000374:	bf08      	it	eq
 8000376:	4770      	bxeq	lr
 8000378:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800037c:	d502      	bpl.n	8000384 <__aeabi_l2f+0x14>
 800037e:	4240      	negs	r0, r0
 8000380:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000384:	ea5f 0c01 	movs.w	ip, r1
 8000388:	bf02      	ittt	eq
 800038a:	4684      	moveq	ip, r0
 800038c:	4601      	moveq	r1, r0
 800038e:	2000      	moveq	r0, #0
 8000390:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000394:	bf08      	it	eq
 8000396:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800039a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800039e:	fabc f28c 	clz	r2, ip
 80003a2:	3a08      	subs	r2, #8
 80003a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a8:	db10      	blt.n	80003cc <__aeabi_l2f+0x5c>
 80003aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ae:	4463      	add	r3, ip
 80003b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b4:	f1c2 0220 	rsb	r2, r2, #32
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	fa20 f202 	lsr.w	r2, r0, r2
 80003c0:	eb43 0002 	adc.w	r0, r3, r2
 80003c4:	bf08      	it	eq
 80003c6:	f020 0001 	biceq.w	r0, r0, #1
 80003ca:	4770      	bx	lr
 80003cc:	f102 0220 	add.w	r2, r2, #32
 80003d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d4:	f1c2 0220 	rsb	r2, r2, #32
 80003d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003dc:	fa21 f202 	lsr.w	r2, r1, r2
 80003e0:	eb43 0002 	adc.w	r0, r3, r2
 80003e4:	bf08      	it	eq
 80003e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ea:	4770      	bx	lr

080003ec <__aeabi_uldivmod>:
 80003ec:	b953      	cbnz	r3, 8000404 <__aeabi_uldivmod+0x18>
 80003ee:	b94a      	cbnz	r2, 8000404 <__aeabi_uldivmod+0x18>
 80003f0:	2900      	cmp	r1, #0
 80003f2:	bf08      	it	eq
 80003f4:	2800      	cmpeq	r0, #0
 80003f6:	bf1c      	itt	ne
 80003f8:	f04f 31ff 	movne.w	r1, #4294967295
 80003fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000400:	f000 bad2 	b.w	80009a8 <__aeabi_idiv0>
 8000404:	f1ad 0c08 	sub.w	ip, sp, #8
 8000408:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800040c:	f000 f83a 	bl	8000484 <__udivmoddi4>
 8000410:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000418:	b004      	add	sp, #16
 800041a:	4770      	bx	lr

0800041c <__aeabi_f2lz>:
 800041c:	ee07 0a90 	vmov	s15, r0
 8000420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000428:	d401      	bmi.n	800042e <__aeabi_f2lz+0x12>
 800042a:	f000 b80b 	b.w	8000444 <__aeabi_f2ulz>
 800042e:	eef1 7a67 	vneg.f32	s15, s15
 8000432:	b508      	push	{r3, lr}
 8000434:	ee17 0a90 	vmov	r0, s15
 8000438:	f000 f804 	bl	8000444 <__aeabi_f2ulz>
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	bd08      	pop	{r3, pc}

08000444 <__aeabi_f2ulz>:
 8000444:	b5d0      	push	{r4, r6, r7, lr}
 8000446:	f000 fc15 	bl	8000c74 <__aeabi_f2d>
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <__aeabi_f2ulz+0x38>)
 800044c:	2200      	movs	r2, #0
 800044e:	4606      	mov	r6, r0
 8000450:	460f      	mov	r7, r1
 8000452:	f000 f97f 	bl	8000754 <__aeabi_dmul>
 8000456:	f000 fc65 	bl	8000d24 <__aeabi_d2uiz>
 800045a:	4604      	mov	r4, r0
 800045c:	f000 fbe8 	bl	8000c30 <__aeabi_ui2d>
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <__aeabi_f2ulz+0x3c>)
 8000462:	2200      	movs	r2, #0
 8000464:	f000 f976 	bl	8000754 <__aeabi_dmul>
 8000468:	4602      	mov	r2, r0
 800046a:	460b      	mov	r3, r1
 800046c:	4630      	mov	r0, r6
 800046e:	4639      	mov	r1, r7
 8000470:	f000 faa0 	bl	80009b4 <__aeabi_dsub>
 8000474:	f000 fc56 	bl	8000d24 <__aeabi_d2uiz>
 8000478:	4621      	mov	r1, r4
 800047a:	bdd0      	pop	{r4, r6, r7, pc}
 800047c:	3df00000 	.word	0x3df00000
 8000480:	41f00000 	.word	0x41f00000

08000484 <__udivmoddi4>:
 8000484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000488:	9d08      	ldr	r5, [sp, #32]
 800048a:	4604      	mov	r4, r0
 800048c:	468e      	mov	lr, r1
 800048e:	2b00      	cmp	r3, #0
 8000490:	d14d      	bne.n	800052e <__udivmoddi4+0xaa>
 8000492:	428a      	cmp	r2, r1
 8000494:	4694      	mov	ip, r2
 8000496:	d969      	bls.n	800056c <__udivmoddi4+0xe8>
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	b152      	cbz	r2, 80004b4 <__udivmoddi4+0x30>
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	f1c2 0120 	rsb	r1, r2, #32
 80004a6:	fa20 f101 	lsr.w	r1, r0, r1
 80004aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ae:	ea41 0e03 	orr.w	lr, r1, r3
 80004b2:	4094      	lsls	r4, r2
 80004b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b8:	0c21      	lsrs	r1, r4, #16
 80004ba:	fbbe f6f8 	udiv	r6, lr, r8
 80004be:	fa1f f78c 	uxth.w	r7, ip
 80004c2:	fb08 e316 	mls	r3, r8, r6, lr
 80004c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004ca:	fb06 f107 	mul.w	r1, r6, r7
 80004ce:	4299      	cmp	r1, r3
 80004d0:	d90a      	bls.n	80004e8 <__udivmoddi4+0x64>
 80004d2:	eb1c 0303 	adds.w	r3, ip, r3
 80004d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80004da:	f080 811f 	bcs.w	800071c <__udivmoddi4+0x298>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 811c 	bls.w	800071c <__udivmoddi4+0x298>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f0:	fb08 3310 	mls	r3, r8, r0, r3
 80004f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f8:	fb00 f707 	mul.w	r7, r0, r7
 80004fc:	42a7      	cmp	r7, r4
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x92>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f100 33ff 	add.w	r3, r0, #4294967295
 8000508:	f080 810a 	bcs.w	8000720 <__udivmoddi4+0x29c>
 800050c:	42a7      	cmp	r7, r4
 800050e:	f240 8107 	bls.w	8000720 <__udivmoddi4+0x29c>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800051a:	1be4      	subs	r4, r4, r7
 800051c:	2600      	movs	r6, #0
 800051e:	b11d      	cbz	r5, 8000528 <__udivmoddi4+0xa4>
 8000520:	40d4      	lsrs	r4, r2
 8000522:	2300      	movs	r3, #0
 8000524:	e9c5 4300 	strd	r4, r3, [r5]
 8000528:	4631      	mov	r1, r6
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	428b      	cmp	r3, r1
 8000530:	d909      	bls.n	8000546 <__udivmoddi4+0xc2>
 8000532:	2d00      	cmp	r5, #0
 8000534:	f000 80ef 	beq.w	8000716 <__udivmoddi4+0x292>
 8000538:	2600      	movs	r6, #0
 800053a:	e9c5 0100 	strd	r0, r1, [r5]
 800053e:	4630      	mov	r0, r6
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	fab3 f683 	clz	r6, r3
 800054a:	2e00      	cmp	r6, #0
 800054c:	d14a      	bne.n	80005e4 <__udivmoddi4+0x160>
 800054e:	428b      	cmp	r3, r1
 8000550:	d302      	bcc.n	8000558 <__udivmoddi4+0xd4>
 8000552:	4282      	cmp	r2, r0
 8000554:	f200 80f9 	bhi.w	800074a <__udivmoddi4+0x2c6>
 8000558:	1a84      	subs	r4, r0, r2
 800055a:	eb61 0303 	sbc.w	r3, r1, r3
 800055e:	2001      	movs	r0, #1
 8000560:	469e      	mov	lr, r3
 8000562:	2d00      	cmp	r5, #0
 8000564:	d0e0      	beq.n	8000528 <__udivmoddi4+0xa4>
 8000566:	e9c5 4e00 	strd	r4, lr, [r5]
 800056a:	e7dd      	b.n	8000528 <__udivmoddi4+0xa4>
 800056c:	b902      	cbnz	r2, 8000570 <__udivmoddi4+0xec>
 800056e:	deff      	udf	#255	; 0xff
 8000570:	fab2 f282 	clz	r2, r2
 8000574:	2a00      	cmp	r2, #0
 8000576:	f040 8092 	bne.w	800069e <__udivmoddi4+0x21a>
 800057a:	eba1 010c 	sub.w	r1, r1, ip
 800057e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000582:	fa1f fe8c 	uxth.w	lr, ip
 8000586:	2601      	movs	r6, #1
 8000588:	0c20      	lsrs	r0, r4, #16
 800058a:	fbb1 f3f7 	udiv	r3, r1, r7
 800058e:	fb07 1113 	mls	r1, r7, r3, r1
 8000592:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000596:	fb0e f003 	mul.w	r0, lr, r3
 800059a:	4288      	cmp	r0, r1
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x12c>
 800059e:	eb1c 0101 	adds.w	r1, ip, r1
 80005a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80005a6:	d202      	bcs.n	80005ae <__udivmoddi4+0x12a>
 80005a8:	4288      	cmp	r0, r1
 80005aa:	f200 80cb 	bhi.w	8000744 <__udivmoddi4+0x2c0>
 80005ae:	4643      	mov	r3, r8
 80005b0:	1a09      	subs	r1, r1, r0
 80005b2:	b2a4      	uxth	r4, r4
 80005b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b8:	fb07 1110 	mls	r1, r7, r0, r1
 80005bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005c0:	fb0e fe00 	mul.w	lr, lr, r0
 80005c4:	45a6      	cmp	lr, r4
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x156>
 80005c8:	eb1c 0404 	adds.w	r4, ip, r4
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d202      	bcs.n	80005d8 <__udivmoddi4+0x154>
 80005d2:	45a6      	cmp	lr, r4
 80005d4:	f200 80bb 	bhi.w	800074e <__udivmoddi4+0x2ca>
 80005d8:	4608      	mov	r0, r1
 80005da:	eba4 040e 	sub.w	r4, r4, lr
 80005de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005e2:	e79c      	b.n	800051e <__udivmoddi4+0x9a>
 80005e4:	f1c6 0720 	rsb	r7, r6, #32
 80005e8:	40b3      	lsls	r3, r6
 80005ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80005f2:	fa20 f407 	lsr.w	r4, r0, r7
 80005f6:	fa01 f306 	lsl.w	r3, r1, r6
 80005fa:	431c      	orrs	r4, r3
 80005fc:	40f9      	lsrs	r1, r7
 80005fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000602:	fa00 f306 	lsl.w	r3, r0, r6
 8000606:	fbb1 f8f9 	udiv	r8, r1, r9
 800060a:	0c20      	lsrs	r0, r4, #16
 800060c:	fa1f fe8c 	uxth.w	lr, ip
 8000610:	fb09 1118 	mls	r1, r9, r8, r1
 8000614:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000618:	fb08 f00e 	mul.w	r0, r8, lr
 800061c:	4288      	cmp	r0, r1
 800061e:	fa02 f206 	lsl.w	r2, r2, r6
 8000622:	d90b      	bls.n	800063c <__udivmoddi4+0x1b8>
 8000624:	eb1c 0101 	adds.w	r1, ip, r1
 8000628:	f108 3aff 	add.w	sl, r8, #4294967295
 800062c:	f080 8088 	bcs.w	8000740 <__udivmoddi4+0x2bc>
 8000630:	4288      	cmp	r0, r1
 8000632:	f240 8085 	bls.w	8000740 <__udivmoddi4+0x2bc>
 8000636:	f1a8 0802 	sub.w	r8, r8, #2
 800063a:	4461      	add	r1, ip
 800063c:	1a09      	subs	r1, r1, r0
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb1 f0f9 	udiv	r0, r1, r9
 8000644:	fb09 1110 	mls	r1, r9, r0, r1
 8000648:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800064c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000650:	458e      	cmp	lr, r1
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x1e2>
 8000654:	eb1c 0101 	adds.w	r1, ip, r1
 8000658:	f100 34ff 	add.w	r4, r0, #4294967295
 800065c:	d26c      	bcs.n	8000738 <__udivmoddi4+0x2b4>
 800065e:	458e      	cmp	lr, r1
 8000660:	d96a      	bls.n	8000738 <__udivmoddi4+0x2b4>
 8000662:	3802      	subs	r0, #2
 8000664:	4461      	add	r1, ip
 8000666:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800066a:	fba0 9402 	umull	r9, r4, r0, r2
 800066e:	eba1 010e 	sub.w	r1, r1, lr
 8000672:	42a1      	cmp	r1, r4
 8000674:	46c8      	mov	r8, r9
 8000676:	46a6      	mov	lr, r4
 8000678:	d356      	bcc.n	8000728 <__udivmoddi4+0x2a4>
 800067a:	d053      	beq.n	8000724 <__udivmoddi4+0x2a0>
 800067c:	b15d      	cbz	r5, 8000696 <__udivmoddi4+0x212>
 800067e:	ebb3 0208 	subs.w	r2, r3, r8
 8000682:	eb61 010e 	sbc.w	r1, r1, lr
 8000686:	fa01 f707 	lsl.w	r7, r1, r7
 800068a:	fa22 f306 	lsr.w	r3, r2, r6
 800068e:	40f1      	lsrs	r1, r6
 8000690:	431f      	orrs	r7, r3
 8000692:	e9c5 7100 	strd	r7, r1, [r5]
 8000696:	2600      	movs	r6, #0
 8000698:	4631      	mov	r1, r6
 800069a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069e:	f1c2 0320 	rsb	r3, r2, #32
 80006a2:	40d8      	lsrs	r0, r3
 80006a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a8:	fa21 f303 	lsr.w	r3, r1, r3
 80006ac:	4091      	lsls	r1, r2
 80006ae:	4301      	orrs	r1, r0
 80006b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b4:	fa1f fe8c 	uxth.w	lr, ip
 80006b8:	fbb3 f0f7 	udiv	r0, r3, r7
 80006bc:	fb07 3610 	mls	r6, r7, r0, r3
 80006c0:	0c0b      	lsrs	r3, r1, #16
 80006c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006c6:	fb00 f60e 	mul.w	r6, r0, lr
 80006ca:	429e      	cmp	r6, r3
 80006cc:	fa04 f402 	lsl.w	r4, r4, r2
 80006d0:	d908      	bls.n	80006e4 <__udivmoddi4+0x260>
 80006d2:	eb1c 0303 	adds.w	r3, ip, r3
 80006d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80006da:	d22f      	bcs.n	800073c <__udivmoddi4+0x2b8>
 80006dc:	429e      	cmp	r6, r3
 80006de:	d92d      	bls.n	800073c <__udivmoddi4+0x2b8>
 80006e0:	3802      	subs	r0, #2
 80006e2:	4463      	add	r3, ip
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	b289      	uxth	r1, r1
 80006e8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006ec:	fb07 3316 	mls	r3, r7, r6, r3
 80006f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f4:	fb06 f30e 	mul.w	r3, r6, lr
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d908      	bls.n	800070e <__udivmoddi4+0x28a>
 80006fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000700:	f106 38ff 	add.w	r8, r6, #4294967295
 8000704:	d216      	bcs.n	8000734 <__udivmoddi4+0x2b0>
 8000706:	428b      	cmp	r3, r1
 8000708:	d914      	bls.n	8000734 <__udivmoddi4+0x2b0>
 800070a:	3e02      	subs	r6, #2
 800070c:	4461      	add	r1, ip
 800070e:	1ac9      	subs	r1, r1, r3
 8000710:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000714:	e738      	b.n	8000588 <__udivmoddi4+0x104>
 8000716:	462e      	mov	r6, r5
 8000718:	4628      	mov	r0, r5
 800071a:	e705      	b.n	8000528 <__udivmoddi4+0xa4>
 800071c:	4606      	mov	r6, r0
 800071e:	e6e3      	b.n	80004e8 <__udivmoddi4+0x64>
 8000720:	4618      	mov	r0, r3
 8000722:	e6f8      	b.n	8000516 <__udivmoddi4+0x92>
 8000724:	454b      	cmp	r3, r9
 8000726:	d2a9      	bcs.n	800067c <__udivmoddi4+0x1f8>
 8000728:	ebb9 0802 	subs.w	r8, r9, r2
 800072c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000730:	3801      	subs	r0, #1
 8000732:	e7a3      	b.n	800067c <__udivmoddi4+0x1f8>
 8000734:	4646      	mov	r6, r8
 8000736:	e7ea      	b.n	800070e <__udivmoddi4+0x28a>
 8000738:	4620      	mov	r0, r4
 800073a:	e794      	b.n	8000666 <__udivmoddi4+0x1e2>
 800073c:	4640      	mov	r0, r8
 800073e:	e7d1      	b.n	80006e4 <__udivmoddi4+0x260>
 8000740:	46d0      	mov	r8, sl
 8000742:	e77b      	b.n	800063c <__udivmoddi4+0x1b8>
 8000744:	3b02      	subs	r3, #2
 8000746:	4461      	add	r1, ip
 8000748:	e732      	b.n	80005b0 <__udivmoddi4+0x12c>
 800074a:	4630      	mov	r0, r6
 800074c:	e709      	b.n	8000562 <__udivmoddi4+0xde>
 800074e:	4464      	add	r4, ip
 8000750:	3802      	subs	r0, #2
 8000752:	e742      	b.n	80005da <__udivmoddi4+0x156>

08000754 <__aeabi_dmul>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8de 	bleq	8000930 <__aeabi_dmul+0x1dc>
 8000774:	442c      	add	r4, r5
 8000776:	ea81 0603 	eor.w	r6, r1, r3
 800077a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800077e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000782:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000786:	bf18      	it	ne
 8000788:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000794:	d038      	beq.n	8000808 <__aeabi_dmul+0xb4>
 8000796:	fba0 ce02 	umull	ip, lr, r0, r2
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80007a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007aa:	f04f 0600 	mov.w	r6, #0
 80007ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007b2:	f09c 0f00 	teq	ip, #0
 80007b6:	bf18      	it	ne
 80007b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80007bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007c8:	d204      	bcs.n	80007d4 <__aeabi_dmul+0x80>
 80007ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ce:	416d      	adcs	r5, r5
 80007d0:	eb46 0606 	adc.w	r6, r6, r6
 80007d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007ec:	bf88      	it	hi
 80007ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007f2:	d81e      	bhi.n	8000832 <__aeabi_dmul+0xde>
 80007f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007f8:	bf08      	it	eq
 80007fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007fe:	f150 0000 	adcs.w	r0, r0, #0
 8000802:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800080c:	ea46 0101 	orr.w	r1, r6, r1
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800081c:	bfc2      	ittt	gt
 800081e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000826:	bd70      	popgt	{r4, r5, r6, pc}
 8000828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082c:	f04f 0e00 	mov.w	lr, #0
 8000830:	3c01      	subs	r4, #1
 8000832:	f300 80ab 	bgt.w	800098c <__aeabi_dmul+0x238>
 8000836:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800083a:	bfde      	ittt	le
 800083c:	2000      	movle	r0, #0
 800083e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000842:	bd70      	pople	{r4, r5, r6, pc}
 8000844:	f1c4 0400 	rsb	r4, r4, #0
 8000848:	3c20      	subs	r4, #32
 800084a:	da35      	bge.n	80008b8 <__aeabi_dmul+0x164>
 800084c:	340c      	adds	r4, #12
 800084e:	dc1b      	bgt.n	8000888 <__aeabi_dmul+0x134>
 8000850:	f104 0414 	add.w	r4, r4, #20
 8000854:	f1c4 0520 	rsb	r5, r4, #32
 8000858:	fa00 f305 	lsl.w	r3, r0, r5
 800085c:	fa20 f004 	lsr.w	r0, r0, r4
 8000860:	fa01 f205 	lsl.w	r2, r1, r5
 8000864:	ea40 0002 	orr.w	r0, r0, r2
 8000868:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800086c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000874:	fa21 f604 	lsr.w	r6, r1, r4
 8000878:	eb42 0106 	adc.w	r1, r2, r6
 800087c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000880:	bf08      	it	eq
 8000882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f1c4 040c 	rsb	r4, r4, #12
 800088c:	f1c4 0520 	rsb	r5, r4, #32
 8000890:	fa00 f304 	lsl.w	r3, r0, r4
 8000894:	fa20 f005 	lsr.w	r0, r0, r5
 8000898:	fa01 f204 	lsl.w	r2, r1, r4
 800089c:	ea40 0002 	orr.w	r0, r0, r2
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008a8:	f141 0100 	adc.w	r1, r1, #0
 80008ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b0:	bf08      	it	eq
 80008b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f1c4 0520 	rsb	r5, r4, #32
 80008bc:	fa00 f205 	lsl.w	r2, r0, r5
 80008c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80008c4:	fa20 f304 	lsr.w	r3, r0, r4
 80008c8:	fa01 f205 	lsl.w	r2, r1, r5
 80008cc:	ea43 0302 	orr.w	r3, r3, r2
 80008d0:	fa21 f004 	lsr.w	r0, r1, r4
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	fa21 f204 	lsr.w	r2, r1, r4
 80008dc:	ea20 0002 	bic.w	r0, r0, r2
 80008e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008e8:	bf08      	it	eq
 80008ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f094 0f00 	teq	r4, #0
 80008f4:	d10f      	bne.n	8000916 <__aeabi_dmul+0x1c2>
 80008f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008fa:	0040      	lsls	r0, r0, #1
 80008fc:	eb41 0101 	adc.w	r1, r1, r1
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf08      	it	eq
 8000906:	3c01      	subeq	r4, #1
 8000908:	d0f7      	beq.n	80008fa <__aeabi_dmul+0x1a6>
 800090a:	ea41 0106 	orr.w	r1, r1, r6
 800090e:	f095 0f00 	teq	r5, #0
 8000912:	bf18      	it	ne
 8000914:	4770      	bxne	lr
 8000916:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800091a:	0052      	lsls	r2, r2, #1
 800091c:	eb43 0303 	adc.w	r3, r3, r3
 8000920:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000924:	bf08      	it	eq
 8000926:	3d01      	subeq	r5, #1
 8000928:	d0f7      	beq.n	800091a <__aeabi_dmul+0x1c6>
 800092a:	ea43 0306 	orr.w	r3, r3, r6
 800092e:	4770      	bx	lr
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000938:	bf18      	it	ne
 800093a:	ea95 0f0c 	teqne	r5, ip
 800093e:	d00c      	beq.n	800095a <__aeabi_dmul+0x206>
 8000940:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000944:	bf18      	it	ne
 8000946:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094a:	d1d1      	bne.n	80008f0 <__aeabi_dmul+0x19c>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095e:	bf06      	itte	eq
 8000960:	4610      	moveq	r0, r2
 8000962:	4619      	moveq	r1, r3
 8000964:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000968:	d019      	beq.n	800099e <__aeabi_dmul+0x24a>
 800096a:	ea94 0f0c 	teq	r4, ip
 800096e:	d102      	bne.n	8000976 <__aeabi_dmul+0x222>
 8000970:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000974:	d113      	bne.n	800099e <__aeabi_dmul+0x24a>
 8000976:	ea95 0f0c 	teq	r5, ip
 800097a:	d105      	bne.n	8000988 <__aeabi_dmul+0x234>
 800097c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000980:	bf1c      	itt	ne
 8000982:	4610      	movne	r0, r2
 8000984:	4619      	movne	r1, r3
 8000986:	d10a      	bne.n	800099e <__aeabi_dmul+0x24a>
 8000988:	ea81 0103 	eor.w	r1, r1, r3
 800098c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000990:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000994:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80009a6:	bd70      	pop	{r4, r5, r6, pc}

080009a8 <__aeabi_idiv0>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_drsub>:
 80009ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__adddf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_dsub>:
 80009b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080009b8 <__adddf3>:
 80009b8:	b530      	push	{r4, r5, lr}
 80009ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80009be:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80009c2:	ea94 0f05 	teq	r4, r5
 80009c6:	bf08      	it	eq
 80009c8:	ea90 0f02 	teqeq	r0, r2
 80009cc:	bf1f      	itttt	ne
 80009ce:	ea54 0c00 	orrsne.w	ip, r4, r0
 80009d2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80009d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80009da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80009de:	f000 80e2 	beq.w	8000ba6 <__adddf3+0x1ee>
 80009e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80009e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80009ea:	bfb8      	it	lt
 80009ec:	426d      	neglt	r5, r5
 80009ee:	dd0c      	ble.n	8000a0a <__adddf3+0x52>
 80009f0:	442c      	add	r4, r5
 80009f2:	ea80 0202 	eor.w	r2, r0, r2
 80009f6:	ea81 0303 	eor.w	r3, r1, r3
 80009fa:	ea82 0000 	eor.w	r0, r2, r0
 80009fe:	ea83 0101 	eor.w	r1, r3, r1
 8000a02:	ea80 0202 	eor.w	r2, r0, r2
 8000a06:	ea81 0303 	eor.w	r3, r1, r3
 8000a0a:	2d36      	cmp	r5, #54	; 0x36
 8000a0c:	bf88      	it	hi
 8000a0e:	bd30      	pophi	{r4, r5, pc}
 8000a10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000a1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000a20:	d002      	beq.n	8000a28 <__adddf3+0x70>
 8000a22:	4240      	negs	r0, r0
 8000a24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000a2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000a34:	d002      	beq.n	8000a3c <__adddf3+0x84>
 8000a36:	4252      	negs	r2, r2
 8000a38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a3c:	ea94 0f05 	teq	r4, r5
 8000a40:	f000 80a7 	beq.w	8000b92 <__adddf3+0x1da>
 8000a44:	f1a4 0401 	sub.w	r4, r4, #1
 8000a48:	f1d5 0e20 	rsbs	lr, r5, #32
 8000a4c:	db0d      	blt.n	8000a6a <__adddf3+0xb2>
 8000a4e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000a52:	fa22 f205 	lsr.w	r2, r2, r5
 8000a56:	1880      	adds	r0, r0, r2
 8000a58:	f141 0100 	adc.w	r1, r1, #0
 8000a5c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000a60:	1880      	adds	r0, r0, r2
 8000a62:	fa43 f305 	asr.w	r3, r3, r5
 8000a66:	4159      	adcs	r1, r3
 8000a68:	e00e      	b.n	8000a88 <__adddf3+0xd0>
 8000a6a:	f1a5 0520 	sub.w	r5, r5, #32
 8000a6e:	f10e 0e20 	add.w	lr, lr, #32
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000a78:	bf28      	it	cs
 8000a7a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000a7e:	fa43 f305 	asr.w	r3, r3, r5
 8000a82:	18c0      	adds	r0, r0, r3
 8000a84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a8c:	d507      	bpl.n	8000a9e <__adddf3+0xe6>
 8000a8e:	f04f 0e00 	mov.w	lr, #0
 8000a92:	f1dc 0c00 	rsbs	ip, ip, #0
 8000a96:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000a9a:	eb6e 0101 	sbc.w	r1, lr, r1
 8000a9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000aa2:	d31b      	bcc.n	8000adc <__adddf3+0x124>
 8000aa4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000aa8:	d30c      	bcc.n	8000ac4 <__adddf3+0x10c>
 8000aaa:	0849      	lsrs	r1, r1, #1
 8000aac:	ea5f 0030 	movs.w	r0, r0, rrx
 8000ab0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000ab4:	f104 0401 	add.w	r4, r4, #1
 8000ab8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000abc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000ac0:	f080 809a 	bcs.w	8000bf8 <__adddf3+0x240>
 8000ac4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ace:	f150 0000 	adcs.w	r0, r0, #0
 8000ad2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ad6:	ea41 0105 	orr.w	r1, r1, r5
 8000ada:	bd30      	pop	{r4, r5, pc}
 8000adc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000ae0:	4140      	adcs	r0, r0
 8000ae2:	eb41 0101 	adc.w	r1, r1, r1
 8000ae6:	3c01      	subs	r4, #1
 8000ae8:	bf28      	it	cs
 8000aea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000aee:	d2e9      	bcs.n	8000ac4 <__adddf3+0x10c>
 8000af0:	f091 0f00 	teq	r1, #0
 8000af4:	bf04      	itt	eq
 8000af6:	4601      	moveq	r1, r0
 8000af8:	2000      	moveq	r0, #0
 8000afa:	fab1 f381 	clz	r3, r1
 8000afe:	bf08      	it	eq
 8000b00:	3320      	addeq	r3, #32
 8000b02:	f1a3 030b 	sub.w	r3, r3, #11
 8000b06:	f1b3 0220 	subs.w	r2, r3, #32
 8000b0a:	da0c      	bge.n	8000b26 <__adddf3+0x16e>
 8000b0c:	320c      	adds	r2, #12
 8000b0e:	dd08      	ble.n	8000b22 <__adddf3+0x16a>
 8000b10:	f102 0c14 	add.w	ip, r2, #20
 8000b14:	f1c2 020c 	rsb	r2, r2, #12
 8000b18:	fa01 f00c 	lsl.w	r0, r1, ip
 8000b1c:	fa21 f102 	lsr.w	r1, r1, r2
 8000b20:	e00c      	b.n	8000b3c <__adddf3+0x184>
 8000b22:	f102 0214 	add.w	r2, r2, #20
 8000b26:	bfd8      	it	le
 8000b28:	f1c2 0c20 	rsble	ip, r2, #32
 8000b2c:	fa01 f102 	lsl.w	r1, r1, r2
 8000b30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b34:	bfdc      	itt	le
 8000b36:	ea41 010c 	orrle.w	r1, r1, ip
 8000b3a:	4090      	lslle	r0, r2
 8000b3c:	1ae4      	subs	r4, r4, r3
 8000b3e:	bfa2      	ittt	ge
 8000b40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000b44:	4329      	orrge	r1, r5
 8000b46:	bd30      	popge	{r4, r5, pc}
 8000b48:	ea6f 0404 	mvn.w	r4, r4
 8000b4c:	3c1f      	subs	r4, #31
 8000b4e:	da1c      	bge.n	8000b8a <__adddf3+0x1d2>
 8000b50:	340c      	adds	r4, #12
 8000b52:	dc0e      	bgt.n	8000b72 <__adddf3+0x1ba>
 8000b54:	f104 0414 	add.w	r4, r4, #20
 8000b58:	f1c4 0220 	rsb	r2, r4, #32
 8000b5c:	fa20 f004 	lsr.w	r0, r0, r4
 8000b60:	fa01 f302 	lsl.w	r3, r1, r2
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	fa21 f304 	lsr.w	r3, r1, r4
 8000b6c:	ea45 0103 	orr.w	r1, r5, r3
 8000b70:	bd30      	pop	{r4, r5, pc}
 8000b72:	f1c4 040c 	rsb	r4, r4, #12
 8000b76:	f1c4 0220 	rsb	r2, r4, #32
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	fa01 f304 	lsl.w	r3, r1, r4
 8000b82:	ea40 0003 	orr.w	r0, r0, r3
 8000b86:	4629      	mov	r1, r5
 8000b88:	bd30      	pop	{r4, r5, pc}
 8000b8a:	fa21 f004 	lsr.w	r0, r1, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	bd30      	pop	{r4, r5, pc}
 8000b92:	f094 0f00 	teq	r4, #0
 8000b96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000b9a:	bf06      	itte	eq
 8000b9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000ba0:	3401      	addeq	r4, #1
 8000ba2:	3d01      	subne	r5, #1
 8000ba4:	e74e      	b.n	8000a44 <__adddf3+0x8c>
 8000ba6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000baa:	bf18      	it	ne
 8000bac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000bb0:	d029      	beq.n	8000c06 <__adddf3+0x24e>
 8000bb2:	ea94 0f05 	teq	r4, r5
 8000bb6:	bf08      	it	eq
 8000bb8:	ea90 0f02 	teqeq	r0, r2
 8000bbc:	d005      	beq.n	8000bca <__adddf3+0x212>
 8000bbe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000bc2:	bf04      	itt	eq
 8000bc4:	4619      	moveq	r1, r3
 8000bc6:	4610      	moveq	r0, r2
 8000bc8:	bd30      	pop	{r4, r5, pc}
 8000bca:	ea91 0f03 	teq	r1, r3
 8000bce:	bf1e      	ittt	ne
 8000bd0:	2100      	movne	r1, #0
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	bd30      	popne	{r4, r5, pc}
 8000bd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000bda:	d105      	bne.n	8000be8 <__adddf3+0x230>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	4149      	adcs	r1, r1
 8000be0:	bf28      	it	cs
 8000be2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000be6:	bd30      	pop	{r4, r5, pc}
 8000be8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000bec:	bf3c      	itt	cc
 8000bee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000bf2:	bd30      	popcc	{r4, r5, pc}
 8000bf4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bf8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000bfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	bd30      	pop	{r4, r5, pc}
 8000c06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000c0a:	bf1a      	itte	ne
 8000c0c:	4619      	movne	r1, r3
 8000c0e:	4610      	movne	r0, r2
 8000c10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000c14:	bf1c      	itt	ne
 8000c16:	460b      	movne	r3, r1
 8000c18:	4602      	movne	r2, r0
 8000c1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c1e:	bf06      	itte	eq
 8000c20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000c24:	ea91 0f03 	teqeq	r1, r3
 8000c28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000c2c:	bd30      	pop	{r4, r5, pc}
 8000c2e:	bf00      	nop

08000c30 <__aeabi_ui2d>:
 8000c30:	f090 0f00 	teq	r0, #0
 8000c34:	bf04      	itt	eq
 8000c36:	2100      	moveq	r1, #0
 8000c38:	4770      	bxeq	lr
 8000c3a:	b530      	push	{r4, r5, lr}
 8000c3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c40:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c44:	f04f 0500 	mov.w	r5, #0
 8000c48:	f04f 0100 	mov.w	r1, #0
 8000c4c:	e750      	b.n	8000af0 <__adddf3+0x138>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2d>:
 8000c50:	f090 0f00 	teq	r0, #0
 8000c54:	bf04      	itt	eq
 8000c56:	2100      	moveq	r1, #0
 8000c58:	4770      	bxeq	lr
 8000c5a:	b530      	push	{r4, r5, lr}
 8000c5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000c68:	bf48      	it	mi
 8000c6a:	4240      	negmi	r0, r0
 8000c6c:	f04f 0100 	mov.w	r1, #0
 8000c70:	e73e      	b.n	8000af0 <__adddf3+0x138>
 8000c72:	bf00      	nop

08000c74 <__aeabi_f2d>:
 8000c74:	0042      	lsls	r2, r0, #1
 8000c76:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000c82:	bf1f      	itttt	ne
 8000c84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000c88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000c8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000c90:	4770      	bxne	lr
 8000c92:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000c96:	bf08      	it	eq
 8000c98:	4770      	bxeq	lr
 8000c9a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000c9e:	bf04      	itt	eq
 8000ca0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000ca4:	4770      	bxeq	lr
 8000ca6:	b530      	push	{r4, r5, lr}
 8000ca8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000cb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000cb4:	e71c      	b.n	8000af0 <__adddf3+0x138>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ul2d>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	b530      	push	{r4, r5, lr}
 8000cc2:	f04f 0500 	mov.w	r5, #0
 8000cc6:	e00a      	b.n	8000cde <__aeabi_l2d+0x16>

08000cc8 <__aeabi_l2d>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	b530      	push	{r4, r5, lr}
 8000cd2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000cd6:	d502      	bpl.n	8000cde <__aeabi_l2d+0x16>
 8000cd8:	4240      	negs	r0, r0
 8000cda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cde:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ce2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ce6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000cea:	f43f aed8 	beq.w	8000a9e <__adddf3+0xe6>
 8000cee:	f04f 0203 	mov.w	r2, #3
 8000cf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000cf6:	bf18      	it	ne
 8000cf8:	3203      	addne	r2, #3
 8000cfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000cfe:	bf18      	it	ne
 8000d00:	3203      	addne	r2, #3
 8000d02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d12:	fa01 fe03 	lsl.w	lr, r1, r3
 8000d16:	ea40 000e 	orr.w	r0, r0, lr
 8000d1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d1e:	4414      	add	r4, r2
 8000d20:	e6bd      	b.n	8000a9e <__adddf3+0xe6>
 8000d22:	bf00      	nop

08000d24 <__aeabi_d2uiz>:
 8000d24:	004a      	lsls	r2, r1, #1
 8000d26:	d211      	bcs.n	8000d4c <__aeabi_d2uiz+0x28>
 8000d28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d2c:	d211      	bcs.n	8000d52 <__aeabi_d2uiz+0x2e>
 8000d2e:	d50d      	bpl.n	8000d4c <__aeabi_d2uiz+0x28>
 8000d30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d38:	d40e      	bmi.n	8000d58 <__aeabi_d2uiz+0x34>
 8000d3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d46:	fa23 f002 	lsr.w	r0, r3, r2
 8000d4a:	4770      	bx	lr
 8000d4c:	f04f 0000 	mov.w	r0, #0
 8000d50:	4770      	bx	lr
 8000d52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d56:	d102      	bne.n	8000d5e <__aeabi_d2uiz+0x3a>
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr

08000d64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d7c:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <MX_ADC1_Init+0xc0>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000dde:	f001 ff0b 	bl	8002bf8 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000de8:	f000 fbc2 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_ADC1_Init+0xc4>)
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2306      	movs	r3, #6
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000df4:	2304      	movs	r3, #4
 8000df6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df8:	237f      	movs	r3, #127	; 0x7f
 8000dfa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_ADC1_Init+0xbc>)
 8000e0a:	f002 fa0f 	bl	800322c <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e14:	f000 fbac 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000094 	.word	0x20000094
 8000e24:	50040000 	.word	0x50040000
 8000e28:	32601000 	.word	0x32601000

08000e2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0a0      	sub	sp, #128	; 0x80
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	225c      	movs	r2, #92	; 0x5c
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f009 fc71 	bl	800a734 <memset>
  if(adcHandle->Instance==ADC1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_ADC_MspInit+0x108>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d167      	bne.n	8000f2c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000e66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 fc07 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e78:	f000 fb7a 	bl	8001570 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_ADC_MspInit+0x10c>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <HAL_ADC_MspInit+0x10c>)
 8000e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_ADC_MspInit+0x10c>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_ADC_MspInit+0x10c>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <HAL_ADC_MspInit+0x10c>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <HAL_ADC_MspInit+0x10c>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f003 fbff 	bl	80046c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000eca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f00:	480e      	ldr	r0, [pc, #56]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000f02:	f003 fa77 	bl	80043f4 <HAL_DMA_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000f0c:	f000 fb30 	bl	8001570 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000f14:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2012      	movs	r0, #18
 8000f22:	f003 fa30 	bl	8004386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000f26:	2012      	movs	r0, #18
 8000f28:	f003 fa49 	bl	80043be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3780      	adds	r7, #128	; 0x80
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	50040000 	.word	0x50040000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	200000f8 	.word	0x200000f8
 8000f40:	40020008 	.word	0x40020008

08000f44 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <MX_CAN1_Init+0xcc>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f50:	2203      	movs	r2, #3
 8000f52:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f60:	4b2a      	ldr	r3, [pc, #168]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f62:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f6e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f94:	481d      	ldr	r0, [pc, #116]	; (800100c <MX_CAN1_Init+0xc8>)
 8000f96:	f002 fd5b 	bl	8003a50 <HAL_CAN_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fa0:	f000 fae6 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  can1Filter0.FilterMaskIdHigh = RFBCAN_FILTER0_MaskIdHigh;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fa6:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000faa:	609a      	str	r2, [r3, #8]
  can1Filter0.FilterIdHigh = RFBCAN_FILTER0_IdHigh;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fae:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 8000fb2:	601a      	str	r2, [r3, #0]
  can1Filter0.FilterMaskIdLow = RFBCAN_FILTER0_MaskIdLow;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fb6:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000fba:	60da      	str	r2, [r3, #12]
  can1Filter0.FilterIdLow = RFBCAN_FILTER0_IdLow;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fbe:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 8000fc2:	605a      	str	r2, [r3, #4]
  can1Filter0.FilterMode = RFBCAN_FILTER0_FilterMode;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  can1Filter0.FilterScale = RFBCAN_FILTER0_FilterScale;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  can1Filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  can1Filter0.FilterBank = 0;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  can1Filter0.FilterActivation = ENABLE;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	621a      	str	r2, [r3, #32]

  if (HAL_CAN_ConfigFilter(&hcan1, &can1Filter0) != HAL_OK) { Error_Handler(); }
 8000fe2:	490c      	ldr	r1, [pc, #48]	; (8001014 <MX_CAN1_Init+0xd0>)
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_CAN1_Init+0xc8>)
 8000fe6:	f002 fe79 	bl	8003cdc <HAL_CAN_ConfigFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_CAN1_Init+0xb0>
 8000ff0:	f000 fabe 	bl	8001570 <Error_Handler>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) { Error_Handler(); }
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_CAN1_Init+0xc8>)
 8000ff8:	f003 f84c 	bl	8004094 <HAL_CAN_ActivateNotification>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_CAN1_Init+0xc2>
 8001002:	f000 fab5 	bl	8001570 <Error_Handler>

  /* USER CODE END CAN1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001c4 	.word	0x200001c4
 8001010:	40006400 	.word	0x40006400
 8001014:	20000140 	.word	0x20000140

08001018 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_CAN_MspInit+0x80>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d129      	bne.n	800108e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_CAN_MspInit+0x84>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001044:	6593      	str	r3, [r2, #88]	; 0x58
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_CAN_MspInit+0x84>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800106a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800107c:	2309      	movs	r3, #9
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f003 fb1b 	bl	80046c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40006400 	.word	0x40006400
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    if(hcan->Instance == CAN1) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d111      	bne.n	80010d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData) != HAL_OK) { Error_Handler(); }
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f002 fed9 	bl	8003e70 <HAL_CAN_GetRxMessage>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80010c4:	f000 fa54 	bl	8001570 <Error_Handler>

        xQueueSendFromISR(CANRxQueueHandle, (RFBCANMessage*)canRxData, NULL);
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	4904      	ldr	r1, [pc, #16]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80010d2:	f007 fc7d 	bl	80089d0 <xQueueGenericSendFromISR>
    }
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40006400 	.word	0x40006400
 80010e4:	20000184 	.word	0x20000184
 80010e8:	20000168 	.word	0x20000168
 80010ec:	20000234 	.word	0x20000234

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_DMA_Init+0x38>)
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MX_DMA_Init+0x38>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6493      	str	r3, [r2, #72]	; 0x48
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DMA_Init+0x38>)
 8001104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2105      	movs	r1, #5
 8001112:	200b      	movs	r0, #11
 8001114:	f003 f937 	bl	8004386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001118:	200b      	movs	r0, #11
 800111a:	f003 f950 	bl	80043be <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	619a      	str	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CANRxQueue */
  CANRxQueueHandle = osMessageQueueNew (6, sizeof(uint64_t), &CANRxQueue_attributes);
 8001168:	4a10      	ldr	r2, [pc, #64]	; (80011ac <MX_FREERTOS_Init+0x48>)
 800116a:	2108      	movs	r1, #8
 800116c:	2006      	movs	r0, #6
 800116e:	f006 fc62 	bl	8007a36 <osMessageQueueNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <MX_FREERTOS_Init+0x4c>)
 8001176:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <MX_FREERTOS_Init+0x50>)
 800117a:	2100      	movs	r1, #0
 800117c:	480e      	ldr	r0, [pc, #56]	; (80011b8 <MX_FREERTOS_Init+0x54>)
 800117e:	f006 fbad 	bl	80078dc <osThreadNew>
 8001182:	4603      	mov	r3, r0
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <MX_FREERTOS_Init+0x58>)
 8001186:	6013      	str	r3, [r2, #0]

  /* creation of TxMgr */
  TxMgrHandle = osThreadNew(StartTxMgr, NULL, &TxMgr_attributes);
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <MX_FREERTOS_Init+0x5c>)
 800118a:	2100      	movs	r1, #0
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_FREERTOS_Init+0x60>)
 800118e:	f006 fba5 	bl	80078dc <osThreadNew>
 8001192:	4603      	mov	r3, r0
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <MX_FREERTOS_Init+0x64>)
 8001196:	6013      	str	r3, [r2, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(StartBlink, NULL, &Blink_attributes);
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <MX_FREERTOS_Init+0x68>)
 800119a:	2100      	movs	r1, #0
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <MX_FREERTOS_Init+0x6c>)
 800119e:	f006 fb9d 	bl	80078dc <osThreadNew>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <MX_FREERTOS_Init+0x70>)
 80011a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0800aa2c 	.word	0x0800aa2c
 80011b0:	20000234 	.word	0x20000234
 80011b4:	0800a9c0 	.word	0x0800a9c0
 80011b8:	080011d9 	.word	0x080011d9
 80011bc:	20000228 	.word	0x20000228
 80011c0:	0800a9e4 	.word	0x0800a9e4
 80011c4:	0800127d 	.word	0x0800127d
 80011c8:	2000022c 	.word	0x2000022c
 80011cc:	0800aa08 	.word	0x0800aa08
 80011d0:	080012ad 	.word	0x080012ad
 80011d4:	20000230 	.word	0x20000230

080011d8 <StartCanTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCanTask */
void StartCanTask(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

	RFBCANMessage qm;

  /* Infinite loop */
  for(;;) {
	if(xQueueReceive(CANRxQueueHandle, &qm, 0)) {
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <StartCanTask+0x98>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f107 0108 	add.w	r1, r7, #8
 80011e8:	2200      	movs	r2, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 fc8c 	bl	8008b08 <xQueueReceive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d036      	beq.n	8001264 <StartCanTask+0x8c>
		switch(qm.h) {
 80011f6:	7a3b      	ldrb	r3, [r7, #8]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d833      	bhi.n	8001266 <StartCanTask+0x8e>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <StartCanTask+0x2c>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001219 	.word	0x08001219
 8001208:	0800122d 	.word	0x0800122d
 800120c:	08001241 	.word	0x08001241
 8001210:	08001251 	.word	0x08001251
 8001214:	0800125f 	.word	0x0800125f
		case RFBCANMessage_SetPllPwr: {
			SPISetTiPllOutAPwr((uint8_t)(qm.u4), (uint8_t)(qm.u4 >> 31));
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	0fdb      	lsrs	r3, r3, #31
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f000 faf9 	bl	800181c <SPISetTiPllOutAPwr>
		}; break;
 800122a:	e01c      	b.n	8001266 <StartCanTask+0x8e>
		case RFBCANMessage_SetPllContFreq: {
			SPISetTiPllFreq((float)qm.u4);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001236:	eeb0 0a67 	vmov.f32	s0, s15
 800123a:	f000 fb27 	bl	800188c <SPISetTiPllFreq>
		}; break;
 800123e:	e012      	b.n	8001266 <StartCanTask+0x8e>
		case RFBCANMessage_StartPllSweep: {
            xTaskNotify(TxMgrHandle, 1u << TXMGR_NOTIFICATION_BIT_STARTSWEEP, eSetBits);
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <StartCanTask+0x9c>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	2201      	movs	r2, #1
 8001248:	2102      	movs	r1, #2
 800124a:	f008 fddf 	bl	8009e0c <xTaskGenericNotify>
		}; break;
 800124e:	e00a      	b.n	8001266 <StartCanTask+0x8e>
		case RFBCANMessage_PushPllData: {
			RFBPllData[qm.a] = qm.u4;
 8001250:	7a7b      	ldrb	r3, [r7, #9]
 8001252:	4619      	mov	r1, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <StartCanTask+0xa0>)
 8001258:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}; break;
 800125c:	e003      	b.n	8001266 <StartCanTask+0x8e>
		case RFBCANMessage_SetPllSweepData: {
			SPISetTiPllRampFreqFromBuf();
 800125e:	f000 fbd9 	bl	8001a14 <SPISetTiPllRampFreqFromBuf>
		}; break;
 8001262:	e000      	b.n	8001266 <StartCanTask+0x8e>
		}
	}
 8001264:	bf00      	nop

    osDelay(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f006 fbca 	bl	8007a00 <osDelay>
	if(xQueueReceive(CANRxQueueHandle, &qm, 0)) {
 800126c:	e7b8      	b.n	80011e0 <StartCanTask+0x8>
 800126e:	bf00      	nop
 8001270:	20000234 	.word	0x20000234
 8001274:	2000022c 	.word	0x2000022c
 8001278:	200002ac 	.word	0x200002ac

0800127c <StartTxMgr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTxMgr */
void StartTxMgr(void *argument)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTxMgr */

    LL_GPIO_ResetOutputPin(ADC_RESET_GPIO_Port, ADC_RESET_Pin);
 8001284:	2104      	movs	r1, #4
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <StartTxMgr+0x2c>)
 8001288:	f7ff ff5e 	bl	8001148 <LL_GPIO_ResetOutputPin>
    SPIInitTiAdc();
 800128c:	f000 fec8 	bl	8002020 <SPIInitTiAdc>

    SPIInitTiPll();
 8001290:	f000 fa66 	bl	8001760 <SPIInitTiPll>


    /* Infinite loop */
  for(;;) {
      xTaskNotifyWait(0, 1u << TXMGR_NOTIFICATION_BIT_STARTSWEEP, NULL, 0);
 8001294:	2300      	movs	r3, #0
 8001296:	2200      	movs	r2, #0
 8001298:	2102      	movs	r1, #2
 800129a:	2000      	movs	r0, #0
 800129c:	f008 fd56 	bl	8009d4c <xTaskNotifyWait>

      TIM15TiPllRampStart();
 80012a0:	f001 f97c 	bl	800259c <TIM15TiPllRampStart>
      xTaskNotifyWait(0, 1u << TXMGR_NOTIFICATION_BIT_STARTSWEEP, NULL, 0);
 80012a4:	e7f6      	b.n	8001294 <StartTxMgr+0x18>
 80012a6:	bf00      	nop
 80012a8:	48000400 	.word	0x48000400

080012ac <StartBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink */
  /* Infinite loop */
  for(;;)
  {
      LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80012b4:	2102      	movs	r1, #2
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <StartBlink+0x2c>)
 80012b8:	f7ff ff46 	bl	8001148 <LL_GPIO_ResetOutputPin>
      osDelay(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f006 fb9e 	bl	8007a00 <osDelay>
      LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80012c4:	2102      	movs	r1, #2
 80012c6:	4804      	ldr	r0, [pc, #16]	; (80012d8 <StartBlink+0x2c>)
 80012c8:	f7ff ff30 	bl	800112c <LL_GPIO_SetOutputPin>
      osDelay(500);
 80012cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d0:	f006 fb96 	bl	8007a00 <osDelay>
      LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 80012d4:	e7ee      	b.n	80012b4 <StartBlink+0x8>
 80012d6:	bf00      	nop
 80012d8:	48001c00 	.word	0x48001c00

080012dc <LL_GPIO_SetOutputPin>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	619a      	str	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_GPIO_ResetOutputPin>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800131e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4313      	orrs	r3, r2
 8001326:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800132a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4013      	ands	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40021000 	.word	0x40021000

08001344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	463b      	mov	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800135a:	2004      	movs	r0, #4
 800135c:	f7ff ffda 	bl	8001314 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001360:	2080      	movs	r0, #128	; 0x80
 8001362:	f7ff ffd7 	bl	8001314 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff ffd4 	bl	8001314 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800136c:	2002      	movs	r0, #2
 800136e:	f7ff ffd1 	bl	8001314 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, GPA3_Pin|PLL_RAMPDIR_Pin);
 8001372:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001376:	4837      	ldr	r0, [pc, #220]	; (8001454 <MX_GPIO_Init+0x110>)
 8001378:	f7ff ffbe 	bl	80012f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GPA0_Pin|GPA1_Pin|GPA2_Pin|GPA4_Pin
 800137c:	f240 1137 	movw	r1, #311	; 0x137
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f7ff ffb8 	bl	80012f8 <LL_GPIO_ResetOutputPin>
                          |GPA5_Pin|GPA8_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, GPB12_Pin|GPB4_Pin|GPB5_Pin|GPB8_Pin
 8001388:	f241 3130 	movw	r1, #4912	; 0x1330
 800138c:	4832      	ldr	r0, [pc, #200]	; (8001458 <MX_GPIO_Init+0x114>)
 800138e:	f7ff ffb3 	bl	80012f8 <LL_GPIO_ResetOutputPin>
                          |PLL_CE_Pin);

  /**/
  LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001396:	482f      	ldr	r0, [pc, #188]	; (8001454 <MX_GPIO_Init+0x110>)
 8001398:	f7ff ffa0 	bl	80012dc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 800139c:	2102      	movs	r1, #2
 800139e:	482f      	ldr	r0, [pc, #188]	; (800145c <MX_GPIO_Init+0x118>)
 80013a0:	f7ff ff9c 	bl	80012dc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(PA_EN_GPIO_Port, PA_EN_Pin);
 80013a4:	2140      	movs	r1, #64	; 0x40
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f7ff ff97 	bl	80012dc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, SPI_CS_ADC_Pin|ADC_RESET_Pin);
 80013ae:	2105      	movs	r1, #5
 80013b0:	4829      	ldr	r0, [pc, #164]	; (8001458 <MX_GPIO_Init+0x114>)
 80013b2:	f7ff ff93 	bl	80012dc <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = GPA3_Pin|SPI_CS_PLL_Pin|PLL_RAMPDIR_Pin;
 80013b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013bc:	2301      	movs	r3, #1
 80013be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4820      	ldr	r0, [pc, #128]	; (8001454 <MX_GPIO_Init+0x110>)
 80013d2:	f005 f976 	bl	80066c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 80013d6:	2302      	movs	r3, #2
 80013d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013da:	2301      	movs	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80013ea:	463b      	mov	r3, r7
 80013ec:	4619      	mov	r1, r3
 80013ee:	481b      	ldr	r0, [pc, #108]	; (800145c <MX_GPIO_Init+0x118>)
 80013f0:	f005 f967 	bl	80066c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPA0_Pin|GPA1_Pin|GPA2_Pin|GPA4_Pin
 80013f4:	f240 1377 	movw	r3, #375	; 0x177
 80013f8:	603b      	str	r3, [r7, #0]
                          |GPA5_Pin|PA_EN_Pin|GPA8_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013fa:	2301      	movs	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f005 f956 	bl	80066c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_ADC_Pin|ADC_RESET_Pin|GPB12_Pin|GPB4_Pin
 8001416:	f241 3335 	movw	r3, #4917	; 0x1335
 800141a:	603b      	str	r3, [r7, #0]
                          |GPB5_Pin|GPB8_Pin|PLL_CE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_GPIO_Init+0x114>)
 8001432:	f005 f946 	bl	80066c2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SWPH3_Pin;
 8001436:	2308      	movs	r3, #8
 8001438:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SWPH3_GPIO_Port, &GPIO_InitStruct);
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_GPIO_Init+0x118>)
 8001448:	f005 f93b 	bl	80066c2 <LL_GPIO_Init>

}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	48000800 	.word	0x48000800
 8001458:	48000400 	.word	0x48000400
 800145c:	48001c00 	.word	0x48001c00

08001460 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	b29a      	uxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_GPIO_SetOutputPin>:
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	619a      	str	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f001 f983 	bl	80027aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f81e 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f7ff ff4c 	bl	8001344 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ac:	f7ff fe20 	bl	80010f0 <MX_DMA_Init>
  MX_CAN1_Init();
 80014b0:	f7ff fd48 	bl	8000f44 <MX_CAN1_Init>
  MX_SPI2_Init();
 80014b4:	f000 f8d2 	bl	800165c <MX_SPI2_Init>
  MX_TIM15_Init();
 80014b8:	f000 ffae 	bl	8002418 <MX_TIM15_Init>
  MX_ADC1_Init();
 80014bc:	f7ff fc52 	bl	8000d64 <MX_ADC1_Init>
  MX_RNG_Init();
 80014c0:	f000 f868 	bl	8001594 <MX_RNG_Init>
  MX_USART1_UART_Init();
 80014c4:	f001 f8ca 	bl	800265c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_TransmitData8(USART1, '\n');
 80014c8:	210a      	movs	r1, #10
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <main+0x44>)
 80014cc:	f7ff ffc8 	bl	8001460 <LL_USART_TransmitData8>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014d0:	f006 f9ba 	bl	8007848 <osKernelInitialize>
  MX_FREERTOS_Init();
 80014d4:	f7ff fe46 	bl	8001164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014d8:	f006 f9da 	bl	8007890 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <main+0x40>
 80014de:	bf00      	nop
 80014e0:	40013800 	.word	0x40013800

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b096      	sub	sp, #88	; 0x58
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2244      	movs	r2, #68	; 0x44
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f009 f91e 	bl	800a734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800150a:	f003 fa63 	bl	80049d4 <HAL_PWREx_ControlVoltageScaling>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001514:	f000 f82c 	bl	8001570 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001518:	2321      	movs	r3, #33	; 0x21
 800151a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800151c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4618      	mov	r0, r3
 8001530:	f003 faa6 	bl	8004a80 <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800153a:	f000 f819 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001542:	2302      	movs	r3, #2
 8001544:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	2102      	movs	r1, #2
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fea6 	bl	80052a8 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001562:	f000 f805 	bl	8001570 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3758      	adds	r7, #88	; 0x58
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      LL_USART_TransmitData8(USART1, 'e');
 8001578:	2165      	movs	r1, #101	; 0x65
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <Error_Handler+0x1c>)
 800157c:	f7ff ff70 	bl	8001460 <LL_USART_TransmitData8>
      LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001580:	2102      	movs	r1, #2
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <Error_Handler+0x20>)
 8001584:	f7ff ff7c 	bl	8001480 <LL_GPIO_SetOutputPin>
      LL_USART_TransmitData8(USART1, 'e');
 8001588:	e7f6      	b.n	8001578 <Error_Handler+0x8>
 800158a:	bf00      	nop
 800158c:	40013800 	.word	0x40013800
 8001590:	48001c00 	.word	0x48001c00

08001594 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_RNG_Init+0x20>)
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <MX_RNG_Init+0x24>)
 800159c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_RNG_Init+0x20>)
 80015a0:	f004 fb78 	bl	8005c94 <HAL_RNG_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015aa:	f7ff ffe1 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000238 	.word	0x20000238
 80015b8:	50060800 	.word	0x50060800

080015bc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09a      	sub	sp, #104	; 0x68
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	225c      	movs	r2, #92	; 0x5c
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f009 f8b1 	bl	800a734 <memset>
  if(rngHandle->Instance==RNG)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <HAL_RNG_MspInit+0x60>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d11a      	bne.n	8001612 <HAL_RNG_MspInit+0x56>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80015dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80015e2:	2300      	movs	r3, #0
 80015e4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 f848 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_RNG_MspInit+0x3e>
    {
      Error_Handler();
 80015f6:	f7ff ffbb 	bl	8001570 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RNG_MspInit+0x64>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_RNG_MspInit+0x64>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RNG_MspInit+0x64>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3768      	adds	r7, #104	; 0x68
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	50060800 	.word	0x50060800
 8001620:	40021000 	.word	0x40021000

08001624 <LL_GPIO_SetOutputPin>:
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	619a      	str	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_GPIO_ResetOutputPin>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_SPI2_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <MX_SPI2_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_SPI2_Init+0x74>)
 8001668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_SPI2_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_SPI2_Init+0x74>)
 8001676:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800167a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_SPI2_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_SPI2_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI2_Init+0x74>)
 800168a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_SPI2_Init+0x74>)
 8001692:	2208      	movs	r2, #8
 8001694:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI2_Init+0x74>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI2_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_SPI2_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI2_Init+0x74>)
 80016aa:	2207      	movs	r2, #7
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_SPI2_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI2_Init+0x74>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_SPI2_Init+0x74>)
 80016bc:	f004 fb41 	bl	8005d42 <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f7ff ff53 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000248 	.word	0x20000248
 80016d4:	40003800 	.word	0x40003800

080016d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_SPI_MspInit+0x7c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d128      	bne.n	800174c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_SPI_MspInit+0x80>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_SPI_MspInit+0x80>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800172a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800173c:	2305      	movs	r3, #5
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_SPI_MspInit+0x84>)
 8001748:	f002 ffbc 	bl	80046c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40003800 	.word	0x40003800
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400

08001760 <SPIInitTiPll>:

/* USER CODE BEGIN 1 */

uint32_t RFBPllData[RFBPllDataLen];

void SPIInitTiPll(void) {
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176a:	4828      	ldr	r0, [pc, #160]	; (800180c <SPIInitTiPll+0xac>)
 800176c:	f7ff ff68 	bl	8001640 <LL_GPIO_ResetOutputPin>
	__NOP();
 8001770:	bf00      	nop

	const uint8_t aTxBufferResetSeq[] = SPIInitTiPllW_GenArray(0, 0b0000000000000010);
 8001772:	4a27      	ldr	r2, [pc, #156]	; (8001810 <SPIInitTiPll+0xb0>)
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	8019      	strh	r1, [r3, #0]
 800177e:	3302      	adds	r3, #2
 8001780:	0c12      	lsrs	r2, r2, #16
 8001782:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBufferResetSeq, 3, 10) != HAL_OK) {
 8001784:	f107 0114 	add.w	r1, r7, #20
 8001788:	230a      	movs	r3, #10
 800178a:	2203      	movs	r2, #3
 800178c:	4821      	ldr	r0, [pc, #132]	; (8001814 <SPIInitTiPll+0xb4>)
 800178e:	f004 fb7b 	bl	8005e88 <HAL_SPI_Transmit>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SPIInitTiPll+0x3c>
	    Error_Handler();
 8001798:	f7ff feea 	bl	8001570 <Error_Handler>
	}
	LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 800179c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a0:	481a      	ldr	r0, [pc, #104]	; (800180c <SPIInitTiPll+0xac>)
 80017a2:	f7ff ff3f 	bl	8001624 <LL_GPIO_SetOutputPin>
	__NOP();
 80017a6:	bf00      	nop

	const uint8_t aTxBuffers[][3] = {
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <SPIInitTiPll+0xb8>)
 80017aa:	463c      	mov	r4, r7
 80017ac:	461d      	mov	r5, r3
 80017ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	8023      	strh	r3, [r4, #0]
			SPIInitTiPllW_GenArray( 46, 0b0000011111110001), // OutB:VCO
			SPIInitTiPllW_GenArray( 45, 0b1100111000000000 | 12u), // OutA:VCO, OutBPWR: 12
			SPIInitTiPllW_GenArray( 44, 0b0000000100100010), // OutAPWR: 0, OutAEn: Off
	};

	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
 80017ba:	e01f      	b.n	80017fc <SPIInitTiPll+0x9c>
		__NOP();
 80017bc:	bf00      	nop
		LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80017be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <SPIInitTiPll+0xac>)
 80017c4:	f7ff ff3c 	bl	8001640 <LL_GPIO_ResetOutputPin>
		__NOP();
 80017c8:	bf00      	nop

		if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 80017ca:	7dfa      	ldrb	r2, [r7, #23]
 80017cc:	4639      	mov	r1, r7
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	4419      	add	r1, r3
 80017d6:	230a      	movs	r3, #10
 80017d8:	2203      	movs	r2, #3
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <SPIInitTiPll+0xb4>)
 80017dc:	f004 fb54 	bl	8005e88 <HAL_SPI_Transmit>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SPIInitTiPll+0x8a>
		    Error_Handler();
 80017e6:	f7ff fec3 	bl	8001570 <Error_Handler>
		}

		__NOP();
 80017ea:	bf00      	nop
		LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80017ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <SPIInitTiPll+0xac>)
 80017f2:	f7ff ff17 	bl	8001624 <LL_GPIO_SetOutputPin>
	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	3301      	adds	r3, #1
 80017fa:	75fb      	strb	r3, [r7, #23]
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d9dc      	bls.n	80017bc <SPIInitTiPll+0x5c>
	}
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bdb0      	pop	{r4, r5, r7, pc}
 800180c:	48000800 	.word	0x48000800
 8001810:	0800a97c 	.word	0x0800a97c
 8001814:	20000248 	.word	0x20000248
 8001818:	0800a980 	.word	0x0800a980

0800181c <SPISetTiPllOutAPwr>:

/**
  * @param  power: 0 .. 63 (highest)
  * @param  powerdown: 0 .. 1 (off)
  */
void SPISetTiPllOutAPwr(uint8_t power, uint8_t powerdown) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
	const uint8_t aTxBuffer[] = SPIInitTiPllW_GenArray( 44, 0b0000000000100010 | ((power & 0x3F) << 8) | ((powerdown & 0x01) << 6)); // OutAPWR: 63
 800182c:	232c      	movs	r3, #44	; 0x2c
 800182e:	733b      	strb	r3, [r7, #12]
 8001830:	2322      	movs	r3, #34	; 0x22
 8001832:	737b      	strb	r3, [r7, #13]
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	019b      	lsls	r3, r3, #6
 8001838:	b25b      	sxtb	r3, r3
 800183a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183e:	b25b      	sxtb	r3, r3
 8001840:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8001844:	b25b      	sxtb	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 800184a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <SPISetTiPllOutAPwr+0x68>)
 8001850:	f7ff fef6 	bl	8001640 <LL_GPIO_ResetOutputPin>
	__NOP();
 8001854:	bf00      	nop

	if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffer, 3, 10) != HAL_OK) {
 8001856:	f107 010c 	add.w	r1, r7, #12
 800185a:	230a      	movs	r3, #10
 800185c:	2203      	movs	r2, #3
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <SPISetTiPllOutAPwr+0x6c>)
 8001860:	f004 fb12 	bl	8005e88 <HAL_SPI_Transmit>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SPISetTiPllOutAPwr+0x52>
		Error_Handler();
 800186a:	f7ff fe81 	bl	8001570 <Error_Handler>
	}

	__NOP();
 800186e:	bf00      	nop
	LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <SPISetTiPllOutAPwr+0x68>)
 8001876:	f7ff fed5 	bl	8001624 <LL_GPIO_SetOutputPin>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	48000800 	.word	0x48000800
 8001888:	20000248 	.word	0x20000248

0800188c <SPISetTiPllFreq>:

void SPISetTiPllFreq(float f) {
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b08e      	sub	sp, #56	; 0x38
 8001892:	af00      	add	r7, sp, #0
 8001894:	ed87 0a03 	vstr	s0, [r7, #12]
	uint8_t denq = TIPLL_DENQ;
 8001898:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <SPISetTiPllFreq+0x178>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint32_t den = (1u << denq) - 1;
 80018a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018a4:	2201      	movs	r2, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t ns = f * den / TIPLL_FPD;
 80018ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001a08 <SPISetTiPllFreq+0x17c>
 80018c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018c8:	ee16 0a90 	vmov	r0, s13
 80018cc:	f7fe fdba 	bl	8000444 <__aeabi_f2ulz>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	uint32_t sq = ns % den;
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018da:	2200      	movs	r2, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e8:	f7fe fd80 	bl	80003ec <__aeabi_uldivmod>
 80018ec:	4613      	mov	r3, r2
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t sp = (ns - sq) / den;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	2200      	movs	r2, #0
 80018f4:	461c      	mov	r4, r3
 80018f6:	4615      	mov	r5, r2
 80018f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018fc:	ebb2 0804 	subs.w	r8, r2, r4
 8001900:	eb63 0905 	sbc.w	r9, r3, r5
 8001904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001906:	2200      	movs	r2, #0
 8001908:	469a      	mov	sl, r3
 800190a:	4693      	mov	fp, r2
 800190c:	4652      	mov	r2, sl
 800190e:	465b      	mov	r3, fp
 8001910:	4640      	mov	r0, r8
 8001912:	4649      	mov	r1, r9
 8001914:	f7fe fd6a 	bl	80003ec <__aeabi_uldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4613      	mov	r3, r2
 800191e:	623b      	str	r3, [r7, #32]
	if(sp & 0xFFFF0000) return; // OVF.
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	0c1b      	lsrs	r3, r3, #16
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d167      	bne.n	80019fa <SPISetTiPllFreq+0x16e>


	const uint8_t aTxBuffers[][3] = {
 800192a:	232b      	movs	r3, #43	; 0x2b
 800192c:	743b      	strb	r3, [r7, #16]
			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	b29b      	uxth	r3, r3
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b29b      	uxth	r3, r3
 8001936:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001938:	747b      	strb	r3, [r7, #17]
			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800193e:	74bb      	strb	r3, [r7, #18]
 8001940:	232a      	movs	r3, #42	; 0x2a
 8001942:	74fb      	strb	r3, [r7, #19]
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	0c1b      	lsrs	r3, r3, #16
 8001948:	b29b      	uxth	r3, r3
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001950:	753b      	strb	r3, [r7, #20]
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001958:	757b      	strb	r3, [r7, #21]
 800195a:	2327      	movs	r3, #39	; 0x27
 800195c:	75bb      	strb	r3, [r7, #22]

			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	b29b      	uxth	r3, r3
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001968:	75fb      	strb	r3, [r7, #23]
			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 800196a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196c:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800196e:	763b      	strb	r3, [r7, #24]
 8001970:	2326      	movs	r3, #38	; 0x26
 8001972:	767b      	strb	r3, [r7, #25]
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	0c1b      	lsrs	r3, r3, #16
 8001978:	b29b      	uxth	r3, r3
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001980:	76bb      	strb	r3, [r7, #26]
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001988:	76fb      	strb	r3, [r7, #27]
 800198a:	2324      	movs	r3, #36	; 0x24
 800198c:	773b      	strb	r3, [r7, #28]

			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	b29b      	uxth	r3, r3
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001998:	777b      	strb	r3, [r7, #29]
			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 800199e:	77bb      	strb	r3, [r7, #30]
	};

	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019a6:	e023      	b.n	80019f0 <SPISetTiPllFreq+0x164>
		__NOP();
 80019a8:	bf00      	nop
		LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80019aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ae:	4817      	ldr	r0, [pc, #92]	; (8001a0c <SPISetTiPllFreq+0x180>)
 80019b0:	f7ff fe46 	bl	8001640 <LL_GPIO_ResetOutputPin>
		__NOP();
 80019b4:	bf00      	nop

		if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 80019b6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80019ba:	f107 0110 	add.w	r1, r7, #16
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	4419      	add	r1, r3
 80019c6:	230a      	movs	r3, #10
 80019c8:	2203      	movs	r2, #3
 80019ca:	4811      	ldr	r0, [pc, #68]	; (8001a10 <SPISetTiPllFreq+0x184>)
 80019cc:	f004 fa5c 	bl	8005e88 <HAL_SPI_Transmit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SPISetTiPllFreq+0x14e>
		    Error_Handler();
 80019d6:	f7ff fdcb 	bl	8001570 <Error_Handler>
		}

		__NOP();
 80019da:	bf00      	nop
		LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 80019dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e0:	480a      	ldr	r0, [pc, #40]	; (8001a0c <SPISetTiPllFreq+0x180>)
 80019e2:	f7ff fe1f 	bl	8001624 <LL_GPIO_SetOutputPin>
	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 80019e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019ea:	3301      	adds	r3, #1
 80019ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d9d7      	bls.n	80019a8 <SPISetTiPllFreq+0x11c>
 80019f8:	e000      	b.n	80019fc <SPISetTiPllFreq+0x170>
	if(sp & 0xFFFF0000) return; // OVF.
 80019fa:	bf00      	nop
	}
}
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	4c371b00 	.word	0x4c371b00
 8001a0c:	48000800 	.word	0x48000800
 8001a10:	20000248 	.word	0x20000248

08001a14 <SPISetTiPllRampFreqFromBuf>:

void SPISetTiPllRampFreqFromBuf() {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	float p = (float)RFBPllData[RFBPllData_SweepLow];
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <SPISetTiPllRampFreqFromBuf+0x78>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a26:	edc7 7a01 	vstr	s15, [r7, #4]
	float q = (float)RFBPllData[RFBPllData_SweepHigh];
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <SPISetTiPllRampFreqFromBuf+0x78>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a36:	edc7 7a00 	vstr	s15, [r7]

	SPISetTiPllRampFreq(p, q, 65535, q - p + 200000.0f, q + 100000.0f, p - 100000.0f);
 8001a3a:	ed97 7a00 	vldr	s14, [r7]
 8001a3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a46:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001a90 <SPISetTiPllRampFreqFromBuf+0x7c>
 8001a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a4e:	edd7 7a00 	vldr	s15, [r7]
 8001a52:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a94 <SPISetTiPllRampFreqFromBuf+0x80>
 8001a56:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8001a94 <SPISetTiPllRampFreqFromBuf+0x80>
 8001a62:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001a66:	eeb0 2a67 	vmov.f32	s4, s15
 8001a6a:	eef0 1a66 	vmov.f32	s3, s13
 8001a6e:	eeb0 1a47 	vmov.f32	s2, s14
 8001a72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a76:	edd7 0a00 	vldr	s1, [r7]
 8001a7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a7e:	f000 f80b 	bl	8001a98 <SPISetTiPllRampFreq>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002ac 	.word	0x200002ac
 8001a90:	48435000 	.word	0x48435000
 8001a94:	47c35000 	.word	0x47c35000

08001a98 <SPISetTiPllRampFreq>:

void SPISetTiPllRampFreq(float start, float end, uint16_t len, float threshbw, float limithigh, float limitlow) {
 8001a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9c:	b0b0      	sub	sp, #192	; 0xc0
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 8001aa4:	edc7 0a0e 	vstr	s1, [r7, #56]	; 0x38
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	ed87 1a0c 	vstr	s2, [r7, #48]	; 0x30
 8001aae:	edc7 1a0b 	vstr	s3, [r7, #44]	; 0x2c
 8001ab2:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8001ab6:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint8_t denq = TIPLL_DENQ;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <SPISetTiPllRampFreq+0xc8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	uint32_t den = (1u << denq) - 1;
 8001ac0:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	4093      	lsls	r3, r2
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	uint64_t ns = llroundf(start * den / TIPLL_FPD);
 8001ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ada:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001b68 <SPISetTiPllRampFreq+0xd0>
 8001ae6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aea:	eeb0 0a47 	vmov.f32	s0, s14
 8001aee:	f008 feeb 	bl	800a8c8 <llroundf>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	uint64_t ne = llroundf(end   * den / TIPLL_FPD);
 8001afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b06:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001b68 <SPISetTiPllRampFreq+0xd0>
 8001b12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b16:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1a:	f008 fed5 	bl	800a8c8 <llroundf>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t so = (int64_t)ne - (int64_t)ns;
 8001b26:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001b2a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001b2e:	1a84      	subs	r4, r0, r2
 8001b30:	eb61 0503 	sbc.w	r5, r1, r3
 8001b34:	e9c7 4524 	strd	r4, r5, [r7, #144]	; 0x90
	int64_t ss = llroundf(1.0f * so / len);
 8001b38:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001b3c:	f7fe fc18 	bl	8000370 <__aeabi_l2f>
 8001b40:	ee06 0a90 	vmov	s13, r0
 8001b44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b52:	eeb0 0a47 	vmov.f32	s0, s14
 8001b56:	f008 feb7 	bl	800a8c8 <llroundf>
 8001b5a:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8

	while ((ss & 0x7FFFFFFFE0000000) != 0) {
 8001b5e:	e062      	b.n	8001c26 <SPISetTiPllRampFreq+0x18e>
 8001b60:	20000000 	.word	0x20000000
 8001b64:	4b800000 	.word	0x4b800000
 8001b68:	4c371b00 	.word	0x4c371b00
		if(denq > 2) denq--;
 8001b6c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	f240 824a 	bls.w	800200a <SPISetTiPllRampFreq+0x572>
 8001b76:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		else return; // Unable to set.
		den = (1u << denq) - 1;
 8001b80:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001b84:	2301      	movs	r3, #1
 8001b86:	4093      	lsls	r3, r2
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		ns = llroundf(start * den / TIPLL_FPD);
 8001b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba2:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8001b68 <SPISetTiPllRampFreq+0xd0>
 8001ba6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001baa:	eeb0 0a47 	vmov.f32	s0, s14
 8001bae:	f008 fe8b 	bl	800a8c8 <llroundf>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		ne = llroundf(end   * den / TIPLL_FPD);
 8001bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	ed5f 6a1a 	vldr	s13, [pc, #-104]	; 8001b68 <SPISetTiPllRampFreq+0xd0>
 8001bd2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bd6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bda:	f008 fe75 	bl	800a8c8 <llroundf>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		so = (int64_t)ne - (int64_t)ns;
 8001be6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001bea:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001bee:	1a84      	subs	r4, r0, r2
 8001bf0:	60bc      	str	r4, [r7, #8]
 8001bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bfc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		ss = llroundf(1.0f * so / len);
 8001c00:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001c04:	f7fe fbb4 	bl	8000370 <__aeabi_l2f>
 8001c08:	ee06 0a90 	vmov	s13, r0
 8001c0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1e:	f008 fe53 	bl	800a8c8 <llroundf>
 8001c22:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
	while ((ss & 0x7FFFFFFFE0000000) != 0) {
 8001c26:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001c2a:	f002 4860 	and.w	r8, r2, #3758096384	; 0xe0000000
 8001c2e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c32:	ea58 0309 	orrs.w	r3, r8, r9
 8001c36:	d199      	bne.n	8001b6c <SPISetTiPllRampFreq+0xd4>
	}

	uint32_t sq = ns % den;
 8001c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	627a      	str	r2, [r7, #36]	; 0x24
 8001c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c4a:	f7fe fbcf 	bl	80003ec <__aeabi_uldivmod>
 8001c4e:	4613      	mov	r3, r2
 8001c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint32_t sp = (ns - sq) / den;
 8001c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	469a      	mov	sl, r3
 8001c5c:	4693      	mov	fp, r2
 8001c5e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001c62:	ebb2 010a 	subs.w	r1, r2, sl
 8001c66:	61b9      	str	r1, [r7, #24]
 8001c68:	eb63 030b 	sbc.w	r3, r3, fp
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c72:	2200      	movs	r2, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	617a      	str	r2, [r7, #20]
 8001c78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c80:	f7fe fbb4 	bl	80003ec <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if(sp & 0xFFFF0000) return; // OVF.
 8001c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 81b9 	bne.w	800200e <SPISetTiPllRampFreq+0x576>

	uint64_t rthresh = llroundf(threshbw * 16777216.0f / TIPLL_FPD); // 32bit
 8001c9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ca0:	ed1f 7a50 	vldr	s14, [pc, #-320]	; 8001b64 <SPISetTiPllRampFreq+0xcc>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed5f 6a51 	vldr	s13, [pc, #-324]	; 8001b68 <SPISetTiPllRampFreq+0xd0>
 8001cac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb4:	f008 fe08 	bl	800a8c8 <llroundf>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	uint64_t rlhramp = llroundf(16777216.0f * (limithigh - start) / TIPLL_FPD); // 33bit
 8001cc0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001cc4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ccc:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 8001b64 <SPISetTiPllRampFreq+0xcc>
 8001cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd4:	ed5f 6a5c 	vldr	s13, [pc, #-368]	; 8001b68 <SPISetTiPllRampFreq+0xd0>
 8001cd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce0:	f008 fdf2 	bl	800a8c8 <llroundf>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint64_t rllramp = 8589934592ull - llroundf(16777216.0f * (start - limitlow) / TIPLL_FPD); // 33bit
 8001cec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001cf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8001b64 <SPISetTiPllRampFreq+0xcc>
 8001cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d00:	ed5f 6a67 	vldr	s13, [pc, #-412]	; 8001b68 <SPISetTiPllRampFreq+0xd0>
 8001d04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d08:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0c:	f008 fddc 	bl	800a8c8 <llroundf>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	2102      	movs	r1, #2
 8001d16:	4250      	negs	r0, r2
 8001d18:	6038      	str	r0, [r7, #0]
 8001d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d24:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	const uint8_t aTxBuffers[][3] = {
 8001d28:	2364      	movs	r3, #100	; 0x64
 8001d2a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			SPIInitTiPllW_GenArray(100, len),
 8001d2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d36:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			SPIInitTiPllW_GenArray(100, len),
 8001d3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d3c:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001d42:	2363      	movs	r3, #99	; 0x63
 8001d44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			SPIInitTiPllW_GenArray( 99, ((uint16_t)(ss))),
 8001d48:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d52:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			SPIInitTiPllW_GenArray( 99, ((uint16_t)(ss))),
 8001d56:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
	const uint8_t aTxBuffers[][3] = {
 8001d5a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001d5e:	2362      	movs	r3, #98	; 0x62
 8001d60:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			SPIInitTiPllW_GenArray( 98, ((uint16_t)(ss >> 48) & 0x8000) | ((uint16_t)(ss >> 14) & 0x7FFC) | 0b00),
 8001d64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	0b82      	lsrs	r2, r0, #14
 8001d72:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001d76:	138b      	asrs	r3, r1, #14
 8001d78:	b2d3      	uxtb	r3, r2
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001d80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			SPIInitTiPllW_GenArray( 98, ((uint16_t)(ss >> 48) & 0x8000) | ((uint16_t)(ss >> 14) & 0x7FFC) | 0b00),
 8001d84:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	0b82      	lsrs	r2, r0, #14
 8001d92:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001d96:	138b      	asrs	r3, r1, #14
 8001d98:	b2d3      	uxtb	r3, r2
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001da0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001da4:	2356      	movs	r3, #86	; 0x56
 8001da6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

			SPIInitTiPllW_GenArray( 86, (uint16_t)(rllramp)),
 8001daa:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001db4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			SPIInitTiPllW_GenArray( 86, (uint16_t)(rllramp)),
 8001db8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
	const uint8_t aTxBuffers[][3] = {
 8001dbc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001dc0:	2355      	movs	r3, #85	; 0x55
 8001dc2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			SPIInitTiPllW_GenArray( 85, (uint16_t)(rllramp >> 16)),
 8001dc6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	0c02      	lsrs	r2, r0, #16
 8001dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001dd8:	0c0b      	lsrs	r3, r1, #16
 8001dda:	b293      	uxth	r3, r2
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001de2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			SPIInitTiPllW_GenArray( 85, (uint16_t)(rllramp >> 16)),
 8001de6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	0c02      	lsrs	r2, r0, #16
 8001df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001df8:	0c0b      	lsrs	r3, r1, #16
 8001dfa:	b2d3      	uxtb	r3, r2
	const uint8_t aTxBuffers[][3] = {
 8001dfc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001e00:	2354      	movs	r3, #84	; 0x54
 8001e02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
			SPIInitTiPllW_GenArray( 84, (uint16_t)(rllramp >> 32) & 0x0001),
 8001e0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	000a      	movs	r2, r1
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	b2d3      	uxtb	r3, r2
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001e24:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001e28:	2353      	movs	r3, #83	; 0x53
 8001e2a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			SPIInitTiPllW_GenArray( 83, (uint16_t)(rlhramp)),
 8001e2e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001e38:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			SPIInitTiPllW_GenArray( 83, (uint16_t)(rlhramp)),
 8001e3c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
	const uint8_t aTxBuffers[][3] = {
 8001e40:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8001e44:	2352      	movs	r3, #82	; 0x52
 8001e46:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

			SPIInitTiPllW_GenArray( 82, (uint16_t)(rlhramp >> 16)),
 8001e4a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	0c02      	lsrs	r2, r0, #16
 8001e58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e5c:	0c0b      	lsrs	r3, r1, #16
 8001e5e:	b293      	uxth	r3, r2
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001e66:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			SPIInitTiPllW_GenArray( 82, (uint16_t)(rlhramp >> 16)),
 8001e6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	0c02      	lsrs	r2, r0, #16
 8001e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e7c:	0c0b      	lsrs	r3, r1, #16
 8001e7e:	b2d3      	uxtb	r3, r2
	const uint8_t aTxBuffers[][3] = {
 8001e80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001e84:	2351      	movs	r3, #81	; 0x51
 8001e86:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			SPIInitTiPllW_GenArray( 81, (uint16_t)(rlhramp >> 32) & 0x0001),
 8001e90:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	b2d3      	uxtb	r3, r2
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001ea8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001eac:	2350      	movs	r3, #80	; 0x50
 8001eae:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			SPIInitTiPllW_GenArray( 80, (uint16_t)(rthresh)),
 8001eb2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001ebc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			SPIInitTiPllW_GenArray( 80, (uint16_t)(rthresh)),
 8001ec0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
	const uint8_t aTxBuffers[][3] = {
 8001ec4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001ec8:	234f      	movs	r3, #79	; 0x4f
 8001eca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			SPIInitTiPllW_GenArray( 79, (uint16_t)(rthresh >> 16)),
 8001ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	0c02      	lsrs	r2, r0, #16
 8001edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ee0:	0c0b      	lsrs	r3, r1, #16
 8001ee2:	b293      	uxth	r3, r2
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			SPIInitTiPllW_GenArray( 79, (uint16_t)(rthresh >> 16)),
 8001eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	0c02      	lsrs	r2, r0, #16
 8001efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f00:	0c0b      	lsrs	r3, r1, #16
 8001f02:	b2d3      	uxtb	r3, r2
	const uint8_t aTxBuffers[][3] = {
 8001f04:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8001f08:	232b      	movs	r3, #43	; 0x2b
 8001f0a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 8001f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f1a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			SPIInitTiPllW_GenArray( 43, (uint16_t)(sq)),
 8001f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f22:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f24:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001f28:	232a      	movs	r3, #42	; 0x2a
 8001f2a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f32:	0c1b      	lsrs	r3, r3, #16
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f3c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			SPIInitTiPllW_GenArray( 42, (uint16_t)(sq >> 16)),
 8001f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f48:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001f4c:	2327      	movs	r3, #39	; 0x27
 8001f4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 8001f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f5e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			SPIInitTiPllW_GenArray( 39, (uint16_t)(den)),
 8001f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f66:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f68:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001f6c:	2326      	movs	r3, #38	; 0x26
 8001f6e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f76:	0c1b      	lsrs	r3, r3, #16
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f80:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			SPIInitTiPllW_GenArray( 38, (uint16_t)(den >> 16)),
 8001f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001f8c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001f90:	2324      	movs	r3, #36	; 0x24
 8001f92:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 8001f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001fa2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			SPIInitTiPllW_GenArray( 36, (uint16_t)(sp)),
 8001fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001faa:	b2db      	uxtb	r3, r3
	const uint8_t aTxBuffers[][3] = {
 8001fac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	};

	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001fb6:	e023      	b.n	8002000 <SPISetTiPllRampFreq+0x568>
		__NOP();
 8001fb8:	bf00      	nop
		LL_GPIO_ResetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fbe:	4816      	ldr	r0, [pc, #88]	; (8002018 <SPISetTiPllRampFreq+0x580>)
 8001fc0:	f7ff fb3e 	bl	8001640 <LL_GPIO_ResetOutputPin>
		__NOP();
 8001fc4:	bf00      	nop

		if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 8001fc6:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8001fca:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4419      	add	r1, r3
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	2203      	movs	r2, #3
 8001fda:	4810      	ldr	r0, [pc, #64]	; (800201c <SPISetTiPllRampFreq+0x584>)
 8001fdc:	f003 ff54 	bl	8005e88 <HAL_SPI_Transmit>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SPISetTiPllRampFreq+0x552>
		    Error_Handler();
 8001fe6:	f7ff fac3 	bl	8001570 <Error_Handler>
		}

		__NOP();
 8001fea:	bf00      	nop
		LL_GPIO_SetOutputPin(SPI_CS_PLL_GPIO_Port, SPI_CS_PLL_Pin);
 8001fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <SPISetTiPllRampFreq+0x580>)
 8001ff2:	f7ff fb17 	bl	8001624 <LL_GPIO_SetOutputPin>
	for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8001ff6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8002000:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d9d7      	bls.n	8001fb8 <SPISetTiPllRampFreq+0x520>
 8002008:	e002      	b.n	8002010 <SPISetTiPllRampFreq+0x578>
		else return; // Unable to set.
 800200a:	bf00      	nop
 800200c:	e000      	b.n	8002010 <SPISetTiPllRampFreq+0x578>
	if(sp & 0xFFFF0000) return; // OVF.
 800200e:	bf00      	nop
	}
}
 8002010:	37c0      	adds	r7, #192	; 0xc0
 8002012:	46bd      	mov	sp, r7
 8002014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002018:	48000800 	.word	0x48000800
 800201c:	20000248 	.word	0x20000248

08002020 <SPIInitTiAdc>:

void SPIInitTiAdc() {
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
    const uint8_t aTxBuffers[][3] = {
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <SPIInitTiAdc+0x6c>)
 8002028:	1d3c      	adds	r4, r7, #4
 800202a:	461d      	mov	r5, r3
 800202c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800202e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	8023      	strh	r3, [r4, #0]
            SPIInitTiAdcW_GenArray(0x422, 0x02), // ChA Chopper En
            SPIInitTiAdcW_GenArray(0x522, 0x02), // ChB Chopper En
            SPIInitTiAdcW_GenArray(0x70A, 0x01), // SYSREF Off
    };

    for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]
 8002038:	e01f      	b.n	800207a <SPIInitTiAdc+0x5a>
        __NOP();
 800203a:	bf00      	nop
        LL_GPIO_ResetOutputPin(SPI_CS_ADC_GPIO_Port, SPI_CS_PLL_Pin);
 800203c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002040:	4813      	ldr	r0, [pc, #76]	; (8002090 <SPIInitTiAdc+0x70>)
 8002042:	f7ff fafd 	bl	8001640 <LL_GPIO_ResetOutputPin>
        __NOP();
 8002046:	bf00      	nop

        if (HAL_SPI_Transmit(&hspi2, (uint8_t*)aTxBuffers[i], 3, 10) != HAL_OK) {
 8002048:	7dfa      	ldrb	r2, [r7, #23]
 800204a:	1d39      	adds	r1, r7, #4
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	4419      	add	r1, r3
 8002054:	230a      	movs	r3, #10
 8002056:	2203      	movs	r2, #3
 8002058:	480e      	ldr	r0, [pc, #56]	; (8002094 <SPIInitTiAdc+0x74>)
 800205a:	f003 ff15 	bl	8005e88 <HAL_SPI_Transmit>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SPIInitTiAdc+0x48>
            Error_Handler();
 8002064:	f7ff fa84 	bl	8001570 <Error_Handler>
        }

        __NOP();
 8002068:	bf00      	nop
        LL_GPIO_SetOutputPin(SPI_CS_ADC_GPIO_Port, SPI_CS_PLL_Pin);
 800206a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800206e:	4808      	ldr	r0, [pc, #32]	; (8002090 <SPIInitTiAdc+0x70>)
 8002070:	f7ff fad8 	bl	8001624 <LL_GPIO_SetOutputPin>
    for (uint8_t i = 0; i < COUNTOF(aTxBuffers); i++) {
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	3301      	adds	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d9dc      	bls.n	800203a <SPIInitTiAdc+0x1a>
    }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bdb0      	pop	{r4, r5, r7, pc}
 800208a:	bf00      	nop
 800208c:	0800a994 	.word	0x0800a994
 8002090:	48000400 	.word	0x48000400
 8002094:	20000248 	.word	0x20000248

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_MspInit+0x4c>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_MspInit+0x4c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6613      	str	r3, [r2, #96]	; 0x60
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_MspInit+0x4c>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_MspInit+0x4c>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_MspInit+0x4c>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6593      	str	r3, [r2, #88]	; 0x58
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_MspInit+0x4c>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	210f      	movs	r1, #15
 80020d2:	f06f 0001 	mvn.w	r0, #1
 80020d6:	f002 f956 	bl	8004386 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <NMI_Handler+0x4>

080020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler+0x4>

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <MemManage_Handler+0x4>

080020fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <UsageFault_Handler+0x4>

08002106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 fb9c 	bl	8002854 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800211c:	f007 fd8a 	bl	8009c34 <xTaskGetSchedulerState>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002126:	f006 f987 	bl	8008438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <DMA1_Channel1_IRQHandler+0x10>)
 8002136:	f002 fa15 	bl	8004564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200000f8 	.word	0x200000f8

08002144 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <ADC1_IRQHandler+0x10>)
 800214a:	f000 fe9d 	bl	8002e88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000094 	.word	0x20000094

08002158 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	601a      	str	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d028      	beq.n	8002306 <LL_TIM_OC_DisableFast+0x62>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d023      	beq.n	8002302 <LL_TIM_OC_DisableFast+0x5e>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d01e      	beq.n	80022fe <LL_TIM_OC_DisableFast+0x5a>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d019      	beq.n	80022fa <LL_TIM_OC_DisableFast+0x56>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022cc:	d013      	beq.n	80022f6 <LL_TIM_OC_DisableFast+0x52>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	d00d      	beq.n	80022f2 <LL_TIM_OC_DisableFast+0x4e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022dc:	d007      	beq.n	80022ee <LL_TIM_OC_DisableFast+0x4a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d101      	bne.n	80022ea <LL_TIM_OC_DisableFast+0x46>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00e      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e00c      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00a      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_TIM_OC_DisableFast+0x64>
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3318      	adds	r3, #24
 800230e:	4619      	mov	r1, r3
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <LL_TIM_OC_DisableFast+0x9c>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	440b      	add	r3, r1
 8002318:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	4908      	ldr	r1, [pc, #32]	; (8002344 <LL_TIM_OC_DisableFast+0xa0>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	4619      	mov	r1, r3
 8002326:	2304      	movs	r3, #4
 8002328:	408b      	lsls	r3, r1
 800232a:	43db      	mvns	r3, r3
 800232c:	401a      	ands	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	601a      	str	r2, [r3, #0]

}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	0800aa8c 	.word	0x0800aa8c
 8002344:	0800aa98 	.word	0x0800aa98

08002348 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800235a:	f023 0307 	bic.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	609a      	str	r2, [r3, #8]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	605a      	str	r2, [r3, #4]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	609a      	str	r2, [r3, #8]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_AHB2_GRP1_EnableClock>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40021000 	.word	0x40021000

080023e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000

08002418 <MX_TIM15_Init>:

/* USER CODE END 0 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b09e      	sub	sp, #120	; 0x78
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800241e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800242e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002432:	2220      	movs	r2, #32
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f008 f97c 	bl	800a734 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	2228      	movs	r2, #40	; 0x28
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f008 f975 	bl	800a734 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 800245a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800245e:	f7ff ffc3 	bl	80023e8 <LL_APB2_GRP1_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8002462:	f7ff fe93 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002466:	4603      	mov	r3, r0
 8002468:	2200      	movs	r2, #0
 800246a:	2105      	movs	r1, #5
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fec5 	bl	80021fc <NVIC_EncodePriority>
 8002472:	4603      	mov	r3, r0
 8002474:	4619      	mov	r1, r3
 8002476:	2018      	movs	r0, #24
 8002478:	f7ff fe96 	bl	80021a8 <__NVIC_SetPriority>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002482:	2300      	movs	r3, #0
 8002484:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 65535;
 8002486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800248a:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8002494:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002498:	4619      	mov	r1, r3
 800249a:	483e      	ldr	r0, [pc, #248]	; (8002594 <MX_TIM15_Init+0x17c>)
 800249c:	f004 fd28 	bl	8006ef0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 80024a0:	483c      	ldr	r0, [pc, #240]	; (8002594 <MX_TIM15_Init+0x17c>)
 80024a2:	f7ff feee 	bl	8002282 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM15, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024a6:	2100      	movs	r1, #0
 80024a8:	483a      	ldr	r0, [pc, #232]	; (8002594 <MX_TIM15_Init+0x17c>)
 80024aa:	f7ff ff4d 	bl	8002348 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80024ae:	2310      	movs	r3, #16
 80024b0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80024be:	2300      	movs	r3, #0
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80024c2:	2300      	movs	r3, #0
 80024c4:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80024ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024d2:	461a      	mov	r2, r3
 80024d4:	2101      	movs	r1, #1
 80024d6:	482f      	ldr	r0, [pc, #188]	; (8002594 <MX_TIM15_Init+0x17c>)
 80024d8:	f004 fd68 	bl	8006fac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH1);
 80024dc:	2101      	movs	r1, #1
 80024de:	482d      	ldr	r0, [pc, #180]	; (8002594 <MX_TIM15_Init+0x17c>)
 80024e0:	f7ff fee0 	bl	80022a4 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 80024e4:	2330      	movs	r3, #48	; 0x30
 80024e6:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80024e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024ec:	461a      	mov	r2, r3
 80024ee:	2110      	movs	r1, #16
 80024f0:	4828      	ldr	r0, [pc, #160]	; (8002594 <MX_TIM15_Init+0x17c>)
 80024f2:	f004 fd5b 	bl	8006fac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH2);
 80024f6:	2110      	movs	r1, #16
 80024f8:	4826      	ldr	r0, [pc, #152]	; (8002594 <MX_TIM15_Init+0x17c>)
 80024fa:	f7ff fed3 	bl	80022a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_RESET);
 80024fe:	2100      	movs	r1, #0
 8002500:	4824      	ldr	r0, [pc, #144]	; (8002594 <MX_TIM15_Init+0x17c>)
 8002502:	f7ff ff36 	bl	8002372 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8002506:	4823      	ldr	r0, [pc, #140]	; (8002594 <MX_TIM15_Init+0x17c>)
 8002508:	f7ff ff46 	bl	8002398 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM15, &TIM_BDTRInitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	4818      	ldr	r0, [pc, #96]	; (8002594 <MX_TIM15_Init+0x17c>)
 8002534:	f004 fd9a 	bl	800706c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002538:	2001      	movs	r0, #1
 800253a:	f7ff ff3d 	bl	80023b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800253e:	2002      	movs	r0, #2
 8002540:	f7ff ff3a 	bl	80023b8 <LL_AHB2_GRP1_EnableClock>
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    PB13     ------> TIM15_CH1N
    */
  GPIO_InitStruct.Pin = PLL_RAMPCLK_Pin;
 8002544:	2308      	movs	r3, #8
 8002546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002548:	2302      	movs	r3, #2
 800254a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8002558:	230e      	movs	r3, #14
 800255a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PLL_RAMPCLK_GPIO_Port, &GPIO_InitStruct);
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002564:	f004 f8ad 	bl	80066c2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FGPB13_Pin;
 8002568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800256e:	2302      	movs	r3, #2
 8002570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800257e:	230e      	movs	r3, #14
 8002580:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(FGPB13_GPIO_Port, &GPIO_InitStruct);
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4804      	ldr	r0, [pc, #16]	; (8002598 <MX_TIM15_Init+0x180>)
 8002588:	f004 f89b 	bl	80066c2 <LL_GPIO_Init>

}
 800258c:	bf00      	nop
 800258e:	3778      	adds	r7, #120	; 0x78
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40014000 	.word	0x40014000
 8002598:	48000400 	.word	0x48000400

0800259c <TIM15TiPllRampStart>:

/* USER CODE BEGIN 1 */


void TIM15TiPllRampStart() {
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  //if(!LL_TIM_IsEnabledCounter(TIM15)) {
	  LL_TIM_EnableCounter(TIM15);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <TIM15TiPllRampStart+0x10>)
 80025a2:	f7ff fe5e 	bl	8002262 <LL_TIM_EnableCounter>
  //}
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40014000 	.word	0x40014000

080025b0 <LL_USART_Enable>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f043 0201 	orr.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	601a      	str	r2, [r3, #0]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_USART_ConfigAsyncMode>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_AHB2_GRP1_EnableClock>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4313      	orrs	r3, r2
 800260e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4013      	ands	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000

0800262c <LL_APB2_GRP1_EnableClock>:
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002636:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <LL_APB2_GRP1_EnableClock+0x2c>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4313      	orrs	r3, r2
 800263e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002642:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000

0800265c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0a4      	sub	sp, #144	; 0x90
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002662:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002688:	463b      	mov	r3, r7
 800268a:	225c      	movs	r2, #92	; 0x5c
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f008 f850 	bl	800a734 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002694:	2301      	movs	r3, #1
 8002696:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269c:	463b      	mov	r3, r7
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 ffee 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026aa:	f7fe ff61 	bl	8001570 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80026ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026b2:	f7ff ffbb 	bl	800262c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff ffa0 	bl	80025fc <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80026bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026c2:	2302      	movs	r3, #2
 80026c4:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026ce:	2300      	movs	r3, #0
 80026d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80026d2:	2307      	movs	r3, #7
 80026d4:	673b      	str	r3, [r7, #112]	; 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026da:	4619      	mov	r1, r3
 80026dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e0:	f003 ffef 	bl	80066c2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80026e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026ea:	2302      	movs	r3, #2
 80026ec:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80026fa:	2307      	movs	r3, #7
 80026fc:	673b      	str	r3, [r7, #112]	; 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002708:	f003 ffdb 	bl	80066c2 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800270c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002710:	677b      	str	r3, [r7, #116]	; 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002712:	2300      	movs	r3, #0
 8002714:	67bb      	str	r3, [r7, #120]	; 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002716:	2300      	movs	r3, #0
 8002718:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002720:	230c      	movs	r3, #12
 8002722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002732:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002736:	4619      	mov	r1, r3
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <MX_USART1_UART_Init+0xf8>)
 800273a:	f004 ffeb 	bl	8007714 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART1_UART_Init+0xf8>)
 8002740:	f7ff ff46 	bl	80025d0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <MX_USART1_UART_Init+0xf8>)
 8002746:	f7ff ff33 	bl	80025b0 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3790      	adds	r7, #144	; 0x90
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40013800 	.word	0x40013800

08002758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800275c:	f7ff fd04 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002760:	480c      	ldr	r0, [pc, #48]	; (8002794 <LoopForever+0x6>)
  ldr r1, =_edata
 8002762:	490d      	ldr	r1, [pc, #52]	; (8002798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <LoopForever+0xe>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002778:	4c0a      	ldr	r4, [pc, #40]	; (80027a4 <LoopForever+0x16>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002786:	f007 ffa1 	bl	800a6cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800278a:	f7fe fe87 	bl	800149c <main>

0800278e <LoopForever>:

LoopForever:
    b LoopForever
 800278e:	e7fe      	b.n	800278e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002790:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800279c:	0800ab14 	.word	0x0800ab14
  ldr r2, =_sbss
 80027a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027a4:	20002840 	.word	0x20002840

080027a8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <CAN1_RX0_IRQHandler>

080027aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f001 fddb 	bl	8004370 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ba:	200f      	movs	r0, #15
 80027bc:	f000 f80e 	bl	80027dc <HAL_InitTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	e001      	b.n	80027d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027cc:	f7ff fc64 	bl	8002098 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027d0:	79fb      	ldrb	r3, [r7, #7]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_InitTick+0x6c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d023      	beq.n	8002838 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_InitTick+0x70>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_InitTick+0x6c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fde7 	bl	80043da <HAL_SYSTICK_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b0f      	cmp	r3, #15
 8002816:	d809      	bhi.n	800282c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002818:	2200      	movs	r2, #0
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f001 fdb1 	bl	8004386 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_InitTick+0x74>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e007      	b.n	800283c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	e004      	b.n	800283c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e001      	b.n	800283c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000000c 	.word	0x2000000c
 800284c:	20000004 	.word	0x20000004
 8002850:	20000008 	.word	0x20000008

08002854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x20>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_IncTick+0x24>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_IncTick+0x24>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	2000000c 	.word	0x2000000c
 8002878:	200002b4 	.word	0x200002b4

0800287c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return uwTick;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetTick+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200002b4 	.word	0x200002b4

08002894 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3360      	adds	r3, #96	; 0x60
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <LL_ADC_SetOffset+0x44>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	4313      	orrs	r3, r2
 800292c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	03fff000 	.word	0x03fff000

08002944 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3360      	adds	r3, #96	; 0x60
 8002952:	461a      	mov	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3360      	adds	r3, #96	; 0x60
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	431a      	orrs	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3330      	adds	r3, #48	; 0x30
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	4413      	add	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	211f      	movs	r1, #31
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 011f 	and.w	r1, r3, #31
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	431a      	orrs	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3314      	adds	r3, #20
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	0e5b      	lsrs	r3, r3, #25
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	4413      	add	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0d1b      	lsrs	r3, r3, #20
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	2107      	movs	r1, #7
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	401a      	ands	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	0d1b      	lsrs	r3, r3, #20
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0318 	and.w	r3, r3, #24
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ac4:	40d9      	lsrs	r1, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	400b      	ands	r3, r1
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	0007ffff 	.word	0x0007ffff

08002ae8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6093      	str	r3, [r2, #8]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b20:	d101      	bne.n	8002b26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b70:	d101      	bne.n	8002b76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_IsEnabled+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_ADC_IsEnabled+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d101      	bne.n	8002be8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e12c      	b.n	8002e6c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe f903 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff67 	bl	8002b0c <LL_ADC_IsDeepPowerDownEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff4d 	bl	8002ae8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff82 	bl	8002b5c <LL_ADC_IsInternalRegulatorEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff66 	bl	8002b34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c68:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_ADC_Init+0x27c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	4a82      	ldr	r2, [pc, #520]	; (8002e78 <HAL_ADC_Init+0x280>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c7c:	e002      	b.n	8002c84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f9      	bne.n	8002c7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff64 	bl	8002b5c <LL_ADC_IsInternalRegulatorEnabled>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f043 0210 	orr.w	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff75 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8002cc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80c5 	bne.w	8002e5a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 80c1 	bne.w	8002e5a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff49 	bl	8002b84 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf8:	4860      	ldr	r0, [pc, #384]	; (8002e7c <HAL_ADC_Init+0x284>)
 8002cfa:	f7ff ff43 	bl	8002b84 <LL_ADC_IsEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	485d      	ldr	r0, [pc, #372]	; (8002e80 <HAL_ADC_Init+0x288>)
 8002d0c:	f7ff fdc2 	bl	8002894 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e5b      	ldrb	r3, [r3, #25]
 8002d14:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d1a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d20:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d26:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	3b01      	subs	r3, #1
 8002d44:	045b      	lsls	r3, r3, #17
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <HAL_ADC_Init+0x28c>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	69b9      	ldr	r1, [r7, #24]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff12 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8002d86:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff1f 	bl	8002bd0 <LL_ADC_INJ_IsConversionOngoing>
 8002d92:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d13d      	bne.n	8002e16 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d13a      	bne.n	8002e16 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dbc:	f023 0302 	bic.w	r3, r3, #2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	69b9      	ldr	r1, [r7, #24]
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d118      	bne.n	8002e06 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002df0:	4311      	orrs	r1, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df6:	430a      	orrs	r2, r1
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
 8002e04:	e007      	b.n	8002e16 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10c      	bne.n	8002e38 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f023 010f 	bic.w	r1, r3, #15
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	1e5a      	subs	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
 8002e36:	e007      	b.n	8002e48 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 020f 	bic.w	r2, r2, #15
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f023 0303 	bic.w	r3, r3, #3
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54
 8002e58:	e007      	b.n	8002e6a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f043 0210 	orr.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000004 	.word	0x20000004
 8002e78:	053e2d63 	.word	0x053e2d63
 8002e7c:	50040000 	.word	0x50040000
 8002e80:	50040300 	.word	0x50040300
 8002e84:	fff0c007 	.word	0xfff0c007

08002e88 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d017      	beq.n	8002ede <HAL_ADC_IRQHandler+0x56>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fdb3 	bl	8003a3c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2202      	movs	r2, #2
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <HAL_ADC_IRQHandler+0x6a>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05e      	beq.n	8002fba <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d059      	beq.n	8002fba <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fd3f 	bl	80029a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03e      	beq.n	8002fac <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d135      	bne.n	8002fac <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d12e      	bne.n	8002fac <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fe29 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11a      	bne.n	8002f94 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 020c 	bic.w	r2, r2, #12
 8002f6c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d112      	bne.n	8002fac <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
 8002f92:	e00b      	b.n	8002fac <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0210 	orr.w	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f91f 	bl	80031f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_ADC_IRQHandler+0x146>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d072      	beq.n	80030be <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d06d      	beq.n	80030be <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fd10 	bl	8002a24 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003004:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fccb 	bl	80029a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003010:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d047      	beq.n	80030b0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_ADC_IRQHandler+0x1b2>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d03f      	beq.n	80030b0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003036:	2b00      	cmp	r3, #0
 8003038:	d13a      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d133      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d12e      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fdba 	bl	8002bd0 <LL_ADC_INJ_IsConversionOngoing>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11a      	bne.n	8003098 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003070:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d112      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
 8003096:	e00b      	b.n	80030b0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f043 0201 	orr.w	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fc9b 	bl	80039ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2260      	movs	r2, #96	; 0x60
 80030bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d011      	beq.n	80030ec <HAL_ADC_IRQHandler+0x264>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f890 	bl	8003204 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2280      	movs	r2, #128	; 0x80
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d012      	beq.n	800311c <HAL_ADC_IRQHandler+0x294>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fc81 	bl	8003a14 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <HAL_ADC_IRQHandler+0x2c4>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fc73 	bl	8003a28 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d02a      	beq.n	80031ac <HAL_ADC_IRQHandler+0x324>
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d025      	beq.n	80031ac <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e008      	b.n	8003180 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800317c:	2301      	movs	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d10e      	bne.n	80031a4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	f043 0202 	orr.w	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f83a 	bl	8003218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2210      	movs	r2, #16
 80031aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <HAL_ADC_IRQHandler+0x360>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	f043 0208 	orr.w	r2, r3, #8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fc0c 	bl	8003a00 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031e8:	bf00      	nop
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0b6      	sub	sp, #216	; 0xd8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x22>
 800324a:	2302      	movs	r3, #2
 800324c:	e3b9      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x796>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fca5 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	f040 839e 	bne.w	80039a4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d824      	bhi.n	80032ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	3b02      	subs	r3, #2
 8003276:	2b03      	cmp	r3, #3
 8003278:	d81b      	bhi.n	80032b2 <HAL_ADC_ConfigChannel+0x86>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_ADC_ConfigChannel+0x54>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	08003291 	.word	0x08003291
 8003284:	08003299 	.word	0x08003299
 8003288:	080032a1 	.word	0x080032a1
 800328c:	080032a9 	.word	0x080032a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	220c      	movs	r2, #12
 8003294:	605a      	str	r2, [r3, #4]
          break;
 8003296:	e011      	b.n	80032bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2212      	movs	r2, #18
 800329c:	605a      	str	r2, [r3, #4]
          break;
 800329e:	e00d      	b.n	80032bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2218      	movs	r2, #24
 80032a4:	605a      	str	r2, [r3, #4]
          break;
 80032a6:	e009      	b.n	80032bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ae:	605a      	str	r2, [r3, #4]
          break;
 80032b0:	e004      	b.n	80032bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2206      	movs	r2, #6
 80032b6:	605a      	str	r2, [r3, #4]
          break;
 80032b8:	e000      	b.n	80032bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80032ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	f7ff fb7f 	bl	80029cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fc69 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 80032d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fc75 	bl	8002bd0 <LL_ADC_INJ_IsConversionOngoing>
 80032e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 81a6 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 81a1 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	461a      	mov	r2, r3
 800330c:	f7ff fb9d 	bl	8002a4a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	08db      	lsrs	r3, r3, #3
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00a      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6919      	ldr	r1, [r3, #16]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003342:	f7ff fadb 	bl	80028fc <LL_ADC_SetOffset>
 8003346:	e17b      	b.n	8003640 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff faf8 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x148>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff faed 	bl	8002944 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	e01e      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x186>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fae2 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800339a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80033a2:	2320      	movs	r3, #32
 80033a4:	e004      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80033a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x19e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	e018      	b.n	80033fc <HAL_ADC_ConfigChannel+0x1d0>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80033de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80033e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80033ee:	2320      	movs	r3, #32
 80033f0:	e004      	b.n	80033fc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80033f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d106      	bne.n	800340e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fab1 	bl	8002970 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fa95 	bl	8002944 <LL_ADC_GetOffsetChannel>
 800341a:	4603      	mov	r3, r0
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_ADC_ConfigChannel+0x20e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fa8a 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003430:	4603      	mov	r3, r0
 8003432:	0e9b      	lsrs	r3, r3, #26
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	e01e      	b.n	8003478 <HAL_ADC_ConfigChannel+0x24c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fa7f 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800345c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003468:	2320      	movs	r3, #32
 800346a:	e004      	b.n	8003476 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800346c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x264>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	e018      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x296>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80034a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80034ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e004      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80034b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d106      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fa4e 	bl	8002970 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2102      	movs	r1, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fa32 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x2d4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fa27 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	f003 021f 	and.w	r2, r3, #31
 80034fe:	e01e      	b.n	800353e <HAL_ADC_ConfigChannel+0x312>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fa1c 	bl	8002944 <LL_ADC_GetOffsetChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800351e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e004      	b.n	800353c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x32a>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	e016      	b.n	8003584 <HAL_ADC_ConfigChannel+0x358>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800356a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800356e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e004      	b.n	8003584 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800357a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003584:	429a      	cmp	r2, r3
 8003586:	d106      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2200      	movs	r2, #0
 800358e:	2102      	movs	r1, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f9ed 	bl	8002970 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2103      	movs	r1, #3
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff f9d1 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x396>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2103      	movs	r1, #3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff f9c6 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	0e9b      	lsrs	r3, r3, #26
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	e017      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x3c6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2103      	movs	r1, #3
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff f9bb 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80035ce:	4603      	mov	r3, r0
 80035d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80035da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80035de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80035e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_ADC_ConfigChannel+0x3de>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	e011      	b.n	800362e <HAL_ADC_ConfigChannel+0x402>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800362e:	429a      	cmp	r2, r3
 8003630:	d106      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	2103      	movs	r1, #3
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f998 	bl	8002970 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fa9d 	bl	8002b84 <LL_ADC_IsEnabled>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 813f 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f7ff fa1e 	bl	8002aa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a8e      	ldr	r2, [pc, #568]	; (80038a4 <HAL_ADC_ConfigChannel+0x678>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f040 8130 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x46c>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	3301      	adds	r3, #1
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b09      	cmp	r3, #9
 800368e:	bf94      	ite	ls
 8003690:	2301      	movls	r3, #1
 8003692:	2300      	movhi	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e019      	b.n	80036cc <HAL_ADC_ConfigChannel+0x4a0>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80036a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80036aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80036b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2b09      	cmp	r3, #9
 80036c4:	bf94      	ite	ls
 80036c6:	2301      	movls	r3, #1
 80036c8:	2300      	movhi	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d079      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x4c0>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e9b      	lsrs	r3, r3, #26
 80036e2:	3301      	adds	r3, #1
 80036e4:	069b      	lsls	r3, r3, #26
 80036e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ea:	e015      	b.n	8003718 <HAL_ADC_ConfigChannel+0x4ec>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80036fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e003      	b.n	8003710 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	069b      	lsls	r3, r3, #26
 8003714:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x50c>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	3301      	adds	r3, #1
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	e017      	b.n	8003768 <HAL_ADC_ConfigChannel+0x53c>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003748:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800374a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	ea42 0103 	orr.w	r1, r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <HAL_ADC_ConfigChannel+0x562>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	3301      	adds	r3, #1
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	051b      	lsls	r3, r3, #20
 800378c:	e018      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x594>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e003      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f003 021f 	and.w	r2, r3, #31
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c0:	430b      	orrs	r3, r1
 80037c2:	e080      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x5b4>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	3301      	adds	r3, #1
 80037d8:	069b      	lsls	r3, r3, #26
 80037da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037de:	e015      	b.n	800380c <HAL_ADC_ConfigChannel+0x5e0>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e003      	b.n	8003804 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	3301      	adds	r3, #1
 8003806:	069b      	lsls	r3, r3, #26
 8003808:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_ADC_ConfigChannel+0x600>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	e017      	b.n	800385c <HAL_ADC_ConfigChannel+0x630>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	61fb      	str	r3, [r7, #28]
  return result;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	e003      	b.n	8003850 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2101      	movs	r1, #1
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10d      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x65c>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	0e9b      	lsrs	r3, r3, #26
 8003872:	3301      	adds	r3, #1
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	3b1e      	subs	r3, #30
 8003880:	051b      	lsls	r3, r3, #20
 8003882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003886:	e01d      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x698>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	613b      	str	r3, [r7, #16]
  return result;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80038a0:	2320      	movs	r3, #32
 80038a2:	e005      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x684>
 80038a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	3b1e      	subs	r3, #30
 80038be:	051b      	lsls	r3, r3, #20
 80038c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c4:	430b      	orrs	r3, r1
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7ff f8bd 	bl	8002a4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <HAL_ADC_ConfigChannel+0x7a0>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d06c      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038dc:	483c      	ldr	r0, [pc, #240]	; (80039d0 <HAL_ADC_ConfigChannel+0x7a4>)
 80038de:	f7fe ffff 	bl	80028e0 <LL_ADC_GetCommonPathInternalCh>
 80038e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3a      	ldr	r2, [pc, #232]	; (80039d4 <HAL_ADC_ConfigChannel+0x7a8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d127      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d121      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a35      	ldr	r2, [pc, #212]	; (80039d8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d157      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800390a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800390e:	4619      	mov	r1, r3
 8003910:	482f      	ldr	r0, [pc, #188]	; (80039d0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003912:	f7fe ffd2 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003916:	4b31      	ldr	r3, [pc, #196]	; (80039dc <HAL_ADC_ConfigChannel+0x7b0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	4a30      	ldr	r2, [pc, #192]	; (80039e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003930:	e002      	b.n	8003938 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3b01      	subs	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f9      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800393e:	e03a      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d113      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x746>
 800394a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800394e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10d      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <HAL_ADC_ConfigChannel+0x7ac>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d12a      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003968:	4619      	mov	r1, r3
 800396a:	4819      	ldr	r0, [pc, #100]	; (80039d0 <HAL_ADC_ConfigChannel+0x7a4>)
 800396c:	f7fe ffa5 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003970:	e021      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d11c      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800397c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <HAL_ADC_ConfigChannel+0x7ac>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d111      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003996:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800399a:	4619      	mov	r1, r3
 800399c:	480c      	ldr	r0, [pc, #48]	; (80039d0 <HAL_ADC_ConfigChannel+0x7a4>)
 800399e:	f7fe ff8c 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
 80039a2:	e008      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	37d8      	adds	r7, #216	; 0xd8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	80080000 	.word	0x80080000
 80039d0:	50040300 	.word	0x50040300
 80039d4:	c7520000 	.word	0xc7520000
 80039d8:	50040000 	.word	0x50040000
 80039dc:	20000004 	.word	0x20000004
 80039e0:	053e2d63 	.word	0x053e2d63
 80039e4:	cb840000 	.word	0xcb840000
 80039e8:	80000001 	.word	0x80000001

080039ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e11c      	b.n	8003c9c <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d131      	bne.n	8003ad2 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a8c      	ldr	r2, [pc, #560]	; (8003ca4 <HAL_CAN_Init+0x254>)
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a8c      	ldr	r2, [pc, #560]	; (8003ca8 <HAL_CAN_Init+0x258>)
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a8b      	ldr	r2, [pc, #556]	; (8003cac <HAL_CAN_Init+0x25c>)
 8003a7e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a8b      	ldr	r2, [pc, #556]	; (8003cb0 <HAL_CAN_Init+0x260>)
 8003a84:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a8a      	ldr	r2, [pc, #552]	; (8003cb4 <HAL_CAN_Init+0x264>)
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a8a      	ldr	r2, [pc, #552]	; (8003cb8 <HAL_CAN_Init+0x268>)
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a89      	ldr	r2, [pc, #548]	; (8003cbc <HAL_CAN_Init+0x26c>)
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a89      	ldr	r2, [pc, #548]	; (8003cc0 <HAL_CAN_Init+0x270>)
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a88      	ldr	r2, [pc, #544]	; (8003cc4 <HAL_CAN_Init+0x274>)
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a88      	ldr	r2, [pc, #544]	; (8003cc8 <HAL_CAN_Init+0x278>)
 8003aa8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a87      	ldr	r2, [pc, #540]	; (8003ccc <HAL_CAN_Init+0x27c>)
 8003aae:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a87      	ldr	r2, [pc, #540]	; (8003cd0 <HAL_CAN_Init+0x280>)
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a86      	ldr	r2, [pc, #536]	; (8003cd4 <HAL_CAN_Init+0x284>)
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a84      	ldr	r2, [pc, #528]	; (8003cd8 <HAL_CAN_Init+0x288>)
 8003ac8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae2:	f7fe fecb 	bl	800287c <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ae8:	e012      	b.n	8003b10 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003aea:	f7fe fec7 	bl	800287c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b0a      	cmp	r3, #10
 8003af6:	d90b      	bls.n	8003b10 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2205      	movs	r2, #5
 8003b08:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0c5      	b.n	8003c9c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0e5      	beq.n	8003aea <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0202 	bic.w	r2, r2, #2
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b2e:	f7fe fea5 	bl	800287c <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b34:	e012      	b.n	8003b5c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b36:	f7fe fea1 	bl	800287c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b0a      	cmp	r3, #10
 8003b42:	d90b      	bls.n	8003b5c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2205      	movs	r2, #5
 8003b54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e09f      	b.n	8003c9c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e5      	bne.n	8003b36 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7e1b      	ldrb	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d108      	bne.n	8003b84 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e007      	b.n	8003b94 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7e5b      	ldrb	r3, [r3, #25]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d108      	bne.n	8003bae <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e007      	b.n	8003bbe <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7e9b      	ldrb	r3, [r3, #26]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d108      	bne.n	8003bd8 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0220 	orr.w	r2, r2, #32
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e007      	b.n	8003be8 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0220 	bic.w	r2, r2, #32
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	7edb      	ldrb	r3, [r3, #27]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d108      	bne.n	8003c02 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0210 	bic.w	r2, r2, #16
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e007      	b.n	8003c12 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0210 	orr.w	r2, r2, #16
 8003c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7f1b      	ldrb	r3, [r3, #28]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d108      	bne.n	8003c2c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0208 	orr.w	r2, r2, #8
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e007      	b.n	8003c3c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0208 	bic.w	r2, r2, #8
 8003c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	7f5b      	ldrb	r3, [r3, #29]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d108      	bne.n	8003c56 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0204 	orr.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e007      	b.n	8003c66 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0204 	bic.w	r2, r2, #4
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	ea42 0103 	orr.w	r1, r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	1e5a      	subs	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	080010a1 	.word	0x080010a1
 8003ca8:	08004159 	.word	0x08004159
 8003cac:	0800416d 	.word	0x0800416d
 8003cb0:	08004181 	.word	0x08004181
 8003cb4:	080040e1 	.word	0x080040e1
 8003cb8:	080040f5 	.word	0x080040f5
 8003cbc:	08004109 	.word	0x08004109
 8003cc0:	0800411d 	.word	0x0800411d
 8003cc4:	08004131 	.word	0x08004131
 8003cc8:	08004145 	.word	0x08004145
 8003ccc:	08004195 	.word	0x08004195
 8003cd0:	080041a9 	.word	0x080041a9
 8003cd4:	080041bd 	.word	0x080041bd
 8003cd8:	08001019 	.word	0x08001019

08003cdc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d003      	beq.n	8003d02 <HAL_CAN_ConfigFilter+0x26>
 8003cfa:	7cfb      	ldrb	r3, [r7, #19]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	f040 80aa 	bne.w	8003e56 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	401a      	ands	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d123      	bne.n	8003d84 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3248      	adds	r2, #72	; 0x48
 8003d64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	3348      	adds	r3, #72	; 0x48
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d122      	bne.n	8003dd2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	3248      	adds	r2, #72	; 0x48
 8003db2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dc8:	6979      	ldr	r1, [r7, #20]
 8003dca:	3348      	adds	r3, #72	; 0x48
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	401a      	ands	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003dec:	e007      	b.n	8003dfe <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	401a      	ands	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003e18:	e007      	b.n	8003e2a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e48:	f023 0201 	bic.w	r2, r3, #1
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e006      	b.n	8003e64 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e84:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d003      	beq.n	8003e94 <HAL_CAN_GetRxMessage+0x24>
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	f040 80f3 	bne.w	800407a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10e      	bne.n	8003eb8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d116      	bne.n	8003ed6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0e7      	b.n	8004088 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d107      	bne.n	8003ed6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0d8      	b.n	8004088 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	331b      	adds	r3, #27
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	4413      	add	r3, r2
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0204 	and.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10c      	bne.n	8003f0e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	331b      	adds	r3, #27
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	4413      	add	r3, r2
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0d5b      	lsrs	r3, r3, #21
 8003f04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e00b      	b.n	8003f26 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	331b      	adds	r3, #27
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	4413      	add	r3, r2
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	08db      	lsrs	r3, r3, #3
 8003f1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	331b      	adds	r3, #27
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	4413      	add	r3, r2
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0202 	and.w	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	331b      	adds	r3, #27
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	4413      	add	r3, r2
 8003f48:	3304      	adds	r3, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 020f 	and.w	r2, r3, #15
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	331b      	adds	r3, #27
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	331b      	adds	r3, #27
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	4413      	add	r3, r2
 8003f78:	3304      	adds	r3, #4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	0a1a      	lsrs	r2, r3, #8
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0c1a      	lsrs	r2, r3, #16
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	3302      	adds	r3, #2
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0e1a      	lsrs	r2, r3, #24
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	3303      	adds	r3, #3
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	4413      	add	r3, r2
 800400a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0a1a      	lsrs	r2, r3, #8
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	3305      	adds	r3, #5
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4413      	add	r3, r2
 8004024:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0c1a      	lsrs	r2, r3, #16
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	3306      	adds	r3, #6
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	4413      	add	r3, r2
 800403e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0e1a      	lsrs	r2, r3, #24
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	3307      	adds	r3, #7
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d108      	bne.n	8004066 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0220 	orr.w	r2, r2, #32
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	e007      	b.n	8004076 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0220 	orr.w	r2, r2, #32
 8004074:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e006      	b.n	8004088 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d002      	beq.n	80040b2 <HAL_CAN_ActivateNotification+0x1e>
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d109      	bne.n	80040c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6959      	ldr	r1, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e006      	b.n	80040d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
  }
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <__NVIC_SetPriorityGrouping>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041ec:	4013      	ands	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	60d3      	str	r3, [r2, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_GetPriorityGrouping>:
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <__NVIC_GetPriorityGrouping+0x18>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 0307 	and.w	r3, r3, #7
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_EnableIRQ>:
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	db0b      	blt.n	800425e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4907      	ldr	r1, [pc, #28]	; (800426c <__NVIC_EnableIRQ+0x38>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2001      	movs	r0, #1
 8004256:	fa00 f202 	lsl.w	r2, r0, r2
 800425a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	e000e100 	.word	0xe000e100

08004270 <__NVIC_SetPriority>:
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db0a      	blt.n	800429a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	490c      	ldr	r1, [pc, #48]	; (80042bc <__NVIC_SetPriority+0x4c>)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	0112      	lsls	r2, r2, #4
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	440b      	add	r3, r1
 8004294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004298:	e00a      	b.n	80042b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4908      	ldr	r1, [pc, #32]	; (80042c0 <__NVIC_SetPriority+0x50>)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3b04      	subs	r3, #4
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	440b      	add	r3, r1
 80042ae:	761a      	strb	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000e100 	.word	0xe000e100
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <NVIC_EncodePriority>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f1c3 0307 	rsb	r3, r3, #7
 80042de:	2b04      	cmp	r3, #4
 80042e0:	bf28      	it	cs
 80042e2:	2304      	movcs	r3, #4
 80042e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d902      	bls.n	80042f4 <NVIC_EncodePriority+0x30>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3b03      	subs	r3, #3
 80042f2:	e000      	b.n	80042f6 <NVIC_EncodePriority+0x32>
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	401a      	ands	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800430c:	f04f 31ff 	mov.w	r1, #4294967295
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43d9      	mvns	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800431c:	4313      	orrs	r3, r2
}
 800431e:	4618      	mov	r0, r3
 8004320:	3724      	adds	r7, #36	; 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800433c:	d301      	bcc.n	8004342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800433e:	2301      	movs	r3, #1
 8004340:	e00f      	b.n	8004362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <SysTick_Config+0x40>)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800434a:	210f      	movs	r1, #15
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	f7ff ff8e 	bl	8004270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <SysTick_Config+0x40>)
 8004356:	2200      	movs	r2, #0
 8004358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <SysTick_Config+0x40>)
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	e000e010 	.word	0xe000e010

08004370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff29 	bl	80041d0 <__NVIC_SetPriorityGrouping>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	4603      	mov	r3, r0
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004398:	f7ff ff3e 	bl	8004218 <__NVIC_GetPriorityGrouping>
 800439c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f7ff ff8e 	bl	80042c4 <NVIC_EncodePriority>
 80043a8:	4602      	mov	r2, r0
 80043aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff5d 	bl	8004270 <__NVIC_SetPriority>
}
 80043b6:	bf00      	nop
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff31 	bl	8004234 <__NVIC_EnableIRQ>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ffa2 	bl	800432c <SysTick_Config>
 80043e8:	4603      	mov	r3, r0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e098      	b.n	8004538 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	4b4d      	ldr	r3, [pc, #308]	; (8004544 <HAL_DMA_Init+0x150>)
 800440e:	429a      	cmp	r2, r3
 8004410:	d80f      	bhi.n	8004432 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	4b4b      	ldr	r3, [pc, #300]	; (8004548 <HAL_DMA_Init+0x154>)
 800441a:	4413      	add	r3, r2
 800441c:	4a4b      	ldr	r2, [pc, #300]	; (800454c <HAL_DMA_Init+0x158>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	009a      	lsls	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a48      	ldr	r2, [pc, #288]	; (8004550 <HAL_DMA_Init+0x15c>)
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
 8004430:	e00e      	b.n	8004450 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	4b46      	ldr	r3, [pc, #280]	; (8004554 <HAL_DMA_Init+0x160>)
 800443a:	4413      	add	r3, r2
 800443c:	4a43      	ldr	r2, [pc, #268]	; (800454c <HAL_DMA_Init+0x158>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	009a      	lsls	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a42      	ldr	r2, [pc, #264]	; (8004558 <HAL_DMA_Init+0x164>)
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044aa:	d039      	beq.n	8004520 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <HAL_DMA_Init+0x15c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d11a      	bne.n	80044ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044b6:	4b29      	ldr	r3, [pc, #164]	; (800455c <HAL_DMA_Init+0x168>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f003 031c 	and.w	r3, r3, #28
 80044c2:	210f      	movs	r1, #15
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	4924      	ldr	r1, [pc, #144]	; (800455c <HAL_DMA_Init+0x168>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044d0:	4b22      	ldr	r3, [pc, #136]	; (800455c <HAL_DMA_Init+0x168>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	f003 031c 	and.w	r3, r3, #28
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	491d      	ldr	r1, [pc, #116]	; (800455c <HAL_DMA_Init+0x168>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
 80044ea:	e019      	b.n	8004520 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_DMA_Init+0x16c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f4:	f003 031c 	and.w	r3, r3, #28
 80044f8:	210f      	movs	r1, #15
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	4917      	ldr	r1, [pc, #92]	; (8004560 <HAL_DMA_Init+0x16c>)
 8004502:	4013      	ands	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_DMA_Init+0x16c>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	f003 031c 	and.w	r3, r3, #28
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	4911      	ldr	r1, [pc, #68]	; (8004560 <HAL_DMA_Init+0x16c>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40020407 	.word	0x40020407
 8004548:	bffdfff8 	.word	0xbffdfff8
 800454c:	cccccccd 	.word	0xcccccccd
 8004550:	40020000 	.word	0x40020000
 8004554:	bffdfbf8 	.word	0xbffdfbf8
 8004558:	40020400 	.word	0x40020400
 800455c:	400200a8 	.word	0x400200a8
 8004560:	400204a8 	.word	0x400204a8

08004564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	f003 031c 	and.w	r3, r3, #28
 8004584:	2204      	movs	r2, #4
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d026      	beq.n	80045de <HAL_DMA_IRQHandler+0x7a>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d021      	beq.n	80045de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0204 	bic.w	r2, r2, #4
 80045b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f003 021c 	and.w	r2, r3, #28
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2104      	movs	r1, #4
 80045c6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d071      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80045dc:	e06c      	b.n	80046b8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f003 031c 	and.w	r3, r3, #28
 80045e6:	2202      	movs	r2, #2
 80045e8:	409a      	lsls	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02e      	beq.n	8004650 <HAL_DMA_IRQHandler+0xec>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d029      	beq.n	8004650 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 020a 	bic.w	r2, r2, #10
 8004618:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f003 021c 	and.w	r2, r3, #28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2102      	movs	r1, #2
 8004630:	fa01 f202 	lsl.w	r2, r1, r2
 8004634:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d038      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800464e:	e033      	b.n	80046b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004654:	f003 031c 	and.w	r3, r3, #28
 8004658:	2208      	movs	r2, #8
 800465a:	409a      	lsls	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02a      	beq.n	80046ba <HAL_DMA_IRQHandler+0x156>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d025      	beq.n	80046ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 020e 	bic.w	r2, r2, #14
 800467c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f003 021c 	and.w	r2, r3, #28
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f202 	lsl.w	r2, r1, r2
 8004690:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
}
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d2:	e154      	b.n	800497e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2101      	movs	r1, #1
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	fa01 f303 	lsl.w	r3, r1, r3
 80046e0:	4013      	ands	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8146 	beq.w	8004978 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d005      	beq.n	8004704 <HAL_GPIO_Init+0x40>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d130      	bne.n	8004766 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2203      	movs	r2, #3
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800473a:	2201      	movs	r2, #1
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0201 	and.w	r2, r3, #1
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b03      	cmp	r3, #3
 8004770:	d017      	beq.n	80047a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	2203      	movs	r2, #3
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d123      	bne.n	80047f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	08da      	lsrs	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3208      	adds	r2, #8
 80047b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	220f      	movs	r2, #15
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	08da      	lsrs	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3208      	adds	r2, #8
 80047f0:	6939      	ldr	r1, [r7, #16]
 80047f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	2203      	movs	r2, #3
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 0203 	and.w	r2, r3, #3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80a0 	beq.w	8004978 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004838:	4b58      	ldr	r3, [pc, #352]	; (800499c <HAL_GPIO_Init+0x2d8>)
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	4a57      	ldr	r2, [pc, #348]	; (800499c <HAL_GPIO_Init+0x2d8>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6613      	str	r3, [r2, #96]	; 0x60
 8004844:	4b55      	ldr	r3, [pc, #340]	; (800499c <HAL_GPIO_Init+0x2d8>)
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004850:	4a53      	ldr	r2, [pc, #332]	; (80049a0 <HAL_GPIO_Init+0x2dc>)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	3302      	adds	r3, #2
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	220f      	movs	r2, #15
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800487a:	d019      	beq.n	80048b0 <HAL_GPIO_Init+0x1ec>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a49      	ldr	r2, [pc, #292]	; (80049a4 <HAL_GPIO_Init+0x2e0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_GPIO_Init+0x1e8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a48      	ldr	r2, [pc, #288]	; (80049a8 <HAL_GPIO_Init+0x2e4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00d      	beq.n	80048a8 <HAL_GPIO_Init+0x1e4>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a47      	ldr	r2, [pc, #284]	; (80049ac <HAL_GPIO_Init+0x2e8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <HAL_GPIO_Init+0x1e0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a46      	ldr	r2, [pc, #280]	; (80049b0 <HAL_GPIO_Init+0x2ec>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_GPIO_Init+0x1dc>
 800489c:	2304      	movs	r3, #4
 800489e:	e008      	b.n	80048b2 <HAL_GPIO_Init+0x1ee>
 80048a0:	2307      	movs	r3, #7
 80048a2:	e006      	b.n	80048b2 <HAL_GPIO_Init+0x1ee>
 80048a4:	2303      	movs	r3, #3
 80048a6:	e004      	b.n	80048b2 <HAL_GPIO_Init+0x1ee>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e002      	b.n	80048b2 <HAL_GPIO_Init+0x1ee>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_GPIO_Init+0x1ee>
 80048b0:	2300      	movs	r3, #0
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	f002 0203 	and.w	r2, r2, #3
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	4093      	lsls	r3, r2
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048c2:	4937      	ldr	r1, [pc, #220]	; (80049a0 <HAL_GPIO_Init+0x2dc>)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d0:	4b38      	ldr	r3, [pc, #224]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	43db      	mvns	r3, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4013      	ands	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f4:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048fa:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800491e:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	43db      	mvns	r3, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004948:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800494e:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	43db      	mvns	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <HAL_GPIO_Init+0x2f0>)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f aea3 	bne.w	80046d4 <HAL_GPIO_Init+0x10>
  }
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010000 	.word	0x40010000
 80049a4:	48000400 	.word	0x48000400
 80049a8:	48000800 	.word	0x48000800
 80049ac:	48000c00 	.word	0x48000c00
 80049b0:	48001000 	.word	0x48001000
 80049b4:	40010400 	.word	0x40010400

080049b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40007000 	.word	0x40007000

080049d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e2:	d130      	bne.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e4:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f0:	d038      	beq.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2232      	movs	r2, #50	; 0x32
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0c9b      	lsrs	r3, r3, #18
 8004a14:	3301      	adds	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a18:	e002      	b.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d102      	bne.n	8004a34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f2      	bne.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a40:	d110      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e00f      	b.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a52:	d007      	beq.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a5c:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40007000 	.word	0x40007000
 8004a78:	20000004 	.word	0x20000004
 8004a7c:	431bde83 	.word	0x431bde83

08004a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f000 bc02 	b.w	8005298 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a94:	4b96      	ldr	r3, [pc, #600]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a9e:	4b94      	ldr	r3, [pc, #592]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80e4 	beq.w	8004c7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <HAL_RCC_OscConfig+0x4c>
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	f040 808b 	bne.w	8004bda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	f040 8087 	bne.w	8004bda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004acc:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x64>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e3d9      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	4b81      	ldr	r3, [pc, #516]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HAL_RCC_OscConfig+0x7e>
 8004af4:	4b7e      	ldr	r3, [pc, #504]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afc:	e005      	b.n	8004b0a <HAL_RCC_OscConfig+0x8a>
 8004afe:	4b7c      	ldr	r3, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d223      	bcs.n	8004b56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fd54 	bl	80055c0 <RCC_SetFlashLatencyFromMSIRange>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e3ba      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b22:	4b73      	ldr	r3, [pc, #460]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a72      	ldr	r2, [pc, #456]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b28:	f043 0308 	orr.w	r3, r3, #8
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	496d      	ldr	r1, [pc, #436]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b40:	4b6b      	ldr	r3, [pc, #428]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	4968      	ldr	r1, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
 8004b54:	e025      	b.n	8004ba2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b56:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4960      	ldr	r1, [pc, #384]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b74:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	495b      	ldr	r1, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fd14 	bl	80055c0 <RCC_SetFlashLatencyFromMSIRange>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e37a      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba2:	f000 fc81 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4b51      	ldr	r3, [pc, #324]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	4950      	ldr	r1, [pc, #320]	; (8004cf4 <HAL_RCC_OscConfig+0x274>)
 8004bb4:	5ccb      	ldrb	r3, [r1, r3]
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	4a4e      	ldr	r2, [pc, #312]	; (8004cf8 <HAL_RCC_OscConfig+0x278>)
 8004bc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	; (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd fe08 	bl	80027dc <HAL_InitTick>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d052      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	e35e      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d032      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004be2:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a42      	ldr	r2, [pc, #264]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bee:	f7fd fe45 	bl	800287c <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bf6:	f7fd fe41 	bl	800287c <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e347      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c08:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c14:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a35      	ldr	r2, [pc, #212]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	f043 0308 	orr.w	r3, r3, #8
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b33      	ldr	r3, [pc, #204]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4930      	ldr	r1, [pc, #192]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c32:	4b2f      	ldr	r3, [pc, #188]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	492b      	ldr	r1, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
 8004c46:	e01a      	b.n	8004c7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c54:	f7fd fe12 	bl	800287c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5c:	f7fd fe0e 	bl	800287c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e314      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1dc>
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d073      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_OscConfig+0x21c>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d10e      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d063      	beq.n	8004d70 <HAL_RCC_OscConfig+0x2f0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d15f      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e2f1      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d106      	bne.n	8004ccc <HAL_RCC_OscConfig+0x24c>
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e025      	b.n	8004d18 <HAL_RCC_OscConfig+0x298>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd4:	d114      	bne.n	8004d00 <HAL_RCC_OscConfig+0x280>
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a02      	ldr	r2, [pc, #8]	; (8004cf0 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e013      	b.n	8004d18 <HAL_RCC_OscConfig+0x298>
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800aa44 	.word	0x0800aa44
 8004cf8:	20000004 	.word	0x20000004
 8004cfc:	20000008 	.word	0x20000008
 8004d00:	4ba0      	ldr	r3, [pc, #640]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a9f      	ldr	r2, [pc, #636]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b9d      	ldr	r3, [pc, #628]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a9c      	ldr	r2, [pc, #624]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d013      	beq.n	8004d48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fd fdac 	bl	800287c <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fd fda8 	bl	800287c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e2ae      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3a:	4b92      	ldr	r3, [pc, #584]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x2a8>
 8004d46:	e014      	b.n	8004d72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd fd98 	bl	800287c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fd fd94 	bl	800287c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e29a      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d62:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x2d0>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d060      	beq.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x310>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d119      	bne.n	8004dbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d116      	bne.n	8004dbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d90:	4b7c      	ldr	r3, [pc, #496]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_OscConfig+0x328>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e277      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b76      	ldr	r3, [pc, #472]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	4973      	ldr	r1, [pc, #460]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbc:	e040      	b.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d023      	beq.n	8004e0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc6:	4b6f      	ldr	r3, [pc, #444]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a6e      	ldr	r2, [pc, #440]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fd fd53 	bl	800287c <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fd fd4f 	bl	800287c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e255      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dec:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df8:	4b62      	ldr	r3, [pc, #392]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	495f      	ldr	r1, [pc, #380]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
 8004e0c:	e018      	b.n	8004e40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5c      	ldr	r2, [pc, #368]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fd fd2f 	bl	800287c <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fd fd2b 	bl	800287c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e231      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e34:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03c      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01c      	beq.n	8004e8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e54:	4b4b      	ldr	r3, [pc, #300]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5a:	4a4a      	ldr	r2, [pc, #296]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fd fd0a 	bl	800287c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fd fd06 	bl	800287c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e20c      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e7e:	4b41      	ldr	r3, [pc, #260]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ef      	beq.n	8004e6c <HAL_RCC_OscConfig+0x3ec>
 8004e8c:	e01b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e94:	4a3b      	ldr	r2, [pc, #236]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fd fced 	bl	800287c <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea6:	f7fd fce9 	bl	800287c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e1ef      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eb8:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ef      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80a6 	beq.w	8005020 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10d      	bne.n	8004f00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f00:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d118      	bne.n	8004f3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f18:	f7fd fcb0 	bl	800287c <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f20:	f7fd fcac 	bl	800287c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e1b2      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <HAL_RCC_OscConfig+0x508>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d108      	bne.n	8004f58 <HAL_RCC_OscConfig+0x4d8>
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f56:	e029      	b.n	8004fac <HAL_RCC_OscConfig+0x52c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	d115      	bne.n	8004f8c <HAL_RCC_OscConfig+0x50c>
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	4a03      	ldr	r2, [pc, #12]	; (8004f84 <HAL_RCC_OscConfig+0x504>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f80:	e014      	b.n	8004fac <HAL_RCC_OscConfig+0x52c>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	4b9a      	ldr	r3, [pc, #616]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	4a99      	ldr	r2, [pc, #612]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f9c:	4b96      	ldr	r3, [pc, #600]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	4a95      	ldr	r2, [pc, #596]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d016      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fd fc62 	bl	800287c <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fd fc5e 	bl	800287c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e162      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd2:	4b89      	ldr	r3, [pc, #548]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ed      	beq.n	8004fbc <HAL_RCC_OscConfig+0x53c>
 8004fe0:	e015      	b.n	800500e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe2:	f7fd fc4b 	bl	800287c <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fe8:	e00a      	b.n	8005000 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fd fc47 	bl	800287c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e14b      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005000:	4b7d      	ldr	r3, [pc, #500]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ed      	bne.n	8004fea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7ffb      	ldrb	r3, [r7, #31]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b78      	ldr	r3, [pc, #480]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	4a77      	ldr	r2, [pc, #476]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d03c      	beq.n	80050a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01c      	beq.n	800506e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005034:	4b70      	ldr	r3, [pc, #448]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800503a:	4a6f      	ldr	r2, [pc, #444]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fd fc1a 	bl	800287c <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800504c:	f7fd fc16 	bl	800287c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e11c      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800505e:	4b66      	ldr	r3, [pc, #408]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ef      	beq.n	800504c <HAL_RCC_OscConfig+0x5cc>
 800506c:	e01b      	b.n	80050a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800506e:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005074:	4a60      	ldr	r2, [pc, #384]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fd fbfd 	bl	800287c <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005086:	f7fd fbf9 	bl	800287c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0ff      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005098:	4b57      	ldr	r3, [pc, #348]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 800509a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ef      	bne.n	8005086 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80f3 	beq.w	8005296 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	f040 80c9 	bne.w	800524c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050ba:	4b4f      	ldr	r3, [pc, #316]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f003 0203 	and.w	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d12c      	bne.n	8005128 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	3b01      	subs	r3, #1
 80050da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d123      	bne.n	8005128 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d11b      	bne.n	8005128 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d113      	bne.n	8005128 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	3b01      	subs	r3, #1
 800510e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d109      	bne.n	8005128 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	3b01      	subs	r3, #1
 8005122:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d06b      	beq.n	8005200 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d062      	beq.n	80051f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800512e:	4b32      	ldr	r3, [pc, #200]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0ac      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800513e:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005148:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800514a:	f7fd fb97 	bl	800287c <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7fd fb93 	bl	800287c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e099      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005170:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	4b21      	ldr	r3, [pc, #132]	; (80051fc <HAL_RCC_OscConfig+0x77c>)
 8005176:	4013      	ands	r3, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005180:	3a01      	subs	r2, #1
 8005182:	0112      	lsls	r2, r2, #4
 8005184:	4311      	orrs	r1, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800518a:	0212      	lsls	r2, r2, #8
 800518c:	4311      	orrs	r1, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005192:	0852      	lsrs	r2, r2, #1
 8005194:	3a01      	subs	r2, #1
 8005196:	0552      	lsls	r2, r2, #21
 8005198:	4311      	orrs	r1, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800519e:	0852      	lsrs	r2, r2, #1
 80051a0:	3a01      	subs	r2, #1
 80051a2:	0652      	lsls	r2, r2, #25
 80051a4:	4311      	orrs	r1, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051aa:	06d2      	lsls	r2, r2, #27
 80051ac:	430a      	orrs	r2, r1
 80051ae:	4912      	ldr	r1, [pc, #72]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a0f      	ldr	r2, [pc, #60]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 80051ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 80051c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051cc:	f7fd fb56 	bl	800287c <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fd fb52 	bl	800287c <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e058      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e6:	4b04      	ldr	r3, [pc, #16]	; (80051f8 <HAL_RCC_OscConfig+0x778>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051f2:	e050      	b.n	8005296 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e04f      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
 80051f8:	40021000 	.word	0x40021000
 80051fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005200:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d144      	bne.n	8005296 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800520c:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a23      	ldr	r2, [pc, #140]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005218:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 800521e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005224:	f7fd fb2a 	bl	800287c <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522c:	f7fd fb26 	bl	800287c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e02c      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x7ac>
 800524a:	e024      	b.n	8005296 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d01f      	beq.n	8005292 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 8005258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7fd fb0d 	bl	800287c <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005266:	f7fd fb09 	bl	800287c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e00f      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1f0      	bne.n	8005266 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	4905      	ldr	r1, [pc, #20]	; (80052a0 <HAL_RCC_OscConfig+0x820>)
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCC_OscConfig+0x824>)
 800528c:	4013      	ands	r3, r2
 800528e:	60cb      	str	r3, [r1, #12]
 8005290:	e001      	b.n	8005296 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	feeefffc 	.word	0xfeeefffc

080052a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0e7      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052bc:	4b75      	ldr	r3, [pc, #468]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d910      	bls.n	80052ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b72      	ldr	r3, [pc, #456]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	4970      	ldr	r1, [pc, #448]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052da:	4b6e      	ldr	r3, [pc, #440]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0cf      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b66      	ldr	r3, [pc, #408]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005304:	429a      	cmp	r2, r3
 8005306:	d908      	bls.n	800531a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b63      	ldr	r3, [pc, #396]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4960      	ldr	r1, [pc, #384]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d04c      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800532e:	4b5a      	ldr	r3, [pc, #360]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d121      	bne.n	800537e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e0a6      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005346:	4b54      	ldr	r3, [pc, #336]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d115      	bne.n	800537e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e09a      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800535e:	4b4e      	ldr	r3, [pc, #312]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e08e      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800536e:	4b4a      	ldr	r3, [pc, #296]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e086      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800537e:	4b46      	ldr	r3, [pc, #280]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f023 0203 	bic.w	r2, r3, #3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4943      	ldr	r1, [pc, #268]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 800538c:	4313      	orrs	r3, r2
 800538e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005390:	f7fd fa74 	bl	800287c <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	e00a      	b.n	80053ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005398:	f7fd fa70 	bl	800287c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e06e      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ae:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 020c 	and.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	429a      	cmp	r2, r3
 80053be:	d1eb      	bne.n	8005398 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d8:	429a      	cmp	r2, r3
 80053da:	d208      	bcs.n	80053ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	492b      	ldr	r1, [pc, #172]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ee:	4b29      	ldr	r3, [pc, #164]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d210      	bcs.n	800541e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f023 0207 	bic.w	r2, r3, #7
 8005404:	4923      	ldr	r1, [pc, #140]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540c:	4b21      	ldr	r3, [pc, #132]	; (8005494 <HAL_RCC_ClockConfig+0x1ec>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d001      	beq.n	800541e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e036      	b.n	800548c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800542a:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	4918      	ldr	r1, [pc, #96]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005448:	4b13      	ldr	r3, [pc, #76]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4910      	ldr	r1, [pc, #64]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005458:	4313      	orrs	r3, r2
 800545a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800545c:	f000 f824 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005460:	4602      	mov	r2, r0
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <HAL_RCC_ClockConfig+0x1f0>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	490b      	ldr	r1, [pc, #44]	; (800549c <HAL_RCC_ClockConfig+0x1f4>)
 800546e:	5ccb      	ldrb	r3, [r1, r3]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1f8>)
 800547a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_ClockConfig+0x1fc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7fd f9ab 	bl	80027dc <HAL_InitTick>
 8005486:	4603      	mov	r3, r0
 8005488:	72fb      	strb	r3, [r7, #11]

  return status;
 800548a:	7afb      	ldrb	r3, [r7, #11]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40022000 	.word	0x40022000
 8005498:	40021000 	.word	0x40021000
 800549c:	0800aa44 	.word	0x0800aa44
 80054a0:	20000004 	.word	0x20000004
 80054a4:	20000008 	.word	0x20000008

080054a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b089      	sub	sp, #36	; 0x24
 80054ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b6:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0x34>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d121      	bne.n	800551a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d11e      	bne.n	800551a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054dc:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d107      	bne.n	80054f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054e8:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	e005      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800550c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10d      	bne.n	8005530 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b04      	cmp	r3, #4
 800551e:	d102      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005520:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e004      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d101      	bne.n	8005530 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800552c:	4b23      	ldr	r3, [pc, #140]	; (80055bc <HAL_RCC_GetSysClockFreq+0x114>)
 800552e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b0c      	cmp	r3, #12
 8005534:	d134      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005536:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b02      	cmp	r3, #2
 8005544:	d003      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0xa6>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d003      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0xac>
 800554c:	e005      	b.n	800555a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800554e:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005550:	617b      	str	r3, [r7, #20]
      break;
 8005552:	e005      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <HAL_RCC_GetSysClockFreq+0x114>)
 8005556:	617b      	str	r3, [r7, #20]
      break;
 8005558:	e002      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	617b      	str	r3, [r7, #20]
      break;
 800555e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005560:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	3301      	adds	r3, #1
 800556c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	fb03 f202 	mul.w	r2, r3, r2
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	0e5b      	lsrs	r3, r3, #25
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	3301      	adds	r3, #1
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055a0:	69bb      	ldr	r3, [r7, #24]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3724      	adds	r7, #36	; 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	0800aa5c 	.word	0x0800aa5c
 80055b8:	00f42400 	.word	0x00f42400
 80055bc:	02dc6c00 	.word	0x02dc6c00

080055c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055cc:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055d8:	f7ff f9ee 	bl	80049b8 <HAL_PWREx_GetVoltageRange>
 80055dc:	6178      	str	r0, [r7, #20]
 80055de:	e014      	b.n	800560a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	4a24      	ldr	r2, [pc, #144]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ea:	6593      	str	r3, [r2, #88]	; 0x58
 80055ec:	4b22      	ldr	r3, [pc, #136]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055f8:	f7ff f9de 	bl	80049b8 <HAL_PWREx_GetVoltageRange>
 80055fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055fe:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005602:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005608:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005610:	d10b      	bne.n	800562a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d919      	bls.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2ba0      	cmp	r3, #160	; 0xa0
 800561c:	d902      	bls.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800561e:	2302      	movs	r3, #2
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e013      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005624:	2301      	movs	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e010      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b80      	cmp	r3, #128	; 0x80
 800562e:	d902      	bls.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005630:	2303      	movs	r3, #3
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e00a      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d102      	bne.n	8005642 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800563c:	2302      	movs	r3, #2
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e004      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d101      	bne.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005648:	2301      	movs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 0207 	bic.w	r2, r3, #7
 8005654:	4909      	ldr	r1, [pc, #36]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d001      	beq.n	800566e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40021000 	.word	0x40021000
 800567c:	40022000 	.word	0x40022000

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005688:	2300      	movs	r3, #0
 800568a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800568c:	2300      	movs	r3, #0
 800568e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005698:	2b00      	cmp	r3, #0
 800569a:	d031      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056a4:	d01a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80056a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056aa:	d814      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b4:	d10f      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80056b6:	4b5d      	ldr	r3, [pc, #372]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a5c      	ldr	r2, [pc, #368]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056c2:	e00c      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f9f0 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	74fb      	strb	r3, [r7, #19]
      break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80056dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e4:	4b51      	ldr	r3, [pc, #324]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	494e      	ldr	r1, [pc, #312]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056fa:	e001      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809e 	beq.w	800584a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005712:	4b46      	ldr	r3, [pc, #280]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005728:	4b40      	ldr	r3, [pc, #256]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	4a3f      	ldr	r2, [pc, #252]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	6593      	str	r3, [r2, #88]	; 0x58
 8005734:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005740:	2301      	movs	r3, #1
 8005742:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005744:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a39      	ldr	r2, [pc, #228]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800574a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005750:	f7fd f894 	bl	800287c <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005756:	e009      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005758:	f7fd f890 	bl	800287c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d902      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	74fb      	strb	r3, [r7, #19]
        break;
 800576a:	e005      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800576c:	4b30      	ldr	r3, [pc, #192]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ef      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d15a      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005788:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01e      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d019      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a6:	4b21      	ldr	r3, [pc, #132]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b6:	4b1d      	ldr	r3, [pc, #116]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057c6:	4a19      	ldr	r2, [pc, #100]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d016      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd f850 	bl	800287c <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057de:	e00b      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7fd f84c 	bl	800287c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d902      	bls.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	74fb      	strb	r3, [r7, #19]
            break;
 80057f6:	e006      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0ec      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580c:	4b07      	ldr	r3, [pc, #28]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	4904      	ldr	r1, [pc, #16]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005822:	e009      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	74bb      	strb	r3, [r7, #18]
 8005828:	e006      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800582a:	bf00      	nop
 800582c:	40021000 	.word	0x40021000
 8005830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005838:	7c7b      	ldrb	r3, [r7, #17]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583e:	4b9b      	ldr	r3, [pc, #620]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	4a9a      	ldr	r2, [pc, #616]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005856:	4b95      	ldr	r3, [pc, #596]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585c:	f023 0203 	bic.w	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	4991      	ldr	r1, [pc, #580]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005878:	4b8c      	ldr	r3, [pc, #560]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f023 020c 	bic.w	r2, r3, #12
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	4989      	ldr	r1, [pc, #548]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800589a:	4b84      	ldr	r3, [pc, #528]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	4980      	ldr	r1, [pc, #512]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058bc:	4b7b      	ldr	r3, [pc, #492]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	4978      	ldr	r1, [pc, #480]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058de:	4b73      	ldr	r3, [pc, #460]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	496f      	ldr	r1, [pc, #444]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005900:	4b6a      	ldr	r3, [pc, #424]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	4967      	ldr	r1, [pc, #412]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005922:	4b62      	ldr	r3, [pc, #392]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	495e      	ldr	r1, [pc, #376]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005944:	4b59      	ldr	r3, [pc, #356]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005952:	4956      	ldr	r1, [pc, #344]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005966:	4b51      	ldr	r3, [pc, #324]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	494d      	ldr	r1, [pc, #308]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d028      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005988:	4b48      	ldr	r3, [pc, #288]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005996:	4945      	ldr	r1, [pc, #276]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059a6:	d106      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a8:	4b40      	ldr	r3, [pc, #256]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a3f      	ldr	r2, [pc, #252]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b2:	60d3      	str	r3, [r2, #12]
 80059b4:	e011      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059be:	d10c      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	2101      	movs	r1, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f872 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80059d6:	7cfb      	ldrb	r3, [r7, #19]
 80059d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d028      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059e6:	4b31      	ldr	r3, [pc, #196]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f4:	492d      	ldr	r1, [pc, #180]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a04:	d106      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a06:	4b29      	ldr	r3, [pc, #164]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4a28      	ldr	r2, [pc, #160]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a10:	60d3      	str	r3, [r2, #12]
 8005a12:	e011      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3304      	adds	r3, #4
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f843 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01c      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a52:	4916      	ldr	r1, [pc, #88]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a62:	d10c      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	2102      	movs	r1, #2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f820 	bl	8005ab0 <RCCEx_PLLSAI1_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a8a:	4b08      	ldr	r3, [pc, #32]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	4904      	ldr	r1, [pc, #16]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005aa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000

08005ab0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005abe:	4b74      	ldr	r3, [pc, #464]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d018      	beq.n	8005afc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005aca:	4b71      	ldr	r3, [pc, #452]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0203 	and.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d10d      	bne.n	8005af6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
       ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ae2:	4b6b      	ldr	r3, [pc, #428]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	091b      	lsrs	r3, r3, #4
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
       ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d047      	beq.n	8005b86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
 8005afa:	e044      	b.n	8005b86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d018      	beq.n	8005b36 <RCCEx_PLLSAI1_Config+0x86>
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d825      	bhi.n	8005b54 <RCCEx_PLLSAI1_Config+0xa4>
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d002      	beq.n	8005b12 <RCCEx_PLLSAI1_Config+0x62>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d009      	beq.n	8005b24 <RCCEx_PLLSAI1_Config+0x74>
 8005b10:	e020      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b12:	4b5f      	ldr	r3, [pc, #380]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11d      	bne.n	8005b5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b22:	e01a      	b.n	8005b5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b24:	4b5a      	ldr	r3, [pc, #360]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d116      	bne.n	8005b5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b34:	e013      	b.n	8005b5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b36:	4b56      	ldr	r3, [pc, #344]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10f      	bne.n	8005b62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b42:	4b53      	ldr	r3, [pc, #332]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b52:	e006      	b.n	8005b62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      break;
 8005b58:	e004      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b6a:	4b49      	ldr	r3, [pc, #292]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6819      	ldr	r1, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	4943      	ldr	r1, [pc, #268]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d17c      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b8c:	4b40      	ldr	r3, [pc, #256]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a3f      	ldr	r2, [pc, #252]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b98:	f7fc fe70 	bl	800287c <HAL_GetTick>
 8005b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b9e:	e009      	b.n	8005bb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ba0:	f7fc fe6c 	bl	800287c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d902      	bls.n	8005bb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb2:	e005      	b.n	8005bc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bb4:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1ef      	bne.n	8005ba0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d15f      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d110      	bne.n	8005bee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bcc:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005bd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6892      	ldr	r2, [r2, #8]
 8005bdc:	0211      	lsls	r1, r2, #8
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68d2      	ldr	r2, [r2, #12]
 8005be2:	06d2      	lsls	r2, r2, #27
 8005be4:	430a      	orrs	r2, r1
 8005be6:	492a      	ldr	r1, [pc, #168]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	610b      	str	r3, [r1, #16]
 8005bec:	e027      	b.n	8005c3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d112      	bne.n	8005c1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bf4:	4b26      	ldr	r3, [pc, #152]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6892      	ldr	r2, [r2, #8]
 8005c04:	0211      	lsls	r1, r2, #8
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6912      	ldr	r2, [r2, #16]
 8005c0a:	0852      	lsrs	r2, r2, #1
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	0552      	lsls	r2, r2, #21
 8005c10:	430a      	orrs	r2, r1
 8005c12:	491f      	ldr	r1, [pc, #124]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	610b      	str	r3, [r1, #16]
 8005c18:	e011      	b.n	8005c3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6892      	ldr	r2, [r2, #8]
 8005c2a:	0211      	lsls	r1, r2, #8
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6952      	ldr	r2, [r2, #20]
 8005c30:	0852      	lsrs	r2, r2, #1
 8005c32:	3a01      	subs	r2, #1
 8005c34:	0652      	lsls	r2, r2, #25
 8005c36:	430a      	orrs	r2, r1
 8005c38:	4915      	ldr	r1, [pc, #84]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c3e:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4a:	f7fc fe17 	bl	800287c <HAL_GetTick>
 8005c4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c50:	e009      	b.n	8005c66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c52:	f7fc fe13 	bl	800287c <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d902      	bls.n	8005c66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	73fb      	strb	r3, [r7, #15]
          break;
 8005c64:	e005      	b.n	8005c72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0ef      	beq.n	8005c52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40021000 	.word	0x40021000

08005c94 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e049      	b.n	8005d3a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	795b      	ldrb	r3, [r3, #5]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fb fc80 	bl	80015bc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0204 	orr.w	r2, r2, #4
 8005cd0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d104      	bne.n	8005cea <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e027      	b.n	8005d3a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005cea:	f7fc fdc7 	bl	800287c <HAL_GetTick>
 8005cee:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005cf0:	e015      	b.n	8005d1e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005cf2:	f7fc fdc3 	bl	800287c <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d90e      	bls.n	8005d1e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2204      	movs	r2, #4
 8005d12:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e00d      	b.n	8005d3a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d0e2      	beq.n	8005cf2 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e095      	b.n	8005e80 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d64:	d009      	beq.n	8005d7a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	61da      	str	r2, [r3, #28]
 8005d6c:	e005      	b.n	8005d7a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7fb fc9f 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dba:	d902      	bls.n	8005dc2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e002      	b.n	8005dc8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dc6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dd0:	d007      	beq.n	8005de2 <HAL_SPI_Init+0xa0>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dda:	d002      	beq.n	8005de2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e24:	ea42 0103 	orr.w	r1, r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	f003 0204 	and.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e5e:	ea42 0103 	orr.w	r1, r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_SPI_Transmit+0x22>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e158      	b.n	800615c <HAL_SPI_Transmit+0x2d4>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb2:	f7fc fce3 	bl	800287c <HAL_GetTick>
 8005eb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ecc:	e13d      	b.n	800614a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_SPI_Transmit+0x52>
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ede:	e134      	b.n	800614a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2a:	d10f      	bne.n	8005f4c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d007      	beq.n	8005f6a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f72:	d94b      	bls.n	800600c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_SPI_Transmit+0xfa>
 8005f7c:	8afb      	ldrh	r3, [r7, #22]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d13e      	bne.n	8006000 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	881a      	ldrh	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	1c9a      	adds	r2, r3, #2
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fa6:	e02b      	b.n	8006000 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d112      	bne.n	8005fdc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fda:	e011      	b.n	8006000 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fdc:	f7fc fc4e 	bl	800287c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d803      	bhi.n	8005ff4 <HAL_SPI_Transmit+0x16c>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d102      	bne.n	8005ffa <HAL_SPI_Transmit+0x172>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ffe:	e0a4      	b.n	800614a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ce      	bne.n	8005fa8 <HAL_SPI_Transmit+0x120>
 800600a:	e07c      	b.n	8006106 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_SPI_Transmit+0x192>
 8006014:	8afb      	ldrh	r3, [r7, #22]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d170      	bne.n	80060fc <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d912      	bls.n	800604a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	1c9a      	adds	r2, r3, #2
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b02      	subs	r3, #2
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006048:	e058      	b.n	80060fc <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006070:	e044      	b.n	80060fc <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d12b      	bne.n	80060d8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d912      	bls.n	80060b0 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	881a      	ldrh	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	1c9a      	adds	r2, r3, #2
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b02      	subs	r3, #2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ae:	e025      	b.n	80060fc <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060d6:	e011      	b.n	80060fc <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d8:	f7fc fbd0 	bl	800287c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d803      	bhi.n	80060f0 <HAL_SPI_Transmit+0x268>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_Transmit+0x26e>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060fa:	e026      	b.n	800614a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1b5      	bne.n	8006072 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f948 	bl	80063a0 <SPI_EndRxTxTransaction>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e000      	b.n	800614a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006148:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800615a:	7ffb      	ldrb	r3, [r7, #31]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006174:	f7fc fb82 	bl	800287c <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	4413      	add	r3, r2
 8006182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006184:	f7fc fb7a 	bl	800287c <HAL_GetTick>
 8006188:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800618a:	4b39      	ldr	r3, [pc, #228]	; (8006270 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	015b      	lsls	r3, r3, #5
 8006190:	0d1b      	lsrs	r3, r3, #20
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800619a:	e054      	b.n	8006246 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d050      	beq.n	8006246 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061a4:	f7fc fb6a 	bl	800287c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d902      	bls.n	80061ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d13d      	bne.n	8006236 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d2:	d111      	bne.n	80061f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061dc:	d004      	beq.n	80061e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e6:	d107      	bne.n	80061f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006200:	d10f      	bne.n	8006222 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e017      	b.n	8006266 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3b01      	subs	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	429a      	cmp	r2, r3
 8006262:	d19b      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000004 	.word	0x20000004

08006274 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006286:	f7fc faf9 	bl	800287c <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	4413      	add	r3, r2
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006296:	f7fc faf1 	bl	800287c <HAL_GetTick>
 800629a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062a4:	4b3d      	ldr	r3, [pc, #244]	; (800639c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	00da      	lsls	r2, r3, #3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	0d1b      	lsrs	r3, r3, #20
 80062b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062bc:	e060      	b.n	8006380 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062c4:	d107      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d050      	beq.n	8006380 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062de:	f7fc facd 	bl	800287c <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d902      	bls.n	80062f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d13d      	bne.n	8006370 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006302:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630c:	d111      	bne.n	8006332 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006316:	d004      	beq.n	8006322 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d107      	bne.n	8006332 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006330:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633a:	d10f      	bne.n	800635c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800635a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e010      	b.n	8006392 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	3b01      	subs	r3, #1
 800637e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4013      	ands	r3, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d196      	bne.n	80062be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3728      	adds	r7, #40	; 0x28
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000004 	.word	0x20000004

080063a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff ff5b 	bl	8006274 <SPI_WaitFifoStateUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e027      	b.n	8006424 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	2180      	movs	r1, #128	; 0x80
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fec0 	bl	8006164 <SPI_WaitFlagStateUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e014      	b.n	8006424 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff ff34 	bl	8006274 <SPI_WaitFifoStateUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006416:	f043 0220 	orr.w	r2, r3, #32
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e000      	b.n	8006424 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <LL_GPIO_SetPinMode>:
{
 800642c:	b480      	push	{r7}
 800642e:	b08b      	sub	sp, #44	; 0x2c
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	fa93 f3a3 	rbit	r3, r3
 8006446:	613b      	str	r3, [r7, #16]
  return result;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006452:	2320      	movs	r3, #32
 8006454:	e003      	b.n	800645e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	2103      	movs	r1, #3
 8006462:	fa01 f303 	lsl.w	r3, r1, r3
 8006466:	43db      	mvns	r3, r3
 8006468:	401a      	ands	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	fa93 f3a3 	rbit	r3, r3
 8006474:	61fb      	str	r3, [r7, #28]
  return result;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006480:	2320      	movs	r3, #32
 8006482:	e003      	b.n	800648c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	fab3 f383 	clz	r3, r3
 800648a:	b2db      	uxtb	r3, r3
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	fa01 f303 	lsl.w	r3, r1, r3
 8006494:	431a      	orrs	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	372c      	adds	r7, #44	; 0x2c
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <LL_GPIO_SetPinOutputType>:
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	401a      	ands	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <LL_GPIO_SetPinSpeed>:
{
 80064d6:	b480      	push	{r7}
 80064d8:	b08b      	sub	sp, #44	; 0x2c
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	613b      	str	r3, [r7, #16]
  return result;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80064fc:	2320      	movs	r3, #32
 80064fe:	e003      	b.n	8006508 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	fab3 f383 	clz	r3, r3
 8006506:	b2db      	uxtb	r3, r3
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	2103      	movs	r1, #3
 800650c:	fa01 f303 	lsl.w	r3, r1, r3
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	fa93 f3a3 	rbit	r3, r3
 800651e:	61fb      	str	r3, [r7, #28]
  return result;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800652a:	2320      	movs	r3, #32
 800652c:	e003      	b.n	8006536 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	fab3 f383 	clz	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	fa01 f303 	lsl.w	r3, r1, r3
 800653e:	431a      	orrs	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	609a      	str	r2, [r3, #8]
}
 8006544:	bf00      	nop
 8006546:	372c      	adds	r7, #44	; 0x2c
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <LL_GPIO_SetPinPull>:
{
 8006550:	b480      	push	{r7}
 8006552:	b08b      	sub	sp, #44	; 0x2c
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	fa93 f3a3 	rbit	r3, r3
 800656a:	613b      	str	r3, [r7, #16]
  return result;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006576:	2320      	movs	r3, #32
 8006578:	e003      	b.n	8006582 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	fab3 f383 	clz	r3, r3
 8006580:	b2db      	uxtb	r3, r3
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	2103      	movs	r1, #3
 8006586:	fa01 f303 	lsl.w	r3, r1, r3
 800658a:	43db      	mvns	r3, r3
 800658c:	401a      	ands	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	fa93 f3a3 	rbit	r3, r3
 8006598:	61fb      	str	r3, [r7, #28]
  return result;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80065a4:	2320      	movs	r3, #32
 80065a6:	e003      	b.n	80065b0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	fab3 f383 	clz	r3, r3
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	fa01 f303 	lsl.w	r3, r1, r3
 80065b8:	431a      	orrs	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	60da      	str	r2, [r3, #12]
}
 80065be:	bf00      	nop
 80065c0:	372c      	adds	r7, #44	; 0x2c
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <LL_GPIO_SetAFPin_0_7>:
{
 80065ca:	b480      	push	{r7}
 80065cc:	b08b      	sub	sp, #44	; 0x2c
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1a      	ldr	r2, [r3, #32]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	fa93 f3a3 	rbit	r3, r3
 80065e4:	613b      	str	r3, [r7, #16]
  return result;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80065f0:	2320      	movs	r3, #32
 80065f2:	e003      	b.n	80065fc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	fab3 f383 	clz	r3, r3
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	210f      	movs	r1, #15
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	fa93 f3a3 	rbit	r3, r3
 8006612:	61fb      	str	r3, [r7, #28]
  return result;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800661e:	2320      	movs	r3, #32
 8006620:	e003      	b.n	800662a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	fab3 f383 	clz	r3, r3
 8006628:	b2db      	uxtb	r3, r3
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	fa01 f303 	lsl.w	r3, r1, r3
 8006632:	431a      	orrs	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	bf00      	nop
 800663a:	372c      	adds	r7, #44	; 0x2c
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <LL_GPIO_SetAFPin_8_15>:
{
 8006644:	b480      	push	{r7}
 8006646:	b08b      	sub	sp, #44	; 0x2c
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	fa93 f3a3 	rbit	r3, r3
 8006660:	613b      	str	r3, [r7, #16]
  return result;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800666c:	2320      	movs	r3, #32
 800666e:	e003      	b.n	8006678 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	fab3 f383 	clz	r3, r3
 8006676:	b2db      	uxtb	r3, r3
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	210f      	movs	r1, #15
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	401a      	ands	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	fa93 f3a3 	rbit	r3, r3
 8006690:	61fb      	str	r3, [r7, #28]
  return result;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800669c:	2320      	movs	r3, #32
 800669e:	e003      	b.n	80066a8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	fab3 f383 	clz	r3, r3
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	431a      	orrs	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80066b6:	bf00      	nop
 80066b8:	372c      	adds	r7, #44	; 0x2c
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b088      	sub	sp, #32
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	fa93 f3a3 	rbit	r3, r3
 80066d8:	60fb      	str	r3, [r7, #12]
  return result;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <LL_GPIO_Init+0x26>
    return 32U;
 80066e4:	2320      	movs	r3, #32
 80066e6:	e003      	b.n	80066f0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	fab3 f383 	clz	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80066f2:	e048      	b.n	8006786 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	2101      	movs	r1, #1
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d03a      	beq.n	8006780 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d003      	beq.n	800671a <LL_GPIO_Init+0x58>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d10e      	bne.n	8006738 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	461a      	mov	r2, r3
 8006720:	69b9      	ldr	r1, [r7, #24]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fed7 	bl	80064d6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6819      	ldr	r1, [r3, #0]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	461a      	mov	r2, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff feb7 	bl	80064a6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	461a      	mov	r2, r3
 800673e:	69b9      	ldr	r1, [r7, #24]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff ff05 	bl	8006550 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d111      	bne.n	8006772 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2bff      	cmp	r3, #255	; 0xff
 8006752:	d807      	bhi.n	8006764 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	461a      	mov	r2, r3
 800675a:	69b9      	ldr	r1, [r7, #24]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff ff34 	bl	80065ca <LL_GPIO_SetAFPin_0_7>
 8006762:	e006      	b.n	8006772 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	461a      	mov	r2, r3
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff69 	bl	8006644 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	461a      	mov	r2, r3
 8006778:	69b9      	ldr	r1, [r7, #24]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fe56 	bl	800642c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	3301      	adds	r3, #1
 8006784:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1af      	bne.n	80066f4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80067a4:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <LL_RCC_HSI_IsReady+0x24>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b0:	d101      	bne.n	80067b6 <LL_RCC_HSI_IsReady+0x16>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <LL_RCC_HSI_IsReady+0x18>
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40021000 	.word	0x40021000

080067c8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <LL_RCC_LSE_IsReady+0x24>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d101      	bne.n	80067de <LL_RCC_LSE_IsReady+0x16>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <LL_RCC_LSE_IsReady+0x18>
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40021000 	.word	0x40021000

080067f0 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d101      	bne.n	8006804 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40021000 	.word	0x40021000

08006814 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <LL_RCC_MSI_GetRange+0x18>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006820:	4618      	mov	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000

08006830 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800683e:	4618      	mov	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40021000 	.word	0x40021000

0800684c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <LL_RCC_GetSysClkSource+0x18>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 030c 	and.w	r3, r3, #12
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40021000 	.word	0x40021000

08006868 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800686c:	4b04      	ldr	r3, [pc, #16]	; (8006880 <LL_RCC_GetAHBPrescaler+0x18>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000

08006884 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <LL_RCC_GetAPB1Prescaler+0x18>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006890:	4618      	mov	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40021000 	.word	0x40021000

080068a0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40021000 	.word	0x40021000

080068bc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <LL_RCC_GetUSARTClockSource+0x24>)
 80068c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	401a      	ands	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	041b      	lsls	r3, r3, #16
 80068d2:	4313      	orrs	r3, r2
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	40021000 	.word	0x40021000

080068e4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80068e8:	4b04      	ldr	r3, [pc, #16]	; (80068fc <LL_RCC_PLL_GetMainSource+0x18>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0303 	and.w	r3, r3, #3
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40021000 	.word	0x40021000

08006900 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <LL_RCC_PLL_GetN+0x18>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	0a1b      	lsrs	r3, r3, #8
 800690a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800690e:	4618      	mov	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40021000 	.word	0x40021000

0800691c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006920:	4b04      	ldr	r3, [pc, #16]	; (8006934 <LL_RCC_PLL_GetR+0x18>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40021000 	.word	0x40021000

08006938 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <LL_RCC_PLL_GetDivider+0x18>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006944:	4618      	mov	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000

08006954 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b03      	cmp	r3, #3
 8006964:	d137      	bne.n	80069d6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff ffa8 	bl	80068bc <LL_RCC_GetUSARTClockSource>
 800696c:	4603      	mov	r3, r0
 800696e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006972:	2b03      	cmp	r3, #3
 8006974:	f200 80b3 	bhi.w	8006ade <LL_RCC_GetUSARTClockFreq+0x18a>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	080069bf 	.word	0x080069bf
 8006984:	08006991 	.word	0x08006991
 8006988:	08006999 	.word	0x08006999
 800698c:	080069ab 	.word	0x080069ab
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006990:	f000 f8c4 	bl	8006b1c <RCC_GetSystemClockFreq>
 8006994:	60f8      	str	r0, [r7, #12]
        break;
 8006996:	e0b5      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006998:	f7ff ff02 	bl	80067a0 <LL_RCC_HSI_IsReady>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 809f 	beq.w	8006ae2 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80069a4:	4b5a      	ldr	r3, [pc, #360]	; (8006b10 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80069a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80069a8:	e09b      	b.n	8006ae2 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80069aa:	f7ff ff0d 	bl	80067c8 <LL_RCC_LSE_IsReady>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8098 	beq.w	8006ae6 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80069b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80069bc:	e093      	b.n	8006ae6 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80069be:	f000 f8ad 	bl	8006b1c <RCC_GetSystemClockFreq>
 80069c2:	4603      	mov	r3, r0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f939 	bl	8006c3c <RCC_GetHCLKClockFreq>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f95f 	bl	8006c90 <RCC_GetPCLK2ClockFreq>
 80069d2:	60f8      	str	r0, [r7, #12]
        break;
 80069d4:	e096      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b0c      	cmp	r3, #12
 80069da:	d146      	bne.n	8006a6a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff ff6d 	bl	80068bc <LL_RCC_GetUSARTClockSource>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80069e8:	2b0c      	cmp	r3, #12
 80069ea:	d87e      	bhi.n	8006aea <LL_RCC_GetUSARTClockFreq+0x196>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006a53 	.word	0x08006a53
 80069f8:	08006aeb 	.word	0x08006aeb
 80069fc:	08006aeb 	.word	0x08006aeb
 8006a00:	08006aeb 	.word	0x08006aeb
 8006a04:	08006a29 	.word	0x08006a29
 8006a08:	08006aeb 	.word	0x08006aeb
 8006a0c:	08006aeb 	.word	0x08006aeb
 8006a10:	08006aeb 	.word	0x08006aeb
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	08006aeb 	.word	0x08006aeb
 8006a1c:	08006aeb 	.word	0x08006aeb
 8006a20:	08006aeb 	.word	0x08006aeb
 8006a24:	08006a41 	.word	0x08006a41
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006a28:	f000 f878 	bl	8006b1c <RCC_GetSystemClockFreq>
 8006a2c:	60f8      	str	r0, [r7, #12]
        break;
 8006a2e:	e069      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006a30:	f7ff feb6 	bl	80067a0 <LL_RCC_HSI_IsReady>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d059      	beq.n	8006aee <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006a3a:	4b35      	ldr	r3, [pc, #212]	; (8006b10 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006a3c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006a3e:	e056      	b.n	8006aee <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006a40:	f7ff fec2 	bl	80067c8 <LL_RCC_LSE_IsReady>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d053      	beq.n	8006af2 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8006a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006a50:	e04f      	b.n	8006af2 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006a52:	f000 f863 	bl	8006b1c <RCC_GetSystemClockFreq>
 8006a56:	4603      	mov	r3, r0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 f8ef 	bl	8006c3c <RCC_GetHCLKClockFreq>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f901 	bl	8006c68 <RCC_GetPCLK1ClockFreq>
 8006a66:	60f8      	str	r0, [r7, #12]
        break;
 8006a68:	e04c      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b30      	cmp	r3, #48	; 0x30
 8006a6e:	d142      	bne.n	8006af6 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff23 	bl	80068bc <LL_RCC_GetUSARTClockSource>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006a7c:	d01a      	beq.n	8006ab4 <LL_RCC_GetUSARTClockFreq+0x160>
 8006a7e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006a82:	d83a      	bhi.n	8006afa <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006a84:	4a23      	ldr	r2, [pc, #140]	; (8006b14 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00c      	beq.n	8006aa4 <LL_RCC_GetUSARTClockFreq+0x150>
 8006a8a:	4a22      	ldr	r2, [pc, #136]	; (8006b14 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d834      	bhi.n	8006afa <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006a90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a94:	d017      	beq.n	8006ac6 <LL_RCC_GetUSARTClockFreq+0x172>
 8006a96:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d12e      	bne.n	8006afa <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006a9c:	f000 f83e 	bl	8006b1c <RCC_GetSystemClockFreq>
 8006aa0:	60f8      	str	r0, [r7, #12]
          break;
 8006aa2:	e02f      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006aa4:	f7ff fe7c 	bl	80067a0 <LL_RCC_HSI_IsReady>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d027      	beq.n	8006afe <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006aae:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006ab0:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006ab2:	e024      	b.n	8006afe <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006ab4:	f7ff fe88 	bl	80067c8 <LL_RCC_LSE_IsReady>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d021      	beq.n	8006b02 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006ac4:	e01d      	b.n	8006b02 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006ac6:	f000 f829 	bl	8006b1c <RCC_GetSystemClockFreq>
 8006aca:	4603      	mov	r3, r0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 f8b5 	bl	8006c3c <RCC_GetHCLKClockFreq>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 f8c7 	bl	8006c68 <RCC_GetPCLK1ClockFreq>
 8006ada:	60f8      	str	r0, [r7, #12]
          break;
 8006adc:	e012      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006ade:	bf00      	nop
 8006ae0:	e010      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e00e      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e00c      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006aea:	bf00      	nop
 8006aec:	e00a      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006aee:	bf00      	nop
 8006af0:	e008      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006af2:	bf00      	nop
 8006af4:	e006      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006af6:	bf00      	nop
 8006af8:	e004      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006afa:	bf00      	nop
 8006afc:	e002      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006b02:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	00f42400 	.word	0x00f42400
 8006b14:	00300020 	.word	0x00300020
 8006b18:	00300010 	.word	0x00300010

08006b1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006b22:	f7ff fe93 	bl	800684c <LL_RCC_GetSysClkSource>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b0c      	cmp	r3, #12
 8006b2a:	d851      	bhi.n	8006bd0 <RCC_GetSystemClockFreq+0xb4>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <RCC_GetSystemClockFreq+0x18>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b69 	.word	0x08006b69
 8006b38:	08006bd1 	.word	0x08006bd1
 8006b3c:	08006bd1 	.word	0x08006bd1
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bbd 	.word	0x08006bbd
 8006b48:	08006bd1 	.word	0x08006bd1
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bc3 	.word	0x08006bc3
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bc9 	.word	0x08006bc9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006b68:	f7ff fe42 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d111      	bne.n	8006b96 <RCC_GetSystemClockFreq+0x7a>
 8006b72:	f7ff fe3d 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <RCC_GetSystemClockFreq+0x6a>
 8006b7c:	f7ff fe4a 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006b80:	4603      	mov	r3, r0
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	e003      	b.n	8006b8e <RCC_GetSystemClockFreq+0x72>
 8006b86:	f7ff fe53 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	0a1b      	lsrs	r3, r3, #8
 8006b8e:	4a28      	ldr	r2, [pc, #160]	; (8006c30 <RCC_GetSystemClockFreq+0x114>)
 8006b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b94:	e010      	b.n	8006bb8 <RCC_GetSystemClockFreq+0x9c>
 8006b96:	f7ff fe2b 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <RCC_GetSystemClockFreq+0x8e>
 8006ba0:	f7ff fe38 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	e003      	b.n	8006bb2 <RCC_GetSystemClockFreq+0x96>
 8006baa:	f7ff fe41 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	091b      	lsrs	r3, r3, #4
 8006bb2:	4a1f      	ldr	r2, [pc, #124]	; (8006c30 <RCC_GetSystemClockFreq+0x114>)
 8006bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006bba:	e033      	b.n	8006c24 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006bbc:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <RCC_GetSystemClockFreq+0x118>)
 8006bbe:	607b      	str	r3, [r7, #4]
      break;
 8006bc0:	e030      	b.n	8006c24 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <RCC_GetSystemClockFreq+0x11c>)
 8006bc4:	607b      	str	r3, [r7, #4]
      break;
 8006bc6:	e02d      	b.n	8006c24 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006bc8:	f000 f876 	bl	8006cb8 <RCC_PLL_GetFreqDomain_SYS>
 8006bcc:	6078      	str	r0, [r7, #4]
      break;
 8006bce:	e029      	b.n	8006c24 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006bd0:	f7ff fe0e 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d111      	bne.n	8006bfe <RCC_GetSystemClockFreq+0xe2>
 8006bda:	f7ff fe09 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <RCC_GetSystemClockFreq+0xd2>
 8006be4:	f7ff fe16 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006be8:	4603      	mov	r3, r0
 8006bea:	0a1b      	lsrs	r3, r3, #8
 8006bec:	e003      	b.n	8006bf6 <RCC_GetSystemClockFreq+0xda>
 8006bee:	f7ff fe1f 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	4a0e      	ldr	r2, [pc, #56]	; (8006c30 <RCC_GetSystemClockFreq+0x114>)
 8006bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfc:	e010      	b.n	8006c20 <RCC_GetSystemClockFreq+0x104>
 8006bfe:	f7ff fdf7 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <RCC_GetSystemClockFreq+0xf6>
 8006c08:	f7ff fe04 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	e003      	b.n	8006c1a <RCC_GetSystemClockFreq+0xfe>
 8006c12:	f7ff fe0d 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006c16:	4603      	mov	r3, r0
 8006c18:	091b      	lsrs	r3, r3, #4
 8006c1a:	4a05      	ldr	r2, [pc, #20]	; (8006c30 <RCC_GetSystemClockFreq+0x114>)
 8006c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c20:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006c22:	bf00      	nop
  }

  return frequency;
 8006c24:	687b      	ldr	r3, [r7, #4]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	0800aa5c 	.word	0x0800aa5c
 8006c34:	00f42400 	.word	0x00f42400
 8006c38:	02dc6c00 	.word	0x02dc6c00

08006c3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006c44:	f7ff fe10 	bl	8006868 <LL_RCC_GetAHBPrescaler>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	091b      	lsrs	r3, r3, #4
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	4a04      	ldr	r2, [pc, #16]	; (8006c64 <RCC_GetHCLKClockFreq+0x28>)
 8006c52:	5cd3      	ldrb	r3, [r2, r3]
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	40d3      	lsrs	r3, r2
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	0800aa44 	.word	0x0800aa44

08006c68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006c70:	f7ff fe08 	bl	8006884 <LL_RCC_GetAPB1Prescaler>
 8006c74:	4603      	mov	r3, r0
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <RCC_GetPCLK1ClockFreq+0x24>)
 8006c7a:	5cd3      	ldrb	r3, [r2, r3]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	40d3      	lsrs	r3, r2
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	0800aa54 	.word	0x0800aa54

08006c90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006c98:	f7ff fe02 	bl	80068a0 <LL_RCC_GetAPB2Prescaler>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	0adb      	lsrs	r3, r3, #11
 8006ca0:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <RCC_GetPCLK2ClockFreq+0x24>)
 8006ca2:	5cd3      	ldrb	r3, [r2, r3]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	40d3      	lsrs	r3, r2
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	0800aa54 	.word	0x0800aa54

08006cb8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006cb8:	b590      	push	{r4, r7, lr}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006cbe:	f7ff fe11 	bl	80068e4 <LL_RCC_PLL_GetMainSource>
 8006cc2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d036      	beq.n	8006d38 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d836      	bhi.n	8006d3e <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d003      	beq.n	8006cde <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d02a      	beq.n	8006d32 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006cdc:	e02f      	b.n	8006d3e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006cde:	f7ff fd87 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d111      	bne.n	8006d0c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006ce8:	f7ff fd82 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006cf2:	f7ff fd8f 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	0a1b      	lsrs	r3, r3, #8
 8006cfa:	e003      	b.n	8006d04 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006cfc:	f7ff fd98 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006d00:	4603      	mov	r3, r0
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	4a2f      	ldr	r2, [pc, #188]	; (8006dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0a:	e010      	b.n	8006d2e <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006d0c:	f7ff fd70 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006d16:	f7ff fd7d 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	091b      	lsrs	r3, r3, #4
 8006d1e:	e003      	b.n	8006d28 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006d20:	f7ff fd86 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006d24:	4603      	mov	r3, r0
 8006d26:	091b      	lsrs	r3, r3, #4
 8006d28:	4a26      	ldr	r2, [pc, #152]	; (8006dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006d30:	e02f      	b.n	8006d92 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006d32:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006d34:	607b      	str	r3, [r7, #4]
      break;
 8006d36:	e02c      	b.n	8006d92 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006d38:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8006d3a:	607b      	str	r3, [r7, #4]
      break;
 8006d3c:	e029      	b.n	8006d92 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006d3e:	f7ff fd57 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d111      	bne.n	8006d6c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8006d48:	f7ff fd52 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006d52:	f7ff fd5f 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006d56:	4603      	mov	r3, r0
 8006d58:	0a1b      	lsrs	r3, r3, #8
 8006d5a:	e003      	b.n	8006d64 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006d5c:	f7ff fd68 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006d60:	4603      	mov	r3, r0
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6a:	e010      	b.n	8006d8e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8006d6c:	f7ff fd40 	bl	80067f0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006d76:	f7ff fd4d 	bl	8006814 <LL_RCC_MSI_GetRange>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	091b      	lsrs	r3, r3, #4
 8006d7e:	e003      	b.n	8006d88 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006d80:	f7ff fd56 	bl	8006830 <LL_RCC_MSI_GetRangeAfterStandby>
 8006d84:	4603      	mov	r3, r0
 8006d86:	091b      	lsrs	r3, r3, #4
 8006d88:	4a0e      	ldr	r2, [pc, #56]	; (8006dc4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006d90:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006d92:	f7ff fdd1 	bl	8006938 <LL_RCC_PLL_GetDivider>
 8006d96:	4603      	mov	r3, r0
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	fbb2 f4f3 	udiv	r4, r2, r3
 8006da2:	f7ff fdad 	bl	8006900 <LL_RCC_PLL_GetN>
 8006da6:	4603      	mov	r3, r0
 8006da8:	fb03 f404 	mul.w	r4, r3, r4
 8006dac:	f7ff fdb6 	bl	800691c <LL_RCC_PLL_GetR>
 8006db0:	4603      	mov	r3, r0
 8006db2:	0e5b      	lsrs	r3, r3, #25
 8006db4:	3301      	adds	r3, #1
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd90      	pop	{r4, r7, pc}
 8006dc4:	0800aa5c 	.word	0x0800aa5c
 8006dc8:	00f42400 	.word	0x00f42400
 8006dcc:	02dc6c00 	.word	0x02dc6c00

08006dd0 <LL_TIM_SetPrescaler>:
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_TIM_SetAutoReload>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <LL_TIM_SetRepetitionCounter>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_TIM_OC_SetCompareCH1>:
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <LL_TIM_OC_SetCompareCH2>:
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <LL_TIM_OC_SetCompareCH3>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_TIM_OC_SetCompareCH4>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <LL_TIM_OC_SetCompareCH5>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <LL_TIM_OC_SetCompareCH6>:
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f043 0201 	orr.w	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	615a      	str	r2, [r3, #20]
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <LL_TIM_Init+0xb0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <LL_TIM_Init+0x20>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0e:	d106      	bne.n	8006f1e <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <LL_TIM_Init+0xb0>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00b      	beq.n	8006f3e <LL_TIM_Init+0x4e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2c:	d007      	beq.n	8006f3e <LL_TIM_Init+0x4e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a1c      	ldr	r2, [pc, #112]	; (8006fa4 <LL_TIM_Init+0xb4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d003      	beq.n	8006f3e <LL_TIM_Init+0x4e>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1b      	ldr	r2, [pc, #108]	; (8006fa8 <LL_TIM_Init+0xb8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d106      	bne.n	8006f4c <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ff47 	bl	8006dec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff ff33 	bl	8006dd0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a0c      	ldr	r2, [pc, #48]	; (8006fa0 <LL_TIM_Init+0xb0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d007      	beq.n	8006f82 <LL_TIM_Init+0x92>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <LL_TIM_Init+0xb4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d003      	beq.n	8006f82 <LL_TIM_Init+0x92>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <LL_TIM_Init+0xb8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d105      	bne.n	8006f8e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ff3d 	bl	8006e08 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ff9e 	bl	8006ed0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40012c00 	.word	0x40012c00
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40014400 	.word	0x40014400

08006fac <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc2:	d045      	beq.n	8007050 <LL_TIM_OC_Init+0xa4>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fca:	d848      	bhi.n	800705e <LL_TIM_OC_Init+0xb2>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d036      	beq.n	8007042 <LL_TIM_OC_Init+0x96>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fda:	d840      	bhi.n	800705e <LL_TIM_OC_Init+0xb2>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe2:	d027      	beq.n	8007034 <LL_TIM_OC_Init+0x88>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fea:	d838      	bhi.n	800705e <LL_TIM_OC_Init+0xb2>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff2:	d018      	beq.n	8007026 <LL_TIM_OC_Init+0x7a>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffa:	d830      	bhi.n	800705e <LL_TIM_OC_Init+0xb2>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d003      	beq.n	800700a <LL_TIM_OC_Init+0x5e>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b10      	cmp	r3, #16
 8007006:	d007      	beq.n	8007018 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007008:	e029      	b.n	800705e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f89d 	bl	800714c <OC1Config>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]
      break;
 8007016:	e023      	b.n	8007060 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f90a 	bl	8007234 <OC2Config>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]
      break;
 8007024:	e01c      	b.n	8007060 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f97b 	bl	8007324 <OC3Config>
 800702e:	4603      	mov	r3, r0
 8007030:	75fb      	strb	r3, [r7, #23]
      break;
 8007032:	e015      	b.n	8007060 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f9ec 	bl	8007414 <OC4Config>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]
      break;
 8007040:	e00e      	b.n	8007060 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fa45 	bl	80074d4 <OC5Config>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]
      break;
 800704e:	e007      	b.n	8007060 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fa96 	bl	8007584 <OC6Config>
 8007058:	4603      	mov	r3, r0
 800705a:	75fb      	strb	r3, [r7, #23]
      break;
 800705c:	e000      	b.n	8007060 <LL_TIM_OC_Init+0xb4>
      break;
 800705e:	bf00      	nop
  }

  return result;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	7b12      	ldrb	r2, [r2, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	89d2      	ldrh	r2, [r2, #14]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a16      	ldr	r2, [pc, #88]	; (8007148 <LL_TIM_BDTR_Init+0xdc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d106      	bne.n	8007100 <LL_TIM_BDTR_Init+0x94>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a11      	ldr	r2, [pc, #68]	; (8007148 <LL_TIM_BDTR_Init+0xdc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d114      	bne.n	8007132 <LL_TIM_BDTR_Init+0xc6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40012c00 	.word	0x40012c00

0800714c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f023 0201 	bic.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f023 0202 	bic.w	r2, r3, #2
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0201 	bic.w	r2, r3, #1
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <OC1Config+0xdc>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d007      	beq.n	80071c2 <OC1Config+0x76>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <OC1Config+0xe0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <OC1Config+0x76>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <OC1Config+0xe4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d11e      	bne.n	8007200 <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 0208 	bic.w	r2, r3, #8
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 0204 	bic.w	r2, r3, #4
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fe06 	bl	8006e24 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400

08007234 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f023 0210 	bic.w	r2, r3, #16
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800726a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	0212      	lsls	r2, r2, #8
 8007274:	4313      	orrs	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 0220 	bic.w	r2, r3, #32
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 0210 	bic.w	r2, r3, #16
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1f      	ldr	r2, [pc, #124]	; (8007318 <OC2Config+0xe4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d007      	beq.n	80072b0 <OC2Config+0x7c>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a1e      	ldr	r2, [pc, #120]	; (800731c <OC2Config+0xe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <OC2Config+0x7c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <OC2Config+0xec>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d11f      	bne.n	80072f0 <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	019b      	lsls	r3, r3, #6
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	019b      	lsls	r3, r3, #6
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff fd9c 	bl	8006e40 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40012c00 	.word	0x40012c00
 800731c:	40014000 	.word	0x40014000
 8007320:	40014400 	.word	0x40014400

08007324 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	6812      	ldr	r2, [r2, #0]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <OC3Config+0xe4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d007      	beq.n	800739e <OC3Config+0x7a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a1e      	ldr	r2, [pc, #120]	; (800740c <OC3Config+0xe8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <OC3Config+0x7a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a1d      	ldr	r2, [pc, #116]	; (8007410 <OC3Config+0xec>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d11f      	bne.n	80073de <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	029b      	lsls	r3, r3, #10
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	015b      	lsls	r3, r3, #5
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fd33 	bl	8006e5c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40014000 	.word	0x40014000
 8007410:	40014400 	.word	0x40014400

08007414 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	0212      	lsls	r2, r2, #8
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	031b      	lsls	r3, r3, #12
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	031b      	lsls	r3, r3, #12
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <OC4Config+0xb4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d007      	beq.n	8007490 <OC4Config+0x7c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a12      	ldr	r2, [pc, #72]	; (80074cc <OC4Config+0xb8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d003      	beq.n	8007490 <OC4Config+0x7c>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a11      	ldr	r2, [pc, #68]	; (80074d0 <OC4Config+0xbc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d107      	bne.n	80074a0 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	019b      	lsls	r3, r3, #6
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fce0 	bl	8006e78 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40014000 	.word	0x40014000
 80074d0:	40014400 	.word	0x40014400

080074d4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	4313      	orrs	r3, r2
 8007506:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	041b      	lsls	r3, r3, #16
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a13      	ldr	r2, [pc, #76]	; (8007578 <OC5Config+0xa4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d007      	beq.n	8007540 <OC5Config+0x6c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <OC5Config+0xa8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <OC5Config+0x6c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a11      	ldr	r2, [pc, #68]	; (8007580 <OC5Config+0xac>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d109      	bne.n	8007554 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fc97 	bl	8006e94 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	40012c00 	.word	0x40012c00
 800757c:	40014000 	.word	0x40014000
 8007580:	40014400 	.word	0x40014400

08007584 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	0212      	lsls	r2, r2, #8
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	051b      	lsls	r3, r3, #20
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	051b      	lsls	r3, r3, #20
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a12      	ldr	r2, [pc, #72]	; (8007628 <OC6Config+0xa4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <OC6Config+0x6e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a11      	ldr	r2, [pc, #68]	; (800762c <OC6Config+0xa8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <OC6Config+0x6e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a10      	ldr	r2, [pc, #64]	; (8007630 <OC6Config+0xac>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d109      	bne.n	8007606 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	029b      	lsls	r3, r3, #10
 8007600:	431a      	orrs	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fc4e 	bl	8006eb4 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40014000 	.word	0x40014000
 8007630:	40014400 	.word	0x40014400

08007634 <LL_USART_IsEnabled>:
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <LL_USART_IsEnabled+0x18>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <LL_USART_IsEnabled+0x1a>
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <LL_USART_SetStopBitsLength>:
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	605a      	str	r2, [r3, #4]
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <LL_USART_SetHWFlowCtrl>:
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	609a      	str	r2, [r3, #8]
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <LL_USART_SetBaudRate>:
{
 80076a6:	b480      	push	{r7}
 80076a8:	b087      	sub	sp, #28
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ba:	d11a      	bne.n	80076f2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	005a      	lsls	r2, r3, #1
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	441a      	add	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80076d6:	4013      	ands	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	60da      	str	r2, [r3, #12]
}
 80076f0:	e00a      	b.n	8007708 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	085a      	lsrs	r2, r3, #1
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	441a      	add	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007700:	b29b      	uxth	r3, r3
 8007702:	461a      	mov	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	60da      	str	r2, [r3, #12]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007722:	2300      	movs	r3, #0
 8007724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff ff84 	bl	8007634 <LL_USART_IsEnabled>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d148      	bne.n	80077c4 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	4b26      	ldr	r3, [pc, #152]	; (80077d0 <LL_USART_Init+0xbc>)
 8007738:	4013      	ands	r3, r2
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	6851      	ldr	r1, [r2, #4]
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	68d2      	ldr	r2, [r2, #12]
 8007742:	4311      	orrs	r1, r2
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	6912      	ldr	r2, [r2, #16]
 8007748:	4311      	orrs	r1, r2
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	6992      	ldr	r2, [r2, #24]
 800774e:	430a      	orrs	r2, r1
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff ff7c 	bl	800765a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff ff89 	bl	8007680 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <LL_USART_Init+0xc0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d104      	bne.n	8007780 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007776:	2003      	movs	r0, #3
 8007778:	f7ff f8ec 	bl	8006954 <LL_RCC_GetUSARTClockFreq>
 800777c:	60b8      	str	r0, [r7, #8]
 800777e:	e010      	b.n	80077a2 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <LL_USART_Init+0xc4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d104      	bne.n	8007792 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007788:	200c      	movs	r0, #12
 800778a:	f7ff f8e3 	bl	8006954 <LL_RCC_GetUSARTClockFreq>
 800778e:	60b8      	str	r0, [r7, #8]
 8007790:	e007      	b.n	80077a2 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a11      	ldr	r2, [pc, #68]	; (80077dc <LL_USART_Init+0xc8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d103      	bne.n	80077a2 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800779a:	2030      	movs	r0, #48	; 0x30
 800779c:	f7ff f8da 	bl	8006954 <LL_RCC_GetUSARTClockFreq>
 80077a0:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699a      	ldr	r2, [r3, #24]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff ff71 	bl	80076a6 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	efff69f3 	.word	0xefff69f3
 80077d4:	40013800 	.word	0x40013800
 80077d8:	40004400 	.word	0x40004400
 80077dc:	40004800 	.word	0x40004800

080077e0 <__NVIC_SetPriority>:
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	6039      	str	r1, [r7, #0]
 80077ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	db0a      	blt.n	800780a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	490c      	ldr	r1, [pc, #48]	; (800782c <__NVIC_SetPriority+0x4c>)
 80077fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077fe:	0112      	lsls	r2, r2, #4
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	440b      	add	r3, r1
 8007804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007808:	e00a      	b.n	8007820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	b2da      	uxtb	r2, r3
 800780e:	4908      	ldr	r1, [pc, #32]	; (8007830 <__NVIC_SetPriority+0x50>)
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	3b04      	subs	r3, #4
 8007818:	0112      	lsls	r2, r2, #4
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	440b      	add	r3, r1
 800781e:	761a      	strb	r2, [r3, #24]
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	e000e100 	.word	0xe000e100
 8007830:	e000ed00 	.word	0xe000ed00

08007834 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007838:	2100      	movs	r1, #0
 800783a:	f06f 0004 	mvn.w	r0, #4
 800783e:	f7ff ffcf 	bl	80077e0 <__NVIC_SetPriority>
#endif
}
 8007842:	bf00      	nop
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800784e:	f3ef 8305 	mrs	r3, IPSR
 8007852:	603b      	str	r3, [r7, #0]
  return(result);
 8007854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800785a:	f06f 0305 	mvn.w	r3, #5
 800785e:	607b      	str	r3, [r7, #4]
 8007860:	e00c      	b.n	800787c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <osKernelInitialize+0x44>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d105      	bne.n	8007876 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <osKernelInitialize+0x44>)
 800786c:	2201      	movs	r2, #1
 800786e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007870:	2300      	movs	r3, #0
 8007872:	607b      	str	r3, [r7, #4]
 8007874:	e002      	b.n	800787c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007876:	f04f 33ff 	mov.w	r3, #4294967295
 800787a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800787c:	687b      	ldr	r3, [r7, #4]
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200002b8 	.word	0x200002b8

08007890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007896:	f3ef 8305 	mrs	r3, IPSR
 800789a:	603b      	str	r3, [r7, #0]
  return(result);
 800789c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80078a2:	f06f 0305 	mvn.w	r3, #5
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	e010      	b.n	80078cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078aa:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <osKernelStart+0x48>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d109      	bne.n	80078c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078b2:	f7ff ffbf 	bl	8007834 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078b6:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <osKernelStart+0x48>)
 80078b8:	2202      	movs	r2, #2
 80078ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078bc:	f001 fd5e 	bl	800937c <vTaskStartScheduler>
      stat = osOK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	607b      	str	r3, [r7, #4]
 80078c4:	e002      	b.n	80078cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078cc:	687b      	ldr	r3, [r7, #4]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200002b8 	.word	0x200002b8

080078dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08e      	sub	sp, #56	; 0x38
 80078e0:	af04      	add	r7, sp, #16
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ec:	f3ef 8305 	mrs	r3, IPSR
 80078f0:	617b      	str	r3, [r7, #20]
  return(result);
 80078f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d17e      	bne.n	80079f6 <osThreadNew+0x11a>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d07b      	beq.n	80079f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80078fe:	2380      	movs	r3, #128	; 0x80
 8007900:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007902:	2318      	movs	r3, #24
 8007904:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d045      	beq.n	80079a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <osThreadNew+0x48>
        name = attr->name;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <osThreadNew+0x6e>
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b38      	cmp	r3, #56	; 0x38
 800793c:	d805      	bhi.n	800794a <osThreadNew+0x6e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <osThreadNew+0x72>
        return (NULL);
 800794a:	2300      	movs	r3, #0
 800794c:	e054      	b.n	80079f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	089b      	lsrs	r3, r3, #2
 800795c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <osThreadNew+0xa8>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2bbb      	cmp	r3, #187	; 0xbb
 800796c:	d90a      	bls.n	8007984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007972:	2b00      	cmp	r3, #0
 8007974:	d006      	beq.n	8007984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <osThreadNew+0xa8>
        mem = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	e010      	b.n	80079a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10c      	bne.n	80079a6 <osThreadNew+0xca>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d108      	bne.n	80079a6 <osThreadNew+0xca>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <osThreadNew+0xca>
          mem = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	61bb      	str	r3, [r7, #24]
 80079a0:	e001      	b.n	80079a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d110      	bne.n	80079ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079b4:	9202      	str	r2, [sp, #8]
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6a3a      	ldr	r2, [r7, #32]
 80079c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f001 faee 	bl	8008fa4 <xTaskCreateStatic>
 80079c8:	4603      	mov	r3, r0
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	e013      	b.n	80079f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d110      	bne.n	80079f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f107 0310 	add.w	r3, r7, #16
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f001 fb39 	bl	800905e <xTaskCreate>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d001      	beq.n	80079f6 <osThreadNew+0x11a>
            hTask = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079f6:	693b      	ldr	r3, [r7, #16]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3728      	adds	r7, #40	; 0x28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a08:	f3ef 8305 	mrs	r3, IPSR
 8007a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <osDelay+0x1c>
    stat = osErrorISR;
 8007a14:	f06f 0305 	mvn.w	r3, #5
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	e007      	b.n	8007a2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fc74 	bl	8009314 <vTaskDelay>
    }
  }

  return (stat);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b08a      	sub	sp, #40	; 0x28
 8007a3a:	af02      	add	r7, sp, #8
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a46:	f3ef 8305 	mrs	r3, IPSR
 8007a4a:	613b      	str	r3, [r7, #16]
  return(result);
 8007a4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d15f      	bne.n	8007b12 <osMessageQueueNew+0xdc>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d05c      	beq.n	8007b12 <osMessageQueueNew+0xdc>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d059      	beq.n	8007b12 <osMessageQueueNew+0xdc>
    mem = -1;
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d029      	beq.n	8007abe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d012      	beq.n	8007a98 <osMessageQueueNew+0x62>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b4f      	cmp	r3, #79	; 0x4f
 8007a78:	d90e      	bls.n	8007a98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695a      	ldr	r2, [r3, #20]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	fb01 f303 	mul.w	r3, r1, r3
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d302      	bcc.n	8007a98 <osMessageQueueNew+0x62>
        mem = 1;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e014      	b.n	8007ac2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d110      	bne.n	8007ac2 <osMessageQueueNew+0x8c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10c      	bne.n	8007ac2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d108      	bne.n	8007ac2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <osMessageQueueNew+0x8c>
          mem = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	e001      	b.n	8007ac2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d10b      	bne.n	8007ae0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	9100      	str	r1, [sp, #0]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fda6 	bl	8008628 <xQueueGenericCreateStatic>
 8007adc:	61f8      	str	r0, [r7, #28]
 8007ade:	e008      	b.n	8007af2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fe14 	bl	8008718 <xQueueGenericCreate>
 8007af0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00c      	beq.n	8007b12 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e001      	b.n	8007b0a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	69f8      	ldr	r0, [r7, #28]
 8007b0e:	f001 f9eb 	bl	8008ee8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b12:	69fb      	ldr	r3, [r7, #28]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3720      	adds	r7, #32
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4a07      	ldr	r2, [pc, #28]	; (8007b48 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4a06      	ldr	r2, [pc, #24]	; (8007b4c <vApplicationGetIdleTaskMemory+0x30>)
 8007b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2280      	movs	r2, #128	; 0x80
 8007b38:	601a      	str	r2, [r3, #0]
}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	200002bc 	.word	0x200002bc
 8007b4c:	20000378 	.word	0x20000378

08007b50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a07      	ldr	r2, [pc, #28]	; (8007b7c <vApplicationGetTimerTaskMemory+0x2c>)
 8007b60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4a06      	ldr	r2, [pc, #24]	; (8007b80 <vApplicationGetTimerTaskMemory+0x30>)
 8007b66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b6e:	601a      	str	r2, [r3, #0]
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20000578 	.word	0x20000578
 8007b80:	20000634 	.word	0x20000634

08007b84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b90:	f001 fc64 	bl	800945c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b94:	4b5b      	ldr	r3, [pc, #364]	; (8007d04 <pvPortMalloc+0x180>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b9c:	f000 f920 	bl	8007de0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba0:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <pvPortMalloc+0x184>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f040 8093 	bne.w	8007cd4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01d      	beq.n	8007bf0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4413      	add	r3, r2
 8007bba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d014      	beq.n	8007bf0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f023 0307 	bic.w	r3, r3, #7
 8007bcc:	3308      	adds	r3, #8
 8007bce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d06e      	beq.n	8007cd4 <pvPortMalloc+0x150>
 8007bf6:	4b45      	ldr	r3, [pc, #276]	; (8007d0c <pvPortMalloc+0x188>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d869      	bhi.n	8007cd4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c00:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <pvPortMalloc+0x18c>)
 8007c02:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c04:	4b42      	ldr	r3, [pc, #264]	; (8007d10 <pvPortMalloc+0x18c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0a:	e004      	b.n	8007c16 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d903      	bls.n	8007c28 <pvPortMalloc+0xa4>
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f1      	bne.n	8007c0c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c28:	4b36      	ldr	r3, [pc, #216]	; (8007d04 <pvPortMalloc+0x180>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d050      	beq.n	8007cd4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2208      	movs	r2, #8
 8007c38:	4413      	add	r3, r2
 8007c3a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	1ad2      	subs	r2, r2, r3
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d91f      	bls.n	8007c94 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4413      	add	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <pvPortMalloc+0xf8>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	613b      	str	r3, [r7, #16]
}
 8007c78:	bf00      	nop
 8007c7a:	e7fe      	b.n	8007c7a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	1ad2      	subs	r2, r2, r3
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c8e:	69b8      	ldr	r0, [r7, #24]
 8007c90:	f000 f908 	bl	8007ea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c94:	4b1d      	ldr	r3, [pc, #116]	; (8007d0c <pvPortMalloc+0x188>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <pvPortMalloc+0x188>)
 8007ca0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca2:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <pvPortMalloc+0x188>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	; (8007d14 <pvPortMalloc+0x190>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d203      	bcs.n	8007cb6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cae:	4b17      	ldr	r3, [pc, #92]	; (8007d0c <pvPortMalloc+0x188>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a18      	ldr	r2, [pc, #96]	; (8007d14 <pvPortMalloc+0x190>)
 8007cb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <pvPortMalloc+0x184>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cca:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <pvPortMalloc+0x194>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <pvPortMalloc+0x194>)
 8007cd2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cd4:	f001 fbd0 	bl	8009478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <pvPortMalloc+0x174>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	60fb      	str	r3, [r7, #12]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <pvPortMalloc+0x172>
	return pvReturn;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3728      	adds	r7, #40	; 0x28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	200021ac 	.word	0x200021ac
 8007d08:	200021c0 	.word	0x200021c0
 8007d0c:	200021b0 	.word	0x200021b0
 8007d10:	200021a4 	.word	0x200021a4
 8007d14:	200021b4 	.word	0x200021b4
 8007d18:	200021b8 	.word	0x200021b8

08007d1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d04d      	beq.n	8007dca <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d2e:	2308      	movs	r3, #8
 8007d30:	425b      	negs	r3, r3
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4413      	add	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <vPortFree+0xb8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4013      	ands	r3, r2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <vPortFree+0x44>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	60fb      	str	r3, [r7, #12]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <vPortFree+0x62>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60bb      	str	r3, [r7, #8]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <vPortFree+0xb8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01e      	beq.n	8007dca <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d11a      	bne.n	8007dca <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <vPortFree+0xb8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	401a      	ands	r2, r3
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007da4:	f001 fb5a 	bl	800945c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <vPortFree+0xbc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4413      	add	r3, r2
 8007db2:	4a09      	ldr	r2, [pc, #36]	; (8007dd8 <vPortFree+0xbc>)
 8007db4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007db6:	6938      	ldr	r0, [r7, #16]
 8007db8:	f000 f874 	bl	8007ea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dbc:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <vPortFree+0xc0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	4a06      	ldr	r2, [pc, #24]	; (8007ddc <vPortFree+0xc0>)
 8007dc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dc6:	f001 fb57 	bl	8009478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dca:	bf00      	nop
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	200021c0 	.word	0x200021c0
 8007dd8:	200021b0 	.word	0x200021b0
 8007ddc:	200021bc 	.word	0x200021bc

08007de0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007de6:	f241 7370 	movw	r3, #6000	; 0x1770
 8007dea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dec:	4b27      	ldr	r3, [pc, #156]	; (8007e8c <prvHeapInit+0xac>)
 8007dee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00c      	beq.n	8007e14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3307      	adds	r3, #7
 8007dfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0307 	bic.w	r3, r3, #7
 8007e06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	4a1f      	ldr	r2, [pc, #124]	; (8007e8c <prvHeapInit+0xac>)
 8007e10:	4413      	add	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e18:	4a1d      	ldr	r2, [pc, #116]	; (8007e90 <prvHeapInit+0xb0>)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e1e:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <prvHeapInit+0xb0>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	4413      	add	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0307 	bic.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a15      	ldr	r2, [pc, #84]	; (8007e94 <prvHeapInit+0xb4>)
 8007e40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e42:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <prvHeapInit+0xb4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2200      	movs	r2, #0
 8007e48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e4a:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <prvHeapInit+0xb4>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e60:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <prvHeapInit+0xb4>)
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	4a0a      	ldr	r2, [pc, #40]	; (8007e98 <prvHeapInit+0xb8>)
 8007e6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	4a09      	ldr	r2, [pc, #36]	; (8007e9c <prvHeapInit+0xbc>)
 8007e76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e78:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <prvHeapInit+0xc0>)
 8007e7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e7e:	601a      	str	r2, [r3, #0]
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	20000a34 	.word	0x20000a34
 8007e90:	200021a4 	.word	0x200021a4
 8007e94:	200021ac 	.word	0x200021ac
 8007e98:	200021b4 	.word	0x200021b4
 8007e9c:	200021b0 	.word	0x200021b0
 8007ea0:	200021c0 	.word	0x200021c0

08007ea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007eac:	4b28      	ldr	r3, [pc, #160]	; (8007f50 <prvInsertBlockIntoFreeList+0xac>)
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	e002      	b.n	8007eb8 <prvInsertBlockIntoFreeList+0x14>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d8f7      	bhi.n	8007eb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d108      	bne.n	8007ee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	441a      	add	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d118      	bne.n	8007f2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <prvInsertBlockIntoFreeList+0xb0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d00d      	beq.n	8007f22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	441a      	add	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	e008      	b.n	8007f34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <prvInsertBlockIntoFreeList+0xb0>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	e003      	b.n	8007f34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d002      	beq.n	8007f42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	200021a4 	.word	0x200021a4
 8007f54:	200021ac 	.word	0x200021ac

08007f58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f103 0208 	add.w	r2, r3, #8
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f103 0208 	add.w	r2, r3, #8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f103 0208 	add.w	r2, r3, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	601a      	str	r2, [r3, #0]
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d103      	bne.n	800801a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	e00c      	b.n	8008034 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3308      	adds	r3, #8
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	e002      	b.n	8008028 <vListInsert+0x2e>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	429a      	cmp	r2, r3
 8008032:	d2f6      	bcs.n	8008022 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	601a      	str	r2, [r3, #0]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6892      	ldr	r2, [r2, #8]
 8008082:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	6852      	ldr	r2, [r2, #4]
 800808c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d103      	bne.n	80080a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	1e5a      	subs	r2, r3, #1
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3b04      	subs	r3, #4
 80080d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3b04      	subs	r3, #4
 80080de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f023 0201 	bic.w	r2, r3, #1
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3b04      	subs	r3, #4
 80080ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080f0:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <pxPortInitialiseStack+0x64>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3b14      	subs	r3, #20
 80080fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3b04      	subs	r3, #4
 8008106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f06f 0202 	mvn.w	r2, #2
 800810e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3b20      	subs	r3, #32
 8008114:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008116:	68fb      	ldr	r3, [r7, #12]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	08008129 	.word	0x08008129

08008128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008132:	4b12      	ldr	r3, [pc, #72]	; (800817c <prvTaskExitError+0x54>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813a:	d00a      	beq.n	8008152 <prvTaskExitError+0x2a>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <prvTaskExitError+0x28>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60bb      	str	r3, [r7, #8]
}
 8008164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008166:	bf00      	nop
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0fc      	beq.n	8008168 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	20000010 	.word	0x20000010

08008180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <pxCurrentTCBConst2>)
 8008182:	6819      	ldr	r1, [r3, #0]
 8008184:	6808      	ldr	r0, [r1, #0]
 8008186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818a:	f380 8809 	msr	PSP, r0
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f04f 0000 	mov.w	r0, #0
 8008196:	f380 8811 	msr	BASEPRI, r0
 800819a:	4770      	bx	lr
 800819c:	f3af 8000 	nop.w

080081a0 <pxCurrentTCBConst2>:
 80081a0:	2000220c 	.word	0x2000220c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop

080081a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081a8:	4808      	ldr	r0, [pc, #32]	; (80081cc <prvPortStartFirstTask+0x24>)
 80081aa:	6800      	ldr	r0, [r0, #0]
 80081ac:	6800      	ldr	r0, [r0, #0]
 80081ae:	f380 8808 	msr	MSP, r0
 80081b2:	f04f 0000 	mov.w	r0, #0
 80081b6:	f380 8814 	msr	CONTROL, r0
 80081ba:	b662      	cpsie	i
 80081bc:	b661      	cpsie	f
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	df00      	svc	0
 80081c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081ca:	bf00      	nop
 80081cc:	e000ed08 	.word	0xe000ed08

080081d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081d6:	4b46      	ldr	r3, [pc, #280]	; (80082f0 <xPortStartScheduler+0x120>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a46      	ldr	r2, [pc, #280]	; (80082f4 <xPortStartScheduler+0x124>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10a      	bne.n	80081f6 <xPortStartScheduler+0x26>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	613b      	str	r3, [r7, #16]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081f6:	4b3e      	ldr	r3, [pc, #248]	; (80082f0 <xPortStartScheduler+0x120>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a3f      	ldr	r2, [pc, #252]	; (80082f8 <xPortStartScheduler+0x128>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d10a      	bne.n	8008216 <xPortStartScheduler+0x46>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60fb      	str	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008216:	4b39      	ldr	r3, [pc, #228]	; (80082fc <xPortStartScheduler+0x12c>)
 8008218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	22ff      	movs	r2, #255	; 0xff
 8008226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008238:	b2da      	uxtb	r2, r3
 800823a:	4b31      	ldr	r3, [pc, #196]	; (8008300 <xPortStartScheduler+0x130>)
 800823c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800823e:	4b31      	ldr	r3, [pc, #196]	; (8008304 <xPortStartScheduler+0x134>)
 8008240:	2207      	movs	r2, #7
 8008242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008244:	e009      	b.n	800825a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008246:	4b2f      	ldr	r3, [pc, #188]	; (8008304 <xPortStartScheduler+0x134>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3b01      	subs	r3, #1
 800824c:	4a2d      	ldr	r2, [pc, #180]	; (8008304 <xPortStartScheduler+0x134>)
 800824e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	b2db      	uxtb	r3, r3
 8008258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008262:	2b80      	cmp	r3, #128	; 0x80
 8008264:	d0ef      	beq.n	8008246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008266:	4b27      	ldr	r3, [pc, #156]	; (8008304 <xPortStartScheduler+0x134>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f1c3 0307 	rsb	r3, r3, #7
 800826e:	2b04      	cmp	r3, #4
 8008270:	d00a      	beq.n	8008288 <xPortStartScheduler+0xb8>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60bb      	str	r3, [r7, #8]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008288:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <xPortStartScheduler+0x134>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	4a1d      	ldr	r2, [pc, #116]	; (8008304 <xPortStartScheduler+0x134>)
 8008290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008292:	4b1c      	ldr	r3, [pc, #112]	; (8008304 <xPortStartScheduler+0x134>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800829a:	4a1a      	ldr	r2, [pc, #104]	; (8008304 <xPortStartScheduler+0x134>)
 800829c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082a6:	4b18      	ldr	r3, [pc, #96]	; (8008308 <xPortStartScheduler+0x138>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a17      	ldr	r2, [pc, #92]	; (8008308 <xPortStartScheduler+0x138>)
 80082ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082b2:	4b15      	ldr	r3, [pc, #84]	; (8008308 <xPortStartScheduler+0x138>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a14      	ldr	r2, [pc, #80]	; (8008308 <xPortStartScheduler+0x138>)
 80082b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082be:	f000 f8dd 	bl	800847c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082c2:	4b12      	ldr	r3, [pc, #72]	; (800830c <xPortStartScheduler+0x13c>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082c8:	f000 f8fc 	bl	80084c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082cc:	4b10      	ldr	r3, [pc, #64]	; (8008310 <xPortStartScheduler+0x140>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0f      	ldr	r2, [pc, #60]	; (8008310 <xPortStartScheduler+0x140>)
 80082d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082d8:	f7ff ff66 	bl	80081a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082dc:	f001 fa34 	bl	8009748 <vTaskSwitchContext>
	prvTaskExitError();
 80082e0:	f7ff ff22 	bl	8008128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	e000ed00 	.word	0xe000ed00
 80082f4:	410fc271 	.word	0x410fc271
 80082f8:	410fc270 	.word	0x410fc270
 80082fc:	e000e400 	.word	0xe000e400
 8008300:	200021c4 	.word	0x200021c4
 8008304:	200021c8 	.word	0x200021c8
 8008308:	e000ed20 	.word	0xe000ed20
 800830c:	20000010 	.word	0x20000010
 8008310:	e000ef34 	.word	0xe000ef34

08008314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	607b      	str	r3, [r7, #4]
}
 800832c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800832e:	4b0f      	ldr	r3, [pc, #60]	; (800836c <vPortEnterCritical+0x58>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3301      	adds	r3, #1
 8008334:	4a0d      	ldr	r2, [pc, #52]	; (800836c <vPortEnterCritical+0x58>)
 8008336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <vPortEnterCritical+0x58>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d10f      	bne.n	8008360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <vPortEnterCritical+0x5c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <vPortEnterCritical+0x4c>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	603b      	str	r3, [r7, #0]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <vPortEnterCritical+0x4a>
	}
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000010 	.word	0x20000010
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800837a:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <vPortExitCritical+0x50>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <vPortExitCritical+0x24>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	607b      	str	r3, [r7, #4]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008398:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <vPortExitCritical+0x50>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3b01      	subs	r3, #1
 800839e:	4a09      	ldr	r2, [pc, #36]	; (80083c4 <vPortExitCritical+0x50>)
 80083a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <vPortExitCritical+0x50>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <vPortExitCritical+0x42>
 80083aa:	2300      	movs	r3, #0
 80083ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000010 	.word	0x20000010
	...

080083d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083d0:	f3ef 8009 	mrs	r0, PSP
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <pxCurrentTCBConst>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	f01e 0f10 	tst.w	lr, #16
 80083e0:	bf08      	it	eq
 80083e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ea:	6010      	str	r0, [r2, #0]
 80083ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083f4:	f380 8811 	msr	BASEPRI, r0
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f001 f9a2 	bl	8009748 <vTaskSwitchContext>
 8008404:	f04f 0000 	mov.w	r0, #0
 8008408:	f380 8811 	msr	BASEPRI, r0
 800840c:	bc09      	pop	{r0, r3}
 800840e:	6819      	ldr	r1, [r3, #0]
 8008410:	6808      	ldr	r0, [r1, #0]
 8008412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008416:	f01e 0f10 	tst.w	lr, #16
 800841a:	bf08      	it	eq
 800841c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008420:	f380 8809 	msr	PSP, r0
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w

08008430 <pxCurrentTCBConst>:
 8008430:	2000220c 	.word	0x2000220c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop

08008438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	607b      	str	r3, [r7, #4]
}
 8008450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008452:	f001 f8bf 	bl	80095d4 <xTaskIncrementTick>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <xPortSysTickHandler+0x40>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	f383 8811 	msr	BASEPRI, r3
}
 800846e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <vPortSetupTimerInterrupt+0x34>)
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008486:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <vPortSetupTimerInterrupt+0x38>)
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800848c:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <vPortSetupTimerInterrupt+0x3c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <vPortSetupTimerInterrupt+0x40>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	099b      	lsrs	r3, r3, #6
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <vPortSetupTimerInterrupt+0x44>)
 800849a:	3b01      	subs	r3, #1
 800849c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800849e:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <vPortSetupTimerInterrupt+0x34>)
 80084a0:	2207      	movs	r2, #7
 80084a2:	601a      	str	r2, [r3, #0]
}
 80084a4:	bf00      	nop
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	e000e010 	.word	0xe000e010
 80084b4:	e000e018 	.word	0xe000e018
 80084b8:	20000004 	.word	0x20000004
 80084bc:	10624dd3 	.word	0x10624dd3
 80084c0:	e000e014 	.word	0xe000e014

080084c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084d4 <vPortEnableVFP+0x10>
 80084c8:	6801      	ldr	r1, [r0, #0]
 80084ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084ce:	6001      	str	r1, [r0, #0]
 80084d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084d2:	bf00      	nop
 80084d4:	e000ed88 	.word	0xe000ed88

080084d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084de:	f3ef 8305 	mrs	r3, IPSR
 80084e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d914      	bls.n	8008514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084ea:	4a17      	ldr	r2, [pc, #92]	; (8008548 <vPortValidateInterruptPriority+0x70>)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084f4:	4b15      	ldr	r3, [pc, #84]	; (800854c <vPortValidateInterruptPriority+0x74>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	7afa      	ldrb	r2, [r7, #11]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d20a      	bcs.n	8008514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	607b      	str	r3, [r7, #4]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <vPortValidateInterruptPriority+0x78>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800851c:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <vPortValidateInterruptPriority+0x7c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d90a      	bls.n	800853a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	603b      	str	r3, [r7, #0]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <vPortValidateInterruptPriority+0x60>
	}
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	e000e3f0 	.word	0xe000e3f0
 800854c:	200021c4 	.word	0x200021c4
 8008550:	e000ed0c 	.word	0xe000ed0c
 8008554:	200021c8 	.word	0x200021c8

08008558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <xQueueGenericReset+0x2a>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60bb      	str	r3, [r7, #8]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008582:	f7ff fec7 	bl	8008314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008592:	fb01 f303 	mul.w	r3, r1, r3
 8008596:	441a      	add	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	3b01      	subs	r3, #1
 80085b4:	68f9      	ldr	r1, [r7, #12]
 80085b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085b8:	fb01 f303 	mul.w	r3, r1, r3
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d114      	bne.n	8008602 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01a      	beq.n	8008616 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3310      	adds	r3, #16
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f963 	bl	80098b0 <xTaskRemoveFromEventList>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d012      	beq.n	8008616 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085f0:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <xQueueGenericReset+0xcc>)
 80085f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	e009      	b.n	8008616 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3310      	adds	r3, #16
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fca6 	bl	8007f58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3324      	adds	r3, #36	; 0x24
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fca1 	bl	8007f58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008616:	f7ff fead 	bl	8008374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800861a:	2301      	movs	r3, #1
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	e000ed04 	.word	0xe000ed04

08008628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <xQueueGenericCreateStatic+0x52>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <xQueueGenericCreateStatic+0x56>
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <xQueueGenericCreateStatic+0x58>
 800867e:	2300      	movs	r3, #0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	623b      	str	r3, [r7, #32]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <xQueueGenericCreateStatic+0x7e>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <xQueueGenericCreateStatic+0x82>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <xQueueGenericCreateStatic+0x84>
 80086aa:	2300      	movs	r3, #0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10a      	bne.n	80086c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	61fb      	str	r3, [r7, #28]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086c6:	2350      	movs	r3, #80	; 0x50
 80086c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b50      	cmp	r3, #80	; 0x50
 80086ce:	d00a      	beq.n	80086e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	61bb      	str	r3, [r7, #24]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00d      	beq.n	800870e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4613      	mov	r3, r2
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f83f 	bl	800878c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008710:	4618      	mov	r0, r3
 8008712:	3730      	adds	r7, #48	; 0x30
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af02      	add	r7, sp, #8
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <xQueueGenericCreate+0x2a>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	613b      	str	r3, [r7, #16]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	3350      	adds	r3, #80	; 0x50
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff fa17 	bl	8007b84 <pvPortMalloc>
 8008756:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d011      	beq.n	8008782 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	3350      	adds	r3, #80	; 0x50
 8008766:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008770:	79fa      	ldrb	r2, [r7, #7]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	4613      	mov	r3, r2
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 f805 	bl	800878c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008782:	69bb      	ldr	r3, [r7, #24]
	}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	e002      	b.n	80087ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087ba:	2101      	movs	r1, #1
 80087bc:	69b8      	ldr	r0, [r7, #24]
 80087be:	f7ff fecb 	bl	8008558 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08e      	sub	sp, #56	; 0x38
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087e2:	2300      	movs	r3, #0
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xQueueGenericSend+0x32>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d103      	bne.n	8008814 <xQueueGenericSend+0x40>
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <xQueueGenericSend+0x44>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <xQueueGenericSend+0x46>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <xQueueGenericSend+0x60>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d103      	bne.n	8008842 <xQueueGenericSend+0x6e>
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <xQueueGenericSend+0x72>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <xQueueGenericSend+0x74>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xQueueGenericSend+0x8e>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	623b      	str	r3, [r7, #32]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008862:	f001 f9e7 	bl	8009c34 <xTaskGetSchedulerState>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xQueueGenericSend+0x9e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <xQueueGenericSend+0xa2>
 8008872:	2301      	movs	r3, #1
 8008874:	e000      	b.n	8008878 <xQueueGenericSend+0xa4>
 8008876:	2300      	movs	r3, #0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <xQueueGenericSend+0xbe>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	61fb      	str	r3, [r7, #28]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008892:	f7ff fd3f 	bl	8008314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	429a      	cmp	r2, r3
 80088a0:	d302      	bcc.n	80088a8 <xQueueGenericSend+0xd4>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d129      	bne.n	80088fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ae:	f000 fa0b 	bl	8008cc8 <prvCopyDataToQueue>
 80088b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fff5 	bl	80098b0 <xTaskRemoveFromEventList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d013      	beq.n	80088f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088cc:	4b3f      	ldr	r3, [pc, #252]	; (80089cc <xQueueGenericSend+0x1f8>)
 80088ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	e00a      	b.n	80088f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d007      	beq.n	80088f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088e4:	4b39      	ldr	r3, [pc, #228]	; (80089cc <xQueueGenericSend+0x1f8>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088f4:	f7ff fd3e 	bl	8008374 <vPortExitCritical>
				return pdPASS;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e063      	b.n	80089c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008902:	f7ff fd37 	bl	8008374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008906:	2300      	movs	r3, #0
 8008908:	e05c      	b.n	80089c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	2b00      	cmp	r3, #0
 800890e:	d106      	bne.n	800891e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008910:	f107 0314 	add.w	r3, r7, #20
 8008914:	4618      	mov	r0, r3
 8008916:	f001 f82f 	bl	8009978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800891a:	2301      	movs	r3, #1
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800891e:	f7ff fd29 	bl	8008374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008922:	f000 fd9b 	bl	800945c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008926:	f7ff fcf5 	bl	8008314 <vPortEnterCritical>
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008930:	b25b      	sxtb	r3, r3
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d103      	bne.n	8008940 <xQueueGenericSend+0x16c>
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008946:	b25b      	sxtb	r3, r3
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894c:	d103      	bne.n	8008956 <xQueueGenericSend+0x182>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008956:	f7ff fd0d 	bl	8008374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800895a:	1d3a      	adds	r2, r7, #4
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f001 f81e 	bl	80099a4 <xTaskCheckForTimeOut>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d124      	bne.n	80089b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800896e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008970:	f000 faa2 	bl	8008eb8 <prvIsQueueFull>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d018      	beq.n	80089ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	3310      	adds	r3, #16
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f000 ff44 	bl	8009810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800898a:	f000 fa2d 	bl	8008de8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800898e:	f000 fd73 	bl	8009478 <xTaskResumeAll>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	f47f af7c 	bne.w	8008892 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800899a:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <xQueueGenericSend+0x1f8>)
 800899c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	e772      	b.n	8008892 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ae:	f000 fa1b 	bl	8008de8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089b2:	f000 fd61 	bl	8009478 <xTaskResumeAll>
 80089b6:	e76c      	b.n	8008892 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ba:	f000 fa15 	bl	8008de8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089be:	f000 fd5b 	bl	8009478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3738      	adds	r7, #56	; 0x38
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b090      	sub	sp, #64	; 0x40
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d103      	bne.n	8008a0c <xQueueGenericSendFromISR+0x3c>
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <xQueueGenericSendFromISR+0x40>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <xQueueGenericSendFromISR+0x42>
 8008a10:	2300      	movs	r3, #0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d103      	bne.n	8008a3a <xQueueGenericSendFromISR+0x6a>
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <xQueueGenericSendFromISR+0x6e>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <xQueueGenericSendFromISR+0x70>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	623b      	str	r3, [r7, #32]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a5a:	f7ff fd3d 	bl	80084d8 <vPortValidateInterruptPriority>
	__asm volatile
 8008a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	61fa      	str	r2, [r7, #28]
 8008a74:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008a76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d302      	bcc.n	8008a8c <xQueueGenericSendFromISR+0xbc>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d12f      	bne.n	8008aec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008aa2:	f000 f911 	bl	8008cc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008aa6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aae:	d112      	bne.n	8008ad6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d016      	beq.n	8008ae6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	3324      	adds	r3, #36	; 0x24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 fef7 	bl	80098b0 <xTaskRemoveFromEventList>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00e      	beq.n	8008ae6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e007      	b.n	8008ae6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ada:	3301      	adds	r3, #1
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	b25a      	sxtb	r2, r3
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008aea:	e001      	b.n	8008af0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f383 8811 	msr	BASEPRI, r3
}
 8008afa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3740      	adds	r7, #64	; 0x40
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08c      	sub	sp, #48	; 0x30
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <xQueueReceive+0x30>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	623b      	str	r3, [r7, #32]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d103      	bne.n	8008b46 <xQueueReceive+0x3e>
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <xQueueReceive+0x42>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <xQueueReceive+0x44>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <xQueueReceive+0x5e>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	61fb      	str	r3, [r7, #28]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b66:	f001 f865 	bl	8009c34 <xTaskGetSchedulerState>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <xQueueReceive+0x6e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <xQueueReceive+0x72>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <xQueueReceive+0x74>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10a      	bne.n	8008b96 <xQueueReceive+0x8e>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	61bb      	str	r3, [r7, #24]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b96:	f7ff fbbd 	bl	8008314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01f      	beq.n	8008be6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008baa:	f000 f8f7 	bl	8008d9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	1e5a      	subs	r2, r3, #1
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00f      	beq.n	8008bde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fe74 	bl	80098b0 <xTaskRemoveFromEventList>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bce:	4b3d      	ldr	r3, [pc, #244]	; (8008cc4 <xQueueReceive+0x1bc>)
 8008bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bde:	f7ff fbc9 	bl	8008374 <vPortExitCritical>
				return pdPASS;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e069      	b.n	8008cba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d103      	bne.n	8008bf4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bec:	f7ff fbc2 	bl	8008374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e062      	b.n	8008cba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bfa:	f107 0310 	add.w	r3, r7, #16
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 feba 	bl	8009978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c04:	2301      	movs	r3, #1
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c08:	f7ff fbb4 	bl	8008374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c0c:	f000 fc26 	bl	800945c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c10:	f7ff fb80 	bl	8008314 <vPortEnterCritical>
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c1a:	b25b      	sxtb	r3, r3
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c20:	d103      	bne.n	8008c2a <xQueueReceive+0x122>
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	d103      	bne.n	8008c40 <xQueueReceive+0x138>
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c40:	f7ff fb98 	bl	8008374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c44:	1d3a      	adds	r2, r7, #4
 8008c46:	f107 0310 	add.w	r3, r7, #16
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fea9 	bl	80099a4 <xTaskCheckForTimeOut>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d123      	bne.n	8008ca0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c5a:	f000 f917 	bl	8008e8c <prvIsQueueEmpty>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d017      	beq.n	8008c94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	3324      	adds	r3, #36	; 0x24
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fdcf 	bl	8009810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c74:	f000 f8b8 	bl	8008de8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c78:	f000 fbfe 	bl	8009478 <xTaskResumeAll>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d189      	bne.n	8008b96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c82:	4b10      	ldr	r3, [pc, #64]	; (8008cc4 <xQueueReceive+0x1bc>)
 8008c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	e780      	b.n	8008b96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c96:	f000 f8a7 	bl	8008de8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c9a:	f000 fbed 	bl	8009478 <xTaskResumeAll>
 8008c9e:	e77a      	b.n	8008b96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca2:	f000 f8a1 	bl	8008de8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ca6:	f000 fbe7 	bl	8009478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cac:	f000 f8ee 	bl	8008e8c <prvIsQueueEmpty>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f43f af6f 	beq.w	8008b96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3730      	adds	r7, #48	; 0x30
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	e000ed04 	.word	0xe000ed04

08008cc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10d      	bne.n	8008d02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d14d      	bne.n	8008d8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 ffbc 	bl	8009c70 <xTaskPriorityDisinherit>
 8008cf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	609a      	str	r2, [r3, #8]
 8008d00:	e043      	b.n	8008d8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d119      	bne.n	8008d3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6858      	ldr	r0, [r3, #4]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	461a      	mov	r2, r3
 8008d12:	68b9      	ldr	r1, [r7, #8]
 8008d14:	f001 fd00 	bl	800a718 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d32b      	bcc.n	8008d8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	605a      	str	r2, [r3, #4]
 8008d3a:	e026      	b.n	8008d8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	68d8      	ldr	r0, [r3, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	461a      	mov	r2, r3
 8008d46:	68b9      	ldr	r1, [r7, #8]
 8008d48:	f001 fce6 	bl	800a718 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d54:	425b      	negs	r3, r3
 8008d56:	441a      	add	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d207      	bcs.n	8008d78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d70:	425b      	negs	r3, r3
 8008d72:	441a      	add	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d105      	bne.n	8008d8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d92:	697b      	ldr	r3, [r7, #20]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d018      	beq.n	8008de0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	441a      	add	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d303      	bcc.n	8008dd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68d9      	ldr	r1, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6838      	ldr	r0, [r7, #0]
 8008ddc:	f001 fc9c 	bl	800a718 <memcpy>
	}
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008df0:	f7ff fa90 	bl	8008314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dfc:	e011      	b.n	8008e22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d012      	beq.n	8008e2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3324      	adds	r3, #36	; 0x24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fd50 	bl	80098b0 <xTaskRemoveFromEventList>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e16:	f000 fe27 	bl	8009a68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	dce9      	bgt.n	8008dfe <prvUnlockQueue+0x16>
 8008e2a:	e000      	b.n	8008e2e <prvUnlockQueue+0x46>
					break;
 8008e2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	22ff      	movs	r2, #255	; 0xff
 8008e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e36:	f7ff fa9d 	bl	8008374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e3a:	f7ff fa6b 	bl	8008314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e46:	e011      	b.n	8008e6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d012      	beq.n	8008e76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3310      	adds	r3, #16
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fd2b 	bl	80098b0 <xTaskRemoveFromEventList>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e60:	f000 fe02 	bl	8009a68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dce9      	bgt.n	8008e48 <prvUnlockQueue+0x60>
 8008e74:	e000      	b.n	8008e78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	22ff      	movs	r2, #255	; 0xff
 8008e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e80:	f7ff fa78 	bl	8008374 <vPortExitCritical>
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e94:	f7ff fa3e 	bl	8008314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e001      	b.n	8008eaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008eaa:	f7ff fa63 	bl	8008374 <vPortExitCritical>

	return xReturn;
 8008eae:	68fb      	ldr	r3, [r7, #12]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ec0:	f7ff fa28 	bl	8008314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d102      	bne.n	8008ed6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	e001      	b.n	8008eda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008eda:	f7ff fa4b 	bl	8008374 <vPortExitCritical>

	return xReturn;
 8008ede:	68fb      	ldr	r3, [r7, #12]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e014      	b.n	8008f22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ef8:	4a0f      	ldr	r2, [pc, #60]	; (8008f38 <vQueueAddToRegistry+0x50>)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10b      	bne.n	8008f1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f04:	490c      	ldr	r1, [pc, #48]	; (8008f38 <vQueueAddToRegistry+0x50>)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f0e:	4a0a      	ldr	r2, [pc, #40]	; (8008f38 <vQueueAddToRegistry+0x50>)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	4413      	add	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f1a:	e006      	b.n	8008f2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b07      	cmp	r3, #7
 8008f26:	d9e7      	bls.n	8008ef8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	200021cc 	.word	0x200021cc

08008f3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f4c:	f7ff f9e2 	bl	8008314 <vPortEnterCritical>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f56:	b25b      	sxtb	r3, r3
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d103      	bne.n	8008f66 <vQueueWaitForMessageRestricted+0x2a>
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f6c:	b25b      	sxtb	r3, r3
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f72:	d103      	bne.n	8008f7c <vQueueWaitForMessageRestricted+0x40>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f7c:	f7ff f9fa 	bl	8008374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d106      	bne.n	8008f96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	3324      	adds	r3, #36	; 0x24
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fc61 	bl	8009858 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f96:	6978      	ldr	r0, [r7, #20]
 8008f98:	f7ff ff26 	bl	8008de8 <prvUnlockQueue>
	}
 8008f9c:	bf00      	nop
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08e      	sub	sp, #56	; 0x38
 8008fa8:	af04      	add	r7, sp, #16
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xTaskCreateStatic+0x2a>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	623b      	str	r3, [r7, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <xTaskCreateStatic+0x46>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	61fb      	str	r3, [r7, #28]
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fea:	23bc      	movs	r3, #188	; 0xbc
 8008fec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2bbc      	cmp	r3, #188	; 0xbc
 8008ff2:	d00a      	beq.n	800900a <xTaskCreateStatic+0x66>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	61bb      	str	r3, [r7, #24]
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800900a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01e      	beq.n	8009050 <xTaskCreateStatic+0xac>
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01b      	beq.n	8009050 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009020:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	2202      	movs	r2, #2
 8009026:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800902a:	2300      	movs	r3, #0
 800902c:	9303      	str	r3, [sp, #12]
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	9302      	str	r3, [sp, #8]
 8009032:	f107 0314 	add.w	r3, r7, #20
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 f850 	bl	80090e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800904a:	f000 f8f3 	bl	8009234 <prvAddNewTaskToReadyList>
 800904e:	e001      	b.n	8009054 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009054:	697b      	ldr	r3, [r7, #20]
	}
 8009056:	4618      	mov	r0, r3
 8009058:	3728      	adds	r7, #40	; 0x28
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800905e:	b580      	push	{r7, lr}
 8009060:	b08c      	sub	sp, #48	; 0x30
 8009062:	af04      	add	r7, sp, #16
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	4613      	mov	r3, r2
 800906c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fd86 	bl	8007b84 <pvPortMalloc>
 8009078:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00e      	beq.n	800909e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009080:	20bc      	movs	r0, #188	; 0xbc
 8009082:	f7fe fd7f 	bl	8007b84 <pvPortMalloc>
 8009086:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
 8009094:	e005      	b.n	80090a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009096:	6978      	ldr	r0, [r7, #20]
 8009098:	f7fe fe40 	bl	8007d1c <vPortFree>
 800909c:	e001      	b.n	80090a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d017      	beq.n	80090d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090b0:	88fa      	ldrh	r2, [r7, #6]
 80090b2:	2300      	movs	r3, #0
 80090b4:	9303      	str	r3, [sp, #12]
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	9302      	str	r3, [sp, #8]
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f80e 	bl	80090e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090cc:	69f8      	ldr	r0, [r7, #28]
 80090ce:	f000 f8b1 	bl	8009234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090d2:	2301      	movs	r3, #1
 80090d4:	61bb      	str	r3, [r7, #24]
 80090d6:	e002      	b.n	80090de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090d8:	f04f 33ff 	mov.w	r3, #4294967295
 80090dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090de:	69bb      	ldr	r3, [r7, #24]
	}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	461a      	mov	r2, r3
 8009100:	21a5      	movs	r1, #165	; 0xa5
 8009102:	f001 fb17 	bl	800a734 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009110:	3b01      	subs	r3, #1
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <prvInitialiseNewTask+0x58>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	617b      	str	r3, [r7, #20]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01f      	beq.n	8009186 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009146:	2300      	movs	r3, #0
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	e012      	b.n	8009172 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	7819      	ldrb	r1, [r3, #0]
 8009154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	3334      	adds	r3, #52	; 0x34
 800915c:	460a      	mov	r2, r1
 800915e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4413      	add	r3, r2
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d006      	beq.n	800917a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	3301      	adds	r3, #1
 8009170:	61fb      	str	r3, [r7, #28]
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	2b0f      	cmp	r3, #15
 8009176:	d9e9      	bls.n	800914c <prvInitialiseNewTask+0x64>
 8009178:	e000      	b.n	800917c <prvInitialiseNewTask+0x94>
			{
				break;
 800917a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009184:	e003      	b.n	800918e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	2b37      	cmp	r3, #55	; 0x37
 8009192:	d901      	bls.n	8009198 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009194:	2337      	movs	r3, #55	; 0x37
 8009196:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800919c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	2200      	movs	r2, #0
 80091a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	3304      	adds	r3, #4
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe fef2 	bl	8007f98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	3318      	adds	r3, #24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe feed 	bl	8007f98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	3354      	adds	r3, #84	; 0x54
 80091e8:	2260      	movs	r2, #96	; 0x60
 80091ea:	2100      	movs	r1, #0
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 faa1 	bl	800a734 <memset>
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	4a0c      	ldr	r2, [pc, #48]	; (8009228 <prvInitialiseNewTask+0x140>)
 80091f6:	659a      	str	r2, [r3, #88]	; 0x58
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	4a0c      	ldr	r2, [pc, #48]	; (800922c <prvInitialiseNewTask+0x144>)
 80091fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	4a0b      	ldr	r2, [pc, #44]	; (8009230 <prvInitialiseNewTask+0x148>)
 8009202:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	69b8      	ldr	r0, [r7, #24]
 800920a:	f7fe ff59 	bl	80080c0 <pxPortInitialiseStack>
 800920e:	4602      	mov	r2, r0
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009220:	bf00      	nop
 8009222:	3720      	adds	r7, #32
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	0800aac4 	.word	0x0800aac4
 800922c:	0800aae4 	.word	0x0800aae4
 8009230:	0800aaa4 	.word	0x0800aaa4

08009234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800923c:	f7ff f86a 	bl	8008314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009240:	4b2d      	ldr	r3, [pc, #180]	; (80092f8 <prvAddNewTaskToReadyList+0xc4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	4a2c      	ldr	r2, [pc, #176]	; (80092f8 <prvAddNewTaskToReadyList+0xc4>)
 8009248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800924a:	4b2c      	ldr	r3, [pc, #176]	; (80092fc <prvAddNewTaskToReadyList+0xc8>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009252:	4a2a      	ldr	r2, [pc, #168]	; (80092fc <prvAddNewTaskToReadyList+0xc8>)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009258:	4b27      	ldr	r3, [pc, #156]	; (80092f8 <prvAddNewTaskToReadyList+0xc4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d110      	bne.n	8009282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009260:	f000 fc26 	bl	8009ab0 <prvInitialiseTaskLists>
 8009264:	e00d      	b.n	8009282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009266:	4b26      	ldr	r3, [pc, #152]	; (8009300 <prvAddNewTaskToReadyList+0xcc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d109      	bne.n	8009282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800926e:	4b23      	ldr	r3, [pc, #140]	; (80092fc <prvAddNewTaskToReadyList+0xc8>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	429a      	cmp	r2, r3
 800927a:	d802      	bhi.n	8009282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800927c:	4a1f      	ldr	r2, [pc, #124]	; (80092fc <prvAddNewTaskToReadyList+0xc8>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009282:	4b20      	ldr	r3, [pc, #128]	; (8009304 <prvAddNewTaskToReadyList+0xd0>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3301      	adds	r3, #1
 8009288:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <prvAddNewTaskToReadyList+0xd0>)
 800928a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800928c:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <prvAddNewTaskToReadyList+0xd0>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4b1b      	ldr	r3, [pc, #108]	; (8009308 <prvAddNewTaskToReadyList+0xd4>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d903      	bls.n	80092a8 <prvAddNewTaskToReadyList+0x74>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	4a18      	ldr	r2, [pc, #96]	; (8009308 <prvAddNewTaskToReadyList+0xd4>)
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4a15      	ldr	r2, [pc, #84]	; (800930c <prvAddNewTaskToReadyList+0xd8>)
 80092b6:	441a      	add	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fe fe77 	bl	8007fb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092c4:	f7ff f856 	bl	8008374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092c8:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <prvAddNewTaskToReadyList+0xcc>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00e      	beq.n	80092ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <prvAddNewTaskToReadyList+0xc8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092da:	429a      	cmp	r2, r3
 80092dc:	d207      	bcs.n	80092ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <prvAddNewTaskToReadyList+0xdc>)
 80092e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	200026e0 	.word	0x200026e0
 80092fc:	2000220c 	.word	0x2000220c
 8009300:	200026ec 	.word	0x200026ec
 8009304:	200026fc 	.word	0x200026fc
 8009308:	200026e8 	.word	0x200026e8
 800930c:	20002210 	.word	0x20002210
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d017      	beq.n	8009356 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <vTaskDelay+0x60>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <vTaskDelay+0x30>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	60bb      	str	r3, [r7, #8]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009344:	f000 f88a 	bl	800945c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009348:	2100      	movs	r1, #0
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fe1c 	bl	8009f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009350:	f000 f892 	bl	8009478 <xTaskResumeAll>
 8009354:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d107      	bne.n	800936c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <vTaskDelay+0x64>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800936c:	bf00      	nop
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20002708 	.word	0x20002708
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08a      	sub	sp, #40	; 0x28
 8009380:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009386:	2300      	movs	r3, #0
 8009388:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800938a:	463a      	mov	r2, r7
 800938c:	1d39      	adds	r1, r7, #4
 800938e:	f107 0308 	add.w	r3, r7, #8
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fbc2 	bl	8007b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	9202      	str	r2, [sp, #8]
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	2300      	movs	r3, #0
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2300      	movs	r3, #0
 80093a8:	460a      	mov	r2, r1
 80093aa:	4924      	ldr	r1, [pc, #144]	; (800943c <vTaskStartScheduler+0xc0>)
 80093ac:	4824      	ldr	r0, [pc, #144]	; (8009440 <vTaskStartScheduler+0xc4>)
 80093ae:	f7ff fdf9 	bl	8008fa4 <xTaskCreateStatic>
 80093b2:	4603      	mov	r3, r0
 80093b4:	4a23      	ldr	r2, [pc, #140]	; (8009444 <vTaskStartScheduler+0xc8>)
 80093b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093b8:	4b22      	ldr	r3, [pc, #136]	; (8009444 <vTaskStartScheduler+0xc8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093c0:	2301      	movs	r3, #1
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e001      	b.n	80093ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d102      	bne.n	80093d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093d0:	f000 fe2e 	bl	800a030 <xTimerCreateTimerTask>
 80093d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d11b      	bne.n	8009414 <vTaskStartScheduler+0x98>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	613b      	str	r3, [r7, #16]
}
 80093ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093f0:	4b15      	ldr	r3, [pc, #84]	; (8009448 <vTaskStartScheduler+0xcc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3354      	adds	r3, #84	; 0x54
 80093f6:	4a15      	ldr	r2, [pc, #84]	; (800944c <vTaskStartScheduler+0xd0>)
 80093f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093fa:	4b15      	ldr	r3, [pc, #84]	; (8009450 <vTaskStartScheduler+0xd4>)
 80093fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009400:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009402:	4b14      	ldr	r3, [pc, #80]	; (8009454 <vTaskStartScheduler+0xd8>)
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009408:	4b13      	ldr	r3, [pc, #76]	; (8009458 <vTaskStartScheduler+0xdc>)
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800940e:	f7fe fedf 	bl	80081d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009412:	e00e      	b.n	8009432 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941a:	d10a      	bne.n	8009432 <vTaskStartScheduler+0xb6>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	60fb      	str	r3, [r7, #12]
}
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <vTaskStartScheduler+0xb4>
}
 8009432:	bf00      	nop
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	0800a9a8 	.word	0x0800a9a8
 8009440:	08009a81 	.word	0x08009a81
 8009444:	20002704 	.word	0x20002704
 8009448:	2000220c 	.word	0x2000220c
 800944c:	20000014 	.word	0x20000014
 8009450:	20002700 	.word	0x20002700
 8009454:	200026ec 	.word	0x200026ec
 8009458:	200026e4 	.word	0x200026e4

0800945c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009460:	4b04      	ldr	r3, [pc, #16]	; (8009474 <vTaskSuspendAll+0x18>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3301      	adds	r3, #1
 8009466:	4a03      	ldr	r2, [pc, #12]	; (8009474 <vTaskSuspendAll+0x18>)
 8009468:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800946a:	bf00      	nop
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	20002708 	.word	0x20002708

08009478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009482:	2300      	movs	r3, #0
 8009484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009486:	4b42      	ldr	r3, [pc, #264]	; (8009590 <xTaskResumeAll+0x118>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	603b      	str	r3, [r7, #0]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094a4:	f7fe ff36 	bl	8008314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094a8:	4b39      	ldr	r3, [pc, #228]	; (8009590 <xTaskResumeAll+0x118>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	4a38      	ldr	r2, [pc, #224]	; (8009590 <xTaskResumeAll+0x118>)
 80094b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094b2:	4b37      	ldr	r3, [pc, #220]	; (8009590 <xTaskResumeAll+0x118>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d162      	bne.n	8009580 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094ba:	4b36      	ldr	r3, [pc, #216]	; (8009594 <xTaskResumeAll+0x11c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d05e      	beq.n	8009580 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094c2:	e02f      	b.n	8009524 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c4:	4b34      	ldr	r3, [pc, #208]	; (8009598 <xTaskResumeAll+0x120>)
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3318      	adds	r3, #24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fdcb 	bl	800806c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3304      	adds	r3, #4
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fdc6 	bl	800806c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e4:	4b2d      	ldr	r3, [pc, #180]	; (800959c <xTaskResumeAll+0x124>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d903      	bls.n	80094f4 <xTaskResumeAll+0x7c>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	4a2a      	ldr	r2, [pc, #168]	; (800959c <xTaskResumeAll+0x124>)
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4a27      	ldr	r2, [pc, #156]	; (80095a0 <xTaskResumeAll+0x128>)
 8009502:	441a      	add	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	3304      	adds	r3, #4
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7fe fd51 	bl	8007fb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	4b23      	ldr	r3, [pc, #140]	; (80095a4 <xTaskResumeAll+0x12c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	429a      	cmp	r2, r3
 800951c:	d302      	bcc.n	8009524 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800951e:	4b22      	ldr	r3, [pc, #136]	; (80095a8 <xTaskResumeAll+0x130>)
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009524:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <xTaskResumeAll+0x120>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1cb      	bne.n	80094c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009532:	f000 fb5f 	bl	8009bf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009536:	4b1d      	ldr	r3, [pc, #116]	; (80095ac <xTaskResumeAll+0x134>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d010      	beq.n	8009564 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009542:	f000 f847 	bl	80095d4 <xTaskIncrementTick>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800954c:	4b16      	ldr	r3, [pc, #88]	; (80095a8 <xTaskResumeAll+0x130>)
 800954e:	2201      	movs	r2, #1
 8009550:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3b01      	subs	r3, #1
 8009556:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1f1      	bne.n	8009542 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800955e:	4b13      	ldr	r3, [pc, #76]	; (80095ac <xTaskResumeAll+0x134>)
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009564:	4b10      	ldr	r3, [pc, #64]	; (80095a8 <xTaskResumeAll+0x130>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009570:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <xTaskResumeAll+0x138>)
 8009572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009580:	f7fe fef8 	bl	8008374 <vPortExitCritical>

	return xAlreadyYielded;
 8009584:	68bb      	ldr	r3, [r7, #8]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20002708 	.word	0x20002708
 8009594:	200026e0 	.word	0x200026e0
 8009598:	200026a0 	.word	0x200026a0
 800959c:	200026e8 	.word	0x200026e8
 80095a0:	20002210 	.word	0x20002210
 80095a4:	2000220c 	.word	0x2000220c
 80095a8:	200026f4 	.word	0x200026f4
 80095ac:	200026f0 	.word	0x200026f0
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095ba:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <xTaskGetTickCount+0x1c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095c0:	687b      	ldr	r3, [r7, #4]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	200026e4 	.word	0x200026e4

080095d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095de:	4b4f      	ldr	r3, [pc, #316]	; (800971c <xTaskIncrementTick+0x148>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 808f 	bne.w	8009706 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095e8:	4b4d      	ldr	r3, [pc, #308]	; (8009720 <xTaskIncrementTick+0x14c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3301      	adds	r3, #1
 80095ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095f0:	4a4b      	ldr	r2, [pc, #300]	; (8009720 <xTaskIncrementTick+0x14c>)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d120      	bne.n	800963e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095fc:	4b49      	ldr	r3, [pc, #292]	; (8009724 <xTaskIncrementTick+0x150>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <xTaskIncrementTick+0x48>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	603b      	str	r3, [r7, #0]
}
 8009618:	bf00      	nop
 800961a:	e7fe      	b.n	800961a <xTaskIncrementTick+0x46>
 800961c:	4b41      	ldr	r3, [pc, #260]	; (8009724 <xTaskIncrementTick+0x150>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	4b41      	ldr	r3, [pc, #260]	; (8009728 <xTaskIncrementTick+0x154>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a3f      	ldr	r2, [pc, #252]	; (8009724 <xTaskIncrementTick+0x150>)
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	4a3f      	ldr	r2, [pc, #252]	; (8009728 <xTaskIncrementTick+0x154>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	4b3e      	ldr	r3, [pc, #248]	; (800972c <xTaskIncrementTick+0x158>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3301      	adds	r3, #1
 8009636:	4a3d      	ldr	r2, [pc, #244]	; (800972c <xTaskIncrementTick+0x158>)
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	f000 fadb 	bl	8009bf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800963e:	4b3c      	ldr	r3, [pc, #240]	; (8009730 <xTaskIncrementTick+0x15c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	429a      	cmp	r2, r3
 8009646:	d349      	bcc.n	80096dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009648:	4b36      	ldr	r3, [pc, #216]	; (8009724 <xTaskIncrementTick+0x150>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d104      	bne.n	800965c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009652:	4b37      	ldr	r3, [pc, #220]	; (8009730 <xTaskIncrementTick+0x15c>)
 8009654:	f04f 32ff 	mov.w	r2, #4294967295
 8009658:	601a      	str	r2, [r3, #0]
					break;
 800965a:	e03f      	b.n	80096dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800965c:	4b31      	ldr	r3, [pc, #196]	; (8009724 <xTaskIncrementTick+0x150>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d203      	bcs.n	800967c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009674:	4a2e      	ldr	r2, [pc, #184]	; (8009730 <xTaskIncrementTick+0x15c>)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800967a:	e02f      	b.n	80096dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	3304      	adds	r3, #4
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe fcf3 	bl	800806c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	3318      	adds	r3, #24
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe fcea 	bl	800806c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969c:	4b25      	ldr	r3, [pc, #148]	; (8009734 <xTaskIncrementTick+0x160>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d903      	bls.n	80096ac <xTaskIncrementTick+0xd8>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a8:	4a22      	ldr	r2, [pc, #136]	; (8009734 <xTaskIncrementTick+0x160>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4a1f      	ldr	r2, [pc, #124]	; (8009738 <xTaskIncrementTick+0x164>)
 80096ba:	441a      	add	r2, r3
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f7fe fc75 	bl	8007fb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096cc:	4b1b      	ldr	r3, [pc, #108]	; (800973c <xTaskIncrementTick+0x168>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d3b8      	bcc.n	8009648 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80096d6:	2301      	movs	r3, #1
 80096d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096da:	e7b5      	b.n	8009648 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096dc:	4b17      	ldr	r3, [pc, #92]	; (800973c <xTaskIncrementTick+0x168>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e2:	4915      	ldr	r1, [pc, #84]	; (8009738 <xTaskIncrementTick+0x164>)
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d901      	bls.n	80096f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096f4:	2301      	movs	r3, #1
 80096f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096f8:	4b11      	ldr	r3, [pc, #68]	; (8009740 <xTaskIncrementTick+0x16c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d007      	beq.n	8009710 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009700:	2301      	movs	r3, #1
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	e004      	b.n	8009710 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <xTaskIncrementTick+0x170>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	4a0d      	ldr	r2, [pc, #52]	; (8009744 <xTaskIncrementTick+0x170>)
 800970e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009710:	697b      	ldr	r3, [r7, #20]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	20002708 	.word	0x20002708
 8009720:	200026e4 	.word	0x200026e4
 8009724:	20002698 	.word	0x20002698
 8009728:	2000269c 	.word	0x2000269c
 800972c:	200026f8 	.word	0x200026f8
 8009730:	20002700 	.word	0x20002700
 8009734:	200026e8 	.word	0x200026e8
 8009738:	20002210 	.word	0x20002210
 800973c:	2000220c 	.word	0x2000220c
 8009740:	200026f4 	.word	0x200026f4
 8009744:	200026f0 	.word	0x200026f0

08009748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800974e:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <vTaskSwitchContext+0xb0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009756:	4b29      	ldr	r3, [pc, #164]	; (80097fc <vTaskSwitchContext+0xb4>)
 8009758:	2201      	movs	r2, #1
 800975a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800975c:	e046      	b.n	80097ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800975e:	4b27      	ldr	r3, [pc, #156]	; (80097fc <vTaskSwitchContext+0xb4>)
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009764:	4b26      	ldr	r3, [pc, #152]	; (8009800 <vTaskSwitchContext+0xb8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	e010      	b.n	800978e <vTaskSwitchContext+0x46>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <vTaskSwitchContext+0x40>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	607b      	str	r3, [r7, #4]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <vTaskSwitchContext+0x3e>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3b01      	subs	r3, #1
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	491d      	ldr	r1, [pc, #116]	; (8009804 <vTaskSwitchContext+0xbc>)
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	440b      	add	r3, r1
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0e4      	beq.n	800976c <vTaskSwitchContext+0x24>
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <vTaskSwitchContext+0xbc>)
 80097ae:	4413      	add	r3, r2
 80097b0:	60bb      	str	r3, [r7, #8]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	605a      	str	r2, [r3, #4]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	3308      	adds	r3, #8
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d104      	bne.n	80097d2 <vTaskSwitchContext+0x8a>
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	605a      	str	r2, [r3, #4]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4a0b      	ldr	r2, [pc, #44]	; (8009808 <vTaskSwitchContext+0xc0>)
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	4a08      	ldr	r2, [pc, #32]	; (8009800 <vTaskSwitchContext+0xb8>)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <vTaskSwitchContext+0xc0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3354      	adds	r3, #84	; 0x54
 80097e8:	4a08      	ldr	r2, [pc, #32]	; (800980c <vTaskSwitchContext+0xc4>)
 80097ea:	6013      	str	r3, [r2, #0]
}
 80097ec:	bf00      	nop
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	20002708 	.word	0x20002708
 80097fc:	200026f4 	.word	0x200026f4
 8009800:	200026e8 	.word	0x200026e8
 8009804:	20002210 	.word	0x20002210
 8009808:	2000220c 	.word	0x2000220c
 800980c:	20000014 	.word	0x20000014

08009810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60fb      	str	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009836:	4b07      	ldr	r3, [pc, #28]	; (8009854 <vTaskPlaceOnEventList+0x44>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3318      	adds	r3, #24
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7fe fbdb 	bl	8007ffa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009844:	2101      	movs	r1, #1
 8009846:	6838      	ldr	r0, [r7, #0]
 8009848:	f000 fb9e 	bl	8009f88 <prvAddCurrentTaskToDelayedList>
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	2000220c 	.word	0x2000220c

08009858 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10a      	bne.n	8009880 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	617b      	str	r3, [r7, #20]
}
 800987c:	bf00      	nop
 800987e:	e7fe      	b.n	800987e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <vTaskPlaceOnEventListRestricted+0x54>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3318      	adds	r3, #24
 8009886:	4619      	mov	r1, r3
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7fe fb92 	bl	8007fb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009894:	f04f 33ff 	mov.w	r3, #4294967295
 8009898:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	68b8      	ldr	r0, [r7, #8]
 800989e:	f000 fb73 	bl	8009f88 <prvAddCurrentTaskToDelayedList>
	}
 80098a2:	bf00      	nop
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	2000220c 	.word	0x2000220c

080098b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	60fb      	str	r3, [r7, #12]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	3318      	adds	r3, #24
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fbc3 	bl	800806c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098e6:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <xTaskRemoveFromEventList+0xb0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d11d      	bne.n	800992a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	3304      	adds	r3, #4
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fbba 	bl	800806c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fc:	4b19      	ldr	r3, [pc, #100]	; (8009964 <xTaskRemoveFromEventList+0xb4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	429a      	cmp	r2, r3
 8009902:	d903      	bls.n	800990c <xTaskRemoveFromEventList+0x5c>
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	4a16      	ldr	r2, [pc, #88]	; (8009964 <xTaskRemoveFromEventList+0xb4>)
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4a13      	ldr	r2, [pc, #76]	; (8009968 <xTaskRemoveFromEventList+0xb8>)
 800991a:	441a      	add	r2, r3
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	3304      	adds	r3, #4
 8009920:	4619      	mov	r1, r3
 8009922:	4610      	mov	r0, r2
 8009924:	f7fe fb45 	bl	8007fb2 <vListInsertEnd>
 8009928:	e005      	b.n	8009936 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	3318      	adds	r3, #24
 800992e:	4619      	mov	r1, r3
 8009930:	480e      	ldr	r0, [pc, #56]	; (800996c <xTaskRemoveFromEventList+0xbc>)
 8009932:	f7fe fb3e 	bl	8007fb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993a:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <xTaskRemoveFromEventList+0xc0>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009940:	429a      	cmp	r2, r3
 8009942:	d905      	bls.n	8009950 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009944:	2301      	movs	r3, #1
 8009946:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009948:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <xTaskRemoveFromEventList+0xc4>)
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	e001      	b.n	8009954 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009954:	697b      	ldr	r3, [r7, #20]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20002708 	.word	0x20002708
 8009964:	200026e8 	.word	0x200026e8
 8009968:	20002210 	.word	0x20002210
 800996c:	200026a0 	.word	0x200026a0
 8009970:	2000220c 	.word	0x2000220c
 8009974:	200026f4 	.word	0x200026f4

08009978 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009980:	4b06      	ldr	r3, [pc, #24]	; (800999c <vTaskInternalSetTimeOutState+0x24>)
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009988:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <vTaskInternalSetTimeOutState+0x28>)
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	605a      	str	r2, [r3, #4]
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	200026f8 	.word	0x200026f8
 80099a0:	200026e4 	.word	0x200026e4

080099a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10a      	bne.n	80099ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	613b      	str	r3, [r7, #16]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099e6:	f7fe fc95 	bl	8008314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099ea:	4b1d      	ldr	r3, [pc, #116]	; (8009a60 <xTaskCheckForTimeOut+0xbc>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a02:	d102      	bne.n	8009a0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	e023      	b.n	8009a52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	4b15      	ldr	r3, [pc, #84]	; (8009a64 <xTaskCheckForTimeOut+0xc0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d007      	beq.n	8009a26 <xTaskCheckForTimeOut+0x82>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d302      	bcc.n	8009a26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	61fb      	str	r3, [r7, #28]
 8009a24:	e015      	b.n	8009a52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d20b      	bcs.n	8009a48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	1ad2      	subs	r2, r2, r3
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff ff9b 	bl	8009978 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	e004      	b.n	8009a52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a52:	f7fe fc8f 	bl	8008374 <vPortExitCritical>

	return xReturn;
 8009a56:	69fb      	ldr	r3, [r7, #28]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	200026e4 	.word	0x200026e4
 8009a64:	200026f8 	.word	0x200026f8

08009a68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a6c:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <vTaskMissedYield+0x14>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	601a      	str	r2, [r3, #0]
}
 8009a72:	bf00      	nop
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	200026f4 	.word	0x200026f4

08009a80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a88:	f000 f852 	bl	8009b30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <prvIdleTask+0x28>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d9f9      	bls.n	8009a88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a94:	4b05      	ldr	r3, [pc, #20]	; (8009aac <prvIdleTask+0x2c>)
 8009a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009aa4:	e7f0      	b.n	8009a88 <prvIdleTask+0x8>
 8009aa6:	bf00      	nop
 8009aa8:	20002210 	.word	0x20002210
 8009aac:	e000ed04 	.word	0xe000ed04

08009ab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	607b      	str	r3, [r7, #4]
 8009aba:	e00c      	b.n	8009ad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4a12      	ldr	r2, [pc, #72]	; (8009b10 <prvInitialiseTaskLists+0x60>)
 8009ac8:	4413      	add	r3, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fa44 	bl	8007f58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	607b      	str	r3, [r7, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b37      	cmp	r3, #55	; 0x37
 8009ada:	d9ef      	bls.n	8009abc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009adc:	480d      	ldr	r0, [pc, #52]	; (8009b14 <prvInitialiseTaskLists+0x64>)
 8009ade:	f7fe fa3b 	bl	8007f58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ae2:	480d      	ldr	r0, [pc, #52]	; (8009b18 <prvInitialiseTaskLists+0x68>)
 8009ae4:	f7fe fa38 	bl	8007f58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ae8:	480c      	ldr	r0, [pc, #48]	; (8009b1c <prvInitialiseTaskLists+0x6c>)
 8009aea:	f7fe fa35 	bl	8007f58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009aee:	480c      	ldr	r0, [pc, #48]	; (8009b20 <prvInitialiseTaskLists+0x70>)
 8009af0:	f7fe fa32 	bl	8007f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009af4:	480b      	ldr	r0, [pc, #44]	; (8009b24 <prvInitialiseTaskLists+0x74>)
 8009af6:	f7fe fa2f 	bl	8007f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <prvInitialiseTaskLists+0x78>)
 8009afc:	4a05      	ldr	r2, [pc, #20]	; (8009b14 <prvInitialiseTaskLists+0x64>)
 8009afe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b00:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <prvInitialiseTaskLists+0x7c>)
 8009b02:	4a05      	ldr	r2, [pc, #20]	; (8009b18 <prvInitialiseTaskLists+0x68>)
 8009b04:	601a      	str	r2, [r3, #0]
}
 8009b06:	bf00      	nop
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20002210 	.word	0x20002210
 8009b14:	20002670 	.word	0x20002670
 8009b18:	20002684 	.word	0x20002684
 8009b1c:	200026a0 	.word	0x200026a0
 8009b20:	200026b4 	.word	0x200026b4
 8009b24:	200026cc 	.word	0x200026cc
 8009b28:	20002698 	.word	0x20002698
 8009b2c:	2000269c 	.word	0x2000269c

08009b30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b36:	e019      	b.n	8009b6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b38:	f7fe fbec 	bl	8008314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3c:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <prvCheckTasksWaitingTermination+0x50>)
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fa8f 	bl	800806c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b4e:	4b0d      	ldr	r3, [pc, #52]	; (8009b84 <prvCheckTasksWaitingTermination+0x54>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	4a0b      	ldr	r2, [pc, #44]	; (8009b84 <prvCheckTasksWaitingTermination+0x54>)
 8009b56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b58:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <prvCheckTasksWaitingTermination+0x58>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	4a0a      	ldr	r2, [pc, #40]	; (8009b88 <prvCheckTasksWaitingTermination+0x58>)
 8009b60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b62:	f7fe fc07 	bl	8008374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f810 	bl	8009b8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <prvCheckTasksWaitingTermination+0x58>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e1      	bne.n	8009b38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	200026b4 	.word	0x200026b4
 8009b84:	200026e0 	.word	0x200026e0
 8009b88:	200026c8 	.word	0x200026c8

08009b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3354      	adds	r3, #84	; 0x54
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fde1 	bl	800a760 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d108      	bne.n	8009bba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe f8b5 	bl	8007d1c <vPortFree>
				vPortFree( pxTCB );
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fe f8b2 	bl	8007d1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bb8:	e018      	b.n	8009bec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d103      	bne.n	8009bcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7fe f8a9 	bl	8007d1c <vPortFree>
	}
 8009bca:	e00f      	b.n	8009bec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d00a      	beq.n	8009bec <prvDeleteTCB+0x60>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60fb      	str	r3, [r7, #12]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <prvDeleteTCB+0x5e>
	}
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfa:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <prvResetNextTaskUnblockTime+0x38>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d104      	bne.n	8009c0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c04:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <prvResetNextTaskUnblockTime+0x3c>)
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c0c:	e008      	b.n	8009c20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0e:	4b07      	ldr	r3, [pc, #28]	; (8009c2c <prvResetNextTaskUnblockTime+0x38>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	4a04      	ldr	r2, [pc, #16]	; (8009c30 <prvResetNextTaskUnblockTime+0x3c>)
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20002698 	.word	0x20002698
 8009c30:	20002700 	.word	0x20002700

08009c34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <xTaskGetSchedulerState+0x34>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c42:	2301      	movs	r3, #1
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	e008      	b.n	8009c5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c48:	4b08      	ldr	r3, [pc, #32]	; (8009c6c <xTaskGetSchedulerState+0x38>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c50:	2302      	movs	r3, #2
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e001      	b.n	8009c5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c5a:	687b      	ldr	r3, [r7, #4]
	}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	200026ec 	.word	0x200026ec
 8009c6c:	20002708 	.word	0x20002708

08009c70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d056      	beq.n	8009d34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <xTaskPriorityDisinherit+0xd0>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d00a      	beq.n	8009ca6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	60fb      	str	r3, [r7, #12]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	60bb      	str	r3, [r7, #8]
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc8:	1e5a      	subs	r2, r3, #1
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d02c      	beq.n	8009d34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d128      	bne.n	8009d34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe f9c0 	bl	800806c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <xTaskPriorityDisinherit+0xd4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d903      	bls.n	8009d14 <xTaskPriorityDisinherit+0xa4>
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <xTaskPriorityDisinherit+0xd4>)
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <xTaskPriorityDisinherit+0xd8>)
 8009d22:	441a      	add	r2, r3
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	3304      	adds	r3, #4
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	f7fe f941 	bl	8007fb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d34:	697b      	ldr	r3, [r7, #20]
	}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	2000220c 	.word	0x2000220c
 8009d44:	200026e8 	.word	0x200026e8
 8009d48:	20002210 	.word	0x20002210

08009d4c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009d5a:	f7fe fadb 	bl	8008314 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d5e:	4b29      	ldr	r3, [pc, #164]	; (8009e04 <xTaskNotifyWait+0xb8>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d01c      	beq.n	8009da6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009d6c:	4b25      	ldr	r3, [pc, #148]	; (8009e04 <xTaskNotifyWait+0xb8>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	43d2      	mvns	r2, r2
 8009d78:	400a      	ands	r2, r1
 8009d7a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d7e:	4b21      	ldr	r3, [pc, #132]	; (8009e04 <xTaskNotifyWait+0xb8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d8e:	2101      	movs	r1, #1
 8009d90:	6838      	ldr	r0, [r7, #0]
 8009d92:	f000 f8f9 	bl	8009f88 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d96:	4b1c      	ldr	r3, [pc, #112]	; (8009e08 <xTaskNotifyWait+0xbc>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009da6:	f7fe fae5 	bl	8008374 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009daa:	f7fe fab3 	bl	8008314 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009db4:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <xTaskNotifyWait+0xb8>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009dc0:	4b10      	ldr	r3, [pc, #64]	; (8009e04 <xTaskNotifyWait+0xb8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d002      	beq.n	8009dd4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]
 8009dd2:	e00a      	b.n	8009dea <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009dd4:	4b0b      	ldr	r3, [pc, #44]	; (8009e04 <xTaskNotifyWait+0xb8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	43d2      	mvns	r2, r2
 8009de0:	400a      	ands	r2, r1
 8009de2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009de6:	2301      	movs	r3, #1
 8009de8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dea:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <xTaskNotifyWait+0xb8>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009df4:	f7fe fabe 	bl	8008374 <vPortExitCritical>

		return xReturn;
 8009df8:	697b      	ldr	r3, [r7, #20]
	}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	2000220c 	.word	0x2000220c
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	; 0x28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	603b      	str	r3, [r7, #0]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <xTaskGenericNotify+0x30>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	61bb      	str	r3, [r7, #24]
}
 8009e38:	bf00      	nop
 8009e3a:	e7fe      	b.n	8009e3a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009e40:	f7fe fa68 	bl	8008314 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009e5a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	d82d      	bhi.n	8009ec6 <xTaskGenericNotify+0xba>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <xTaskGenericNotify+0x64>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009ee9 	.word	0x08009ee9
 8009e74:	08009e85 	.word	0x08009e85
 8009e78:	08009e97 	.word	0x08009e97
 8009e7c:	08009ea7 	.word	0x08009ea7
 8009e80:	08009eb1 	.word	0x08009eb1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009e94:	e02b      	b.n	8009eee <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009ea4:	e023      	b.n	8009eee <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009eae:	e01e      	b.n	8009eee <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009eb0:	7ffb      	ldrb	r3, [r7, #31]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d004      	beq.n	8009ec0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009ebe:	e016      	b.n	8009eee <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009ec4:	e013      	b.n	8009eee <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed0:	d00c      	beq.n	8009eec <xTaskGenericNotify+0xe0>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	617b      	str	r3, [r7, #20]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <xTaskGenericNotify+0xda>
					break;
 8009ee8:	bf00      	nop
 8009eea:	e000      	b.n	8009eee <xTaskGenericNotify+0xe2>

					break;
 8009eec:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009eee:	7ffb      	ldrb	r3, [r7, #31]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d13a      	bne.n	8009f6a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe f8b7 	bl	800806c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f02:	4b1d      	ldr	r3, [pc, #116]	; (8009f78 <xTaskGenericNotify+0x16c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d903      	bls.n	8009f12 <xTaskGenericNotify+0x106>
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	4a1a      	ldr	r2, [pc, #104]	; (8009f78 <xTaskGenericNotify+0x16c>)
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4a17      	ldr	r2, [pc, #92]	; (8009f7c <xTaskGenericNotify+0x170>)
 8009f20:	441a      	add	r2, r3
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f7fe f842 	bl	8007fb2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00a      	beq.n	8009f4c <xTaskGenericNotify+0x140>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	613b      	str	r3, [r7, #16]
}
 8009f48:	bf00      	nop
 8009f4a:	e7fe      	b.n	8009f4a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	4b0b      	ldr	r3, [pc, #44]	; (8009f80 <xTaskGenericNotify+0x174>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d907      	bls.n	8009f6a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <xTaskGenericNotify+0x178>)
 8009f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f6a:	f7fe fa03 	bl	8008374 <vPortExitCritical>

		return xReturn;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3728      	adds	r7, #40	; 0x28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	200026e8 	.word	0x200026e8
 8009f7c:	20002210 	.word	0x20002210
 8009f80:	2000220c 	.word	0x2000220c
 8009f84:	e000ed04 	.word	0xe000ed04

08009f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f92:	4b21      	ldr	r3, [pc, #132]	; (800a018 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f98:	4b20      	ldr	r3, [pc, #128]	; (800a01c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe f864 	bl	800806c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009faa:	d10a      	bne.n	8009fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d007      	beq.n	8009fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fb2:	4b1a      	ldr	r3, [pc, #104]	; (800a01c <prvAddCurrentTaskToDelayedList+0x94>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4819      	ldr	r0, [pc, #100]	; (800a020 <prvAddCurrentTaskToDelayedList+0x98>)
 8009fbc:	f7fd fff9 	bl	8007fb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fc0:	e026      	b.n	800a010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fca:	4b14      	ldr	r3, [pc, #80]	; (800a01c <prvAddCurrentTaskToDelayedList+0x94>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d209      	bcs.n	8009fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fda:	4b12      	ldr	r3, [pc, #72]	; (800a024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4b0f      	ldr	r3, [pc, #60]	; (800a01c <prvAddCurrentTaskToDelayedList+0x94>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7fe f807 	bl	8007ffa <vListInsert>
}
 8009fec:	e010      	b.n	800a010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fee:	4b0e      	ldr	r3, [pc, #56]	; (800a028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	f7fd fffd 	bl	8007ffa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	429a      	cmp	r2, r3
 800a008:	d202      	bcs.n	800a010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a00a:	4a08      	ldr	r2, [pc, #32]	; (800a02c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	6013      	str	r3, [r2, #0]
}
 800a010:	bf00      	nop
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200026e4 	.word	0x200026e4
 800a01c:	2000220c 	.word	0x2000220c
 800a020:	200026cc 	.word	0x200026cc
 800a024:	2000269c 	.word	0x2000269c
 800a028:	20002698 	.word	0x20002698
 800a02c:	20002700 	.word	0x20002700

0800a030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a03a:	f000 fb07 	bl	800a64c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a03e:	4b1c      	ldr	r3, [pc, #112]	; (800a0b0 <xTimerCreateTimerTask+0x80>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d021      	beq.n	800a08a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a04e:	1d3a      	adds	r2, r7, #4
 800a050:	f107 0108 	add.w	r1, r7, #8
 800a054:	f107 030c 	add.w	r3, r7, #12
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fd fd79 	bl	8007b50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	9202      	str	r2, [sp, #8]
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	2302      	movs	r3, #2
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	2300      	movs	r3, #0
 800a06e:	460a      	mov	r2, r1
 800a070:	4910      	ldr	r1, [pc, #64]	; (800a0b4 <xTimerCreateTimerTask+0x84>)
 800a072:	4811      	ldr	r0, [pc, #68]	; (800a0b8 <xTimerCreateTimerTask+0x88>)
 800a074:	f7fe ff96 	bl	8008fa4 <xTaskCreateStatic>
 800a078:	4603      	mov	r3, r0
 800a07a:	4a10      	ldr	r2, [pc, #64]	; (800a0bc <xTimerCreateTimerTask+0x8c>)
 800a07c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a07e:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <xTimerCreateTimerTask+0x8c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a086:	2301      	movs	r3, #1
 800a088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	613b      	str	r3, [r7, #16]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0a6:	697b      	ldr	r3, [r7, #20]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	2000273c 	.word	0x2000273c
 800a0b4:	0800a9b0 	.word	0x0800a9b0
 800a0b8:	0800a1f5 	.word	0x0800a1f5
 800a0bc:	20002740 	.word	0x20002740

0800a0c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08a      	sub	sp, #40	; 0x28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10a      	bne.n	800a0ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	623b      	str	r3, [r7, #32]
}
 800a0ea:	bf00      	nop
 800a0ec:	e7fe      	b.n	800a0ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0ee:	4b1a      	ldr	r3, [pc, #104]	; (800a158 <xTimerGenericCommand+0x98>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d02a      	beq.n	800a14c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2b05      	cmp	r3, #5
 800a106:	dc18      	bgt.n	800a13a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a108:	f7ff fd94 	bl	8009c34 <xTaskGetSchedulerState>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d109      	bne.n	800a126 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a112:	4b11      	ldr	r3, [pc, #68]	; (800a158 <xTimerGenericCommand+0x98>)
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	f107 0110 	add.w	r1, r7, #16
 800a11a:	2300      	movs	r3, #0
 800a11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11e:	f7fe fb59 	bl	80087d4 <xQueueGenericSend>
 800a122:	6278      	str	r0, [r7, #36]	; 0x24
 800a124:	e012      	b.n	800a14c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a126:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <xTimerGenericCommand+0x98>)
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	f107 0110 	add.w	r1, r7, #16
 800a12e:	2300      	movs	r3, #0
 800a130:	2200      	movs	r2, #0
 800a132:	f7fe fb4f 	bl	80087d4 <xQueueGenericSend>
 800a136:	6278      	str	r0, [r7, #36]	; 0x24
 800a138:	e008      	b.n	800a14c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a13a:	4b07      	ldr	r3, [pc, #28]	; (800a158 <xTimerGenericCommand+0x98>)
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f107 0110 	add.w	r1, r7, #16
 800a142:	2300      	movs	r3, #0
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	f7fe fc43 	bl	80089d0 <xQueueGenericSendFromISR>
 800a14a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3728      	adds	r7, #40	; 0x28
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	2000273c 	.word	0x2000273c

0800a15c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af02      	add	r7, sp, #8
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a166:	4b22      	ldr	r3, [pc, #136]	; (800a1f0 <prvProcessExpiredTimer+0x94>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	3304      	adds	r3, #4
 800a174:	4618      	mov	r0, r3
 800a176:	f7fd ff79 	bl	800806c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d022      	beq.n	800a1ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	699a      	ldr	r2, [r3, #24]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	18d1      	adds	r1, r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	6978      	ldr	r0, [r7, #20]
 800a196:	f000 f8d1 	bl	800a33c <prvInsertTimerInActiveList>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d01f      	beq.n	800a1e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6978      	ldr	r0, [r7, #20]
 800a1ac:	f7ff ff88 	bl	800a0c0 <xTimerGenericCommand>
 800a1b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d113      	bne.n	800a1e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	60fb      	str	r3, [r7, #12]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d4:	f023 0301 	bic.w	r3, r3, #1
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	6978      	ldr	r0, [r7, #20]
 800a1e6:	4798      	blx	r3
}
 800a1e8:	bf00      	nop
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	20002734 	.word	0x20002734

0800a1f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1fc:	f107 0308 	add.w	r3, r7, #8
 800a200:	4618      	mov	r0, r3
 800a202:	f000 f857 	bl	800a2b4 <prvGetNextExpireTime>
 800a206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 f803 	bl	800a218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a212:	f000 f8d5 	bl	800a3c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a216:	e7f1      	b.n	800a1fc <prvTimerTask+0x8>

0800a218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a222:	f7ff f91b 	bl	800945c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f866 	bl	800a2fc <prvSampleTimeNow>
 800a230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d130      	bne.n	800a29a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d806      	bhi.n	800a254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a246:	f7ff f917 	bl	8009478 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7ff ff85 	bl	800a15c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a252:	e024      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d008      	beq.n	800a26c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a25a:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <prvProcessTimerOrBlockTask+0x90>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <prvProcessTimerOrBlockTask+0x50>
 800a264:	2301      	movs	r3, #1
 800a266:	e000      	b.n	800a26a <prvProcessTimerOrBlockTask+0x52>
 800a268:	2300      	movs	r3, #0
 800a26a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <prvProcessTimerOrBlockTask+0x94>)
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4619      	mov	r1, r3
 800a27a:	f7fe fe5f 	bl	8008f3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f7ff f8fb 	bl	8009478 <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a288:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <prvProcessTimerOrBlockTask+0x98>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
}
 800a298:	e001      	b.n	800a29e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a29a:	f7ff f8ed 	bl	8009478 <xTaskResumeAll>
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20002738 	.word	0x20002738
 800a2ac:	2000273c 	.word	0x2000273c
 800a2b0:	e000ed04 	.word	0xe000ed04

0800a2b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2bc:	4b0e      	ldr	r3, [pc, #56]	; (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <prvGetNextExpireTime+0x16>
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	e000      	b.n	800a2cc <prvGetNextExpireTime+0x18>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d105      	bne.n	800a2e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2d8:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <prvGetNextExpireTime+0x44>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	e001      	b.n	800a2e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20002734 	.word	0x20002734

0800a2fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a304:	f7ff f956 	bl	80095b4 <xTaskGetTickCount>
 800a308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a30a:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <prvSampleTimeNow+0x3c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	429a      	cmp	r2, r3
 800a312:	d205      	bcs.n	800a320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a314:	f000 f936 	bl	800a584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e002      	b.n	800a326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a326:	4a04      	ldr	r2, [pc, #16]	; (800a338 <prvSampleTimeNow+0x3c>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a32c:	68fb      	ldr	r3, [r7, #12]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20002744 	.word	0x20002744

0800a33c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d812      	bhi.n	800a388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e01b      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a376:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <prvInsertTimerInActiveList+0x7c>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fd fe3a 	bl	8007ffa <vListInsert>
 800a386:	e012      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d206      	bcs.n	800a39e <prvInsertTimerInActiveList+0x62>
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d302      	bcc.n	800a39e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e007      	b.n	800a3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a39e:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <prvInsertTimerInActiveList+0x80>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7fd fe26 	bl	8007ffa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20002738 	.word	0x20002738
 800a3bc:	20002734 	.word	0x20002734

0800a3c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	; 0x38
 800a3c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3c6:	e0ca      	b.n	800a55e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	da18      	bge.n	800a400 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3ce:	1d3b      	adds	r3, r7, #4
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	61fb      	str	r3, [r7, #28]
}
 800a3ec:	bf00      	nop
 800a3ee:	e7fe      	b.n	800a3ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f6:	6850      	ldr	r0, [r2, #4]
 800a3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3fa:	6892      	ldr	r2, [r2, #8]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	f2c0 80aa 	blt.w	800a55c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d004      	beq.n	800a41e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	3304      	adds	r3, #4
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fd fe27 	bl	800806c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a41e:	463b      	mov	r3, r7
 800a420:	4618      	mov	r0, r3
 800a422:	f7ff ff6b 	bl	800a2fc <prvSampleTimeNow>
 800a426:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b09      	cmp	r3, #9
 800a42c:	f200 8097 	bhi.w	800a55e <prvProcessReceivedCommands+0x19e>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <prvProcessReceivedCommands+0x78>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a461 	.word	0x0800a461
 800a43c:	0800a461 	.word	0x0800a461
 800a440:	0800a461 	.word	0x0800a461
 800a444:	0800a4d5 	.word	0x0800a4d5
 800a448:	0800a4e9 	.word	0x0800a4e9
 800a44c:	0800a533 	.word	0x0800a533
 800a450:	0800a461 	.word	0x0800a461
 800a454:	0800a461 	.word	0x0800a461
 800a458:	0800a4d5 	.word	0x0800a4d5
 800a45c:	0800a4e9 	.word	0x0800a4e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	18d1      	adds	r1, r2, r3
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a480:	f7ff ff5c 	bl	800a33c <prvInsertTimerInActiveList>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d069      	beq.n	800a55e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a490:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d05e      	beq.n	800a55e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	441a      	add	r2, r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b2:	f7ff fe05 	bl	800a0c0 <xTimerGenericCommand>
 800a4b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d14f      	bne.n	800a55e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	61bb      	str	r3, [r7, #24]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4da:	f023 0301 	bic.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4e6:	e03a      	b.n	800a55e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ee:	f043 0301 	orr.w	r3, r3, #1
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	617b      	str	r3, [r7, #20]
}
 800a51a:	bf00      	nop
 800a51c:	e7fe      	b.n	800a51c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	699a      	ldr	r2, [r3, #24]
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	18d1      	adds	r1, r2, r3
 800a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52c:	f7ff ff06 	bl	800a33c <prvInsertTimerInActiveList>
					break;
 800a530:	e015      	b.n	800a55e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a542:	f7fd fbeb 	bl	8007d1c <vPortFree>
 800a546:	e00a      	b.n	800a55e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	b2da      	uxtb	r2, r3
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a55a:	e000      	b.n	800a55e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a55c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a55e:	4b08      	ldr	r3, [pc, #32]	; (800a580 <prvProcessReceivedCommands+0x1c0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	1d39      	adds	r1, r7, #4
 800a564:	2200      	movs	r2, #0
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe face 	bl	8008b08 <xQueueReceive>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f47f af2a 	bne.w	800a3c8 <prvProcessReceivedCommands+0x8>
	}
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	3730      	adds	r7, #48	; 0x30
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	2000273c 	.word	0x2000273c

0800a584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a58a:	e048      	b.n	800a61e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a58c:	4b2d      	ldr	r3, [pc, #180]	; (800a644 <prvSwitchTimerLists+0xc0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a596:	4b2b      	ldr	r3, [pc, #172]	; (800a644 <prvSwitchTimerLists+0xc0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd fd61 	bl	800806c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d02e      	beq.n	800a61e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d90e      	bls.n	800a5f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5de:	4b19      	ldr	r3, [pc, #100]	; (800a644 <prvSwitchTimerLists+0xc0>)
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f7fd fd06 	bl	8007ffa <vListInsert>
 800a5ee:	e016      	b.n	800a61e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7ff fd60 	bl	800a0c0 <xTimerGenericCommand>
 800a600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	603b      	str	r3, [r7, #0]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a61e:	4b09      	ldr	r3, [pc, #36]	; (800a644 <prvSwitchTimerLists+0xc0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1b1      	bne.n	800a58c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a628:	4b06      	ldr	r3, [pc, #24]	; (800a644 <prvSwitchTimerLists+0xc0>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a62e:	4b06      	ldr	r3, [pc, #24]	; (800a648 <prvSwitchTimerLists+0xc4>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a04      	ldr	r2, [pc, #16]	; (800a644 <prvSwitchTimerLists+0xc0>)
 800a634:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a636:	4a04      	ldr	r2, [pc, #16]	; (800a648 <prvSwitchTimerLists+0xc4>)
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	6013      	str	r3, [r2, #0]
}
 800a63c:	bf00      	nop
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	20002734 	.word	0x20002734
 800a648:	20002738 	.word	0x20002738

0800a64c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a652:	f7fd fe5f 	bl	8008314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <prvCheckForValidListAndQueue+0x60>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d120      	bne.n	800a6a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a65e:	4814      	ldr	r0, [pc, #80]	; (800a6b0 <prvCheckForValidListAndQueue+0x64>)
 800a660:	f7fd fc7a 	bl	8007f58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a664:	4813      	ldr	r0, [pc, #76]	; (800a6b4 <prvCheckForValidListAndQueue+0x68>)
 800a666:	f7fd fc77 	bl	8007f58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a66a:	4b13      	ldr	r3, [pc, #76]	; (800a6b8 <prvCheckForValidListAndQueue+0x6c>)
 800a66c:	4a10      	ldr	r2, [pc, #64]	; (800a6b0 <prvCheckForValidListAndQueue+0x64>)
 800a66e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a670:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <prvCheckForValidListAndQueue+0x70>)
 800a672:	4a10      	ldr	r2, [pc, #64]	; (800a6b4 <prvCheckForValidListAndQueue+0x68>)
 800a674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a676:	2300      	movs	r3, #0
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <prvCheckForValidListAndQueue+0x74>)
 800a67c:	4a11      	ldr	r2, [pc, #68]	; (800a6c4 <prvCheckForValidListAndQueue+0x78>)
 800a67e:	2110      	movs	r1, #16
 800a680:	200a      	movs	r0, #10
 800a682:	f7fd ffd1 	bl	8008628 <xQueueGenericCreateStatic>
 800a686:	4603      	mov	r3, r0
 800a688:	4a08      	ldr	r2, [pc, #32]	; (800a6ac <prvCheckForValidListAndQueue+0x60>)
 800a68a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a68c:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <prvCheckForValidListAndQueue+0x60>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <prvCheckForValidListAndQueue+0x60>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	490b      	ldr	r1, [pc, #44]	; (800a6c8 <prvCheckForValidListAndQueue+0x7c>)
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe fc24 	bl	8008ee8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6a0:	f7fd fe68 	bl	8008374 <vPortExitCritical>
}
 800a6a4:	bf00      	nop
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	2000273c 	.word	0x2000273c
 800a6b0:	2000270c 	.word	0x2000270c
 800a6b4:	20002720 	.word	0x20002720
 800a6b8:	20002734 	.word	0x20002734
 800a6bc:	20002738 	.word	0x20002738
 800a6c0:	200027e8 	.word	0x200027e8
 800a6c4:	20002748 	.word	0x20002748
 800a6c8:	0800a9b8 	.word	0x0800a9b8

0800a6cc <__libc_init_array>:
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	4d0d      	ldr	r5, [pc, #52]	; (800a704 <__libc_init_array+0x38>)
 800a6d0:	4c0d      	ldr	r4, [pc, #52]	; (800a708 <__libc_init_array+0x3c>)
 800a6d2:	1b64      	subs	r4, r4, r5
 800a6d4:	10a4      	asrs	r4, r4, #2
 800a6d6:	2600      	movs	r6, #0
 800a6d8:	42a6      	cmp	r6, r4
 800a6da:	d109      	bne.n	800a6f0 <__libc_init_array+0x24>
 800a6dc:	4d0b      	ldr	r5, [pc, #44]	; (800a70c <__libc_init_array+0x40>)
 800a6de:	4c0c      	ldr	r4, [pc, #48]	; (800a710 <__libc_init_array+0x44>)
 800a6e0:	f000 f92e 	bl	800a940 <_init>
 800a6e4:	1b64      	subs	r4, r4, r5
 800a6e6:	10a4      	asrs	r4, r4, #2
 800a6e8:	2600      	movs	r6, #0
 800a6ea:	42a6      	cmp	r6, r4
 800a6ec:	d105      	bne.n	800a6fa <__libc_init_array+0x2e>
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}
 800a6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f4:	4798      	blx	r3
 800a6f6:	3601      	adds	r6, #1
 800a6f8:	e7ee      	b.n	800a6d8 <__libc_init_array+0xc>
 800a6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6fe:	4798      	blx	r3
 800a700:	3601      	adds	r6, #1
 800a702:	e7f2      	b.n	800a6ea <__libc_init_array+0x1e>
 800a704:	0800ab0c 	.word	0x0800ab0c
 800a708:	0800ab0c 	.word	0x0800ab0c
 800a70c:	0800ab0c 	.word	0x0800ab0c
 800a710:	0800ab10 	.word	0x0800ab10

0800a714 <__retarget_lock_acquire_recursive>:
 800a714:	4770      	bx	lr

0800a716 <__retarget_lock_release_recursive>:
 800a716:	4770      	bx	lr

0800a718 <memcpy>:
 800a718:	440a      	add	r2, r1
 800a71a:	4291      	cmp	r1, r2
 800a71c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a720:	d100      	bne.n	800a724 <memcpy+0xc>
 800a722:	4770      	bx	lr
 800a724:	b510      	push	{r4, lr}
 800a726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a72a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a72e:	4291      	cmp	r1, r2
 800a730:	d1f9      	bne.n	800a726 <memcpy+0xe>
 800a732:	bd10      	pop	{r4, pc}

0800a734 <memset>:
 800a734:	4402      	add	r2, r0
 800a736:	4603      	mov	r3, r0
 800a738:	4293      	cmp	r3, r2
 800a73a:	d100      	bne.n	800a73e <memset+0xa>
 800a73c:	4770      	bx	lr
 800a73e:	f803 1b01 	strb.w	r1, [r3], #1
 800a742:	e7f9      	b.n	800a738 <memset+0x4>

0800a744 <cleanup_glue>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	460c      	mov	r4, r1
 800a748:	6809      	ldr	r1, [r1, #0]
 800a74a:	4605      	mov	r5, r0
 800a74c:	b109      	cbz	r1, 800a752 <cleanup_glue+0xe>
 800a74e:	f7ff fff9 	bl	800a744 <cleanup_glue>
 800a752:	4621      	mov	r1, r4
 800a754:	4628      	mov	r0, r5
 800a756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a75a:	f000 b869 	b.w	800a830 <_free_r>
	...

0800a760 <_reclaim_reent>:
 800a760:	4b2c      	ldr	r3, [pc, #176]	; (800a814 <_reclaim_reent+0xb4>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4283      	cmp	r3, r0
 800a766:	b570      	push	{r4, r5, r6, lr}
 800a768:	4604      	mov	r4, r0
 800a76a:	d051      	beq.n	800a810 <_reclaim_reent+0xb0>
 800a76c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a76e:	b143      	cbz	r3, 800a782 <_reclaim_reent+0x22>
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d14a      	bne.n	800a80c <_reclaim_reent+0xac>
 800a776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a778:	6819      	ldr	r1, [r3, #0]
 800a77a:	b111      	cbz	r1, 800a782 <_reclaim_reent+0x22>
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 f857 	bl	800a830 <_free_r>
 800a782:	6961      	ldr	r1, [r4, #20]
 800a784:	b111      	cbz	r1, 800a78c <_reclaim_reent+0x2c>
 800a786:	4620      	mov	r0, r4
 800a788:	f000 f852 	bl	800a830 <_free_r>
 800a78c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a78e:	b111      	cbz	r1, 800a796 <_reclaim_reent+0x36>
 800a790:	4620      	mov	r0, r4
 800a792:	f000 f84d 	bl	800a830 <_free_r>
 800a796:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a798:	b111      	cbz	r1, 800a7a0 <_reclaim_reent+0x40>
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 f848 	bl	800a830 <_free_r>
 800a7a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a7a2:	b111      	cbz	r1, 800a7aa <_reclaim_reent+0x4a>
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 f843 	bl	800a830 <_free_r>
 800a7aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a7ac:	b111      	cbz	r1, 800a7b4 <_reclaim_reent+0x54>
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 f83e 	bl	800a830 <_free_r>
 800a7b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a7b6:	b111      	cbz	r1, 800a7be <_reclaim_reent+0x5e>
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 f839 	bl	800a830 <_free_r>
 800a7be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a7c0:	b111      	cbz	r1, 800a7c8 <_reclaim_reent+0x68>
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 f834 	bl	800a830 <_free_r>
 800a7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ca:	b111      	cbz	r1, 800a7d2 <_reclaim_reent+0x72>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 f82f 	bl	800a830 <_free_r>
 800a7d2:	69a3      	ldr	r3, [r4, #24]
 800a7d4:	b1e3      	cbz	r3, 800a810 <_reclaim_reent+0xb0>
 800a7d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4798      	blx	r3
 800a7dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a7de:	b1b9      	cbz	r1, 800a810 <_reclaim_reent+0xb0>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7e6:	f7ff bfad 	b.w	800a744 <cleanup_glue>
 800a7ea:	5949      	ldr	r1, [r1, r5]
 800a7ec:	b941      	cbnz	r1, 800a800 <_reclaim_reent+0xa0>
 800a7ee:	3504      	adds	r5, #4
 800a7f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7f2:	2d80      	cmp	r5, #128	; 0x80
 800a7f4:	68d9      	ldr	r1, [r3, #12]
 800a7f6:	d1f8      	bne.n	800a7ea <_reclaim_reent+0x8a>
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 f819 	bl	800a830 <_free_r>
 800a7fe:	e7ba      	b.n	800a776 <_reclaim_reent+0x16>
 800a800:	680e      	ldr	r6, [r1, #0]
 800a802:	4620      	mov	r0, r4
 800a804:	f000 f814 	bl	800a830 <_free_r>
 800a808:	4631      	mov	r1, r6
 800a80a:	e7ef      	b.n	800a7ec <_reclaim_reent+0x8c>
 800a80c:	2500      	movs	r5, #0
 800a80e:	e7ef      	b.n	800a7f0 <_reclaim_reent+0x90>
 800a810:	bd70      	pop	{r4, r5, r6, pc}
 800a812:	bf00      	nop
 800a814:	20000014 	.word	0x20000014

0800a818 <__malloc_lock>:
 800a818:	4801      	ldr	r0, [pc, #4]	; (800a820 <__malloc_lock+0x8>)
 800a81a:	f7ff bf7b 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800a81e:	bf00      	nop
 800a820:	20002838 	.word	0x20002838

0800a824 <__malloc_unlock>:
 800a824:	4801      	ldr	r0, [pc, #4]	; (800a82c <__malloc_unlock+0x8>)
 800a826:	f7ff bf76 	b.w	800a716 <__retarget_lock_release_recursive>
 800a82a:	bf00      	nop
 800a82c:	20002838 	.word	0x20002838

0800a830 <_free_r>:
 800a830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a832:	2900      	cmp	r1, #0
 800a834:	d044      	beq.n	800a8c0 <_free_r+0x90>
 800a836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a83a:	9001      	str	r0, [sp, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f1a1 0404 	sub.w	r4, r1, #4
 800a842:	bfb8      	it	lt
 800a844:	18e4      	addlt	r4, r4, r3
 800a846:	f7ff ffe7 	bl	800a818 <__malloc_lock>
 800a84a:	4a1e      	ldr	r2, [pc, #120]	; (800a8c4 <_free_r+0x94>)
 800a84c:	9801      	ldr	r0, [sp, #4]
 800a84e:	6813      	ldr	r3, [r2, #0]
 800a850:	b933      	cbnz	r3, 800a860 <_free_r+0x30>
 800a852:	6063      	str	r3, [r4, #4]
 800a854:	6014      	str	r4, [r2, #0]
 800a856:	b003      	add	sp, #12
 800a858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a85c:	f7ff bfe2 	b.w	800a824 <__malloc_unlock>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d908      	bls.n	800a876 <_free_r+0x46>
 800a864:	6825      	ldr	r5, [r4, #0]
 800a866:	1961      	adds	r1, r4, r5
 800a868:	428b      	cmp	r3, r1
 800a86a:	bf01      	itttt	eq
 800a86c:	6819      	ldreq	r1, [r3, #0]
 800a86e:	685b      	ldreq	r3, [r3, #4]
 800a870:	1949      	addeq	r1, r1, r5
 800a872:	6021      	streq	r1, [r4, #0]
 800a874:	e7ed      	b.n	800a852 <_free_r+0x22>
 800a876:	461a      	mov	r2, r3
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	b10b      	cbz	r3, 800a880 <_free_r+0x50>
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d9fa      	bls.n	800a876 <_free_r+0x46>
 800a880:	6811      	ldr	r1, [r2, #0]
 800a882:	1855      	adds	r5, r2, r1
 800a884:	42a5      	cmp	r5, r4
 800a886:	d10b      	bne.n	800a8a0 <_free_r+0x70>
 800a888:	6824      	ldr	r4, [r4, #0]
 800a88a:	4421      	add	r1, r4
 800a88c:	1854      	adds	r4, r2, r1
 800a88e:	42a3      	cmp	r3, r4
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	d1e0      	bne.n	800a856 <_free_r+0x26>
 800a894:	681c      	ldr	r4, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	6053      	str	r3, [r2, #4]
 800a89a:	4421      	add	r1, r4
 800a89c:	6011      	str	r1, [r2, #0]
 800a89e:	e7da      	b.n	800a856 <_free_r+0x26>
 800a8a0:	d902      	bls.n	800a8a8 <_free_r+0x78>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	e7d6      	b.n	800a856 <_free_r+0x26>
 800a8a8:	6825      	ldr	r5, [r4, #0]
 800a8aa:	1961      	adds	r1, r4, r5
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	bf04      	itt	eq
 800a8b0:	6819      	ldreq	r1, [r3, #0]
 800a8b2:	685b      	ldreq	r3, [r3, #4]
 800a8b4:	6063      	str	r3, [r4, #4]
 800a8b6:	bf04      	itt	eq
 800a8b8:	1949      	addeq	r1, r1, r5
 800a8ba:	6021      	streq	r1, [r4, #0]
 800a8bc:	6054      	str	r4, [r2, #4]
 800a8be:	e7ca      	b.n	800a856 <_free_r+0x26>
 800a8c0:	b003      	add	sp, #12
 800a8c2:	bd30      	pop	{r4, r5, pc}
 800a8c4:	2000283c 	.word	0x2000283c

0800a8c8 <llroundf>:
 800a8c8:	ee10 0a10 	vmov	r0, s0
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f1a5 047f 	sub.w	r4, r5, #127	; 0x7f
 800a8d8:	bfb4      	ite	lt
 800a8da:	f04f 32ff 	movlt.w	r2, #4294967295
 800a8de:	2201      	movge	r2, #1
 800a8e0:	2c3e      	cmp	r4, #62	; 0x3e
 800a8e2:	dc2a      	bgt.n	800a93a <llroundf+0x72>
 800a8e4:	2c00      	cmp	r4, #0
 800a8e6:	da05      	bge.n	800a8f4 <llroundf+0x2c>
 800a8e8:	3401      	adds	r4, #1
 800a8ea:	bf18      	it	ne
 800a8ec:	2200      	movne	r2, #0
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	17d1      	asrs	r1, r2, #31
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800a8f8:	2c16      	cmp	r4, #22
 800a8fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800a8fe:	dd13      	ble.n	800a928 <llroundf+0x60>
 800a900:	f1a5 0396 	sub.w	r3, r5, #150	; 0x96
 800a904:	f1a5 04b6 	sub.w	r4, r5, #182	; 0xb6
 800a908:	f1c5 05b6 	rsb	r5, r5, #182	; 0xb6
 800a90c:	fa01 f404 	lsl.w	r4, r1, r4
 800a910:	fa21 f505 	lsr.w	r5, r1, r5
 800a914:	432c      	orrs	r4, r5
 800a916:	4099      	lsls	r1, r3
 800a918:	17d3      	asrs	r3, r2, #31
 800a91a:	4354      	muls	r4, r2
 800a91c:	fb01 4403 	mla	r4, r1, r3, r4
 800a920:	fba2 0101 	umull	r0, r1, r2, r1
 800a924:	4421      	add	r1, r4
 800a926:	e7e4      	b.n	800a8f2 <llroundf+0x2a>
 800a928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a92c:	4123      	asrs	r3, r4
 800a92e:	4419      	add	r1, r3
 800a930:	f1c4 0417 	rsb	r4, r4, #23
 800a934:	40e1      	lsrs	r1, r4
 800a936:	2400      	movs	r4, #0
 800a938:	e7ee      	b.n	800a918 <llroundf+0x50>
 800a93a:	f7f5 fd6f 	bl	800041c <__aeabi_f2lz>
 800a93e:	e7d8      	b.n	800a8f2 <llroundf+0x2a>

0800a940 <_init>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr

0800a94c <_fini>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	bf00      	nop
 800a950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a952:	bc08      	pop	{r3}
 800a954:	469e      	mov	lr, r3
 800a956:	4770      	bx	lr
